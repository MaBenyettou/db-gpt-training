{"prompt": "History Payments", "completion": "select * from `client_transactions` where `cr` > 0", "template": "payment_history", "sample_id": 1}
{"prompt": "History Payments", "completion": "select * from `client_transactions` where `cr` > 0", "template": "payment_history", "sample_id": 2}
{"prompt": "History Payments Date: 27/08/2025", "completion": "select * from `client_transactions` where date(`client_transactions`.`time`) = '2025-08-27' and `cr` > 0", "template": "payment_history", "sample_id": 3}
{"prompt": "History Payments Date: 05/09/2025 to 11/09/2025", "completion": "select * from `client_transactions` where `client_transactions`.`time` between '2025-09-05 00:00:00' and '2025-09-11 23:59:59' and `cr` > 0", "template": "payment_history", "sample_id": 4}
{"prompt": "History Payments Date: 24/09/2025 TB 04/10/2025", "completion": "select * from `client_transactions` where `client_transactions`.`time` between '2025-09-24 00:00:00' and '2025-10-04 23:59:59' and `cr` > 0", "template": "payment_history", "sample_id": 5}
{"prompt": "Customer credits", "completion": "select * from `clients` where `balance` < 0 and `clients`.`deleted_at` is null", "template": "client_credits", "sample_id": 1}
{"prompt": "Customer credits", "completion": "select * from `clients` where `balance` < 0 and `clients`.`deleted_at` is null", "template": "client_credits", "sample_id": 2}
{"prompt": "Customer credits", "completion": "select * from `clients` where `balance` < 0 and `clients`.`deleted_at` is null", "template": "client_credits", "sample_id": 3}
{"prompt": "Customer credits", "completion": "select * from `clients` where `balance` < 0 and `clients`.`deleted_at` is null", "template": "client_credits", "sample_id": 4}
{"prompt": "Customer credits", "completion": "select * from `clients` where `balance` < 0 and `clients`.`deleted_at` is null", "template": "client_credits", "sample_id": 5}
{"prompt": "Cause of non purchase", "completion": "select `dynamic_enums`.`code` as `name`, `sub_query`.`count` as `total`, `sub_query`.`start_time` as `date` from `dynamic_enums` inner join (select `reason`, COUNT(*) as count, DATE(orders.start_time) as start_time from `orders` where `status` = 'CANCELED' group by `reason`, `start_time`) as `sub_query` on `dynamic_enums`.`id` = `sub_query`.`reason` where `dynamic_enums`.`deleted_at` is null", "template": "canceled_orders_reasons", "sample_id": 1}
{"prompt": "Cause of non purchase Date: 19/10/2025", "completion": "select `dynamic_enums`.`code` as `name`, `sub_query`.`count` as `total`, `sub_query`.`start_time` as `date` from `dynamic_enums` inner join (select `reason`, COUNT(*) as count, DATE(orders.start_time) as start_time from `orders` where date(`orders`.`delivery_time`) = '2025-10-19' and `status` = 'CANCELED' group by `reason`, `start_time`) as `sub_query` on `dynamic_enums`.`id` = `sub_query`.`reason` where `dynamic_enums`.`deleted_at` is null", "template": "canceled_orders_reasons", "sample_id": 2}
{"prompt": "Cause of non purchase Date: 04/09/2025", "completion": "select `dynamic_enums`.`code` as `name`, `sub_query`.`count` as `total`, `sub_query`.`start_time` as `date` from `dynamic_enums` inner join (select `reason`, COUNT(*) as count, DATE(orders.start_time) as start_time from `orders` where date(`orders`.`delivery_time`) >= '2025-09-04' and `status` = 'CANCELED' group by `reason`, `start_time`) as `sub_query` on `dynamic_enums`.`id` = `sub_query`.`reason` where `dynamic_enums`.`deleted_at` is null", "template": "canceled_orders_reasons", "sample_id": 3}
{"prompt": "Cause of non purchase Date: 16/10/2025", "completion": "select `dynamic_enums`.`code` as `name`, `sub_query`.`count` as `total`, `sub_query`.`start_time` as `date` from `dynamic_enums` inner join (select `reason`, COUNT(*) as count, DATE(orders.start_time) as start_time from `orders` where date(`orders`.`delivery_time`) <= '2025-10-16' and `status` = 'CANCELED' group by `reason`, `start_time`) as `sub_query` on `dynamic_enums`.`id` = `sub_query`.`reason` where `dynamic_enums`.`deleted_at` is null", "template": "canceled_orders_reasons", "sample_id": 4}
{"prompt": "Cause of non purchase Date: 08/10/2025", "completion": "select `dynamic_enums`.`code` as `name`, `sub_query`.`count` as `total`, `sub_query`.`start_time` as `date` from `dynamic_enums` inner join (select `reason`, COUNT(*) as count, DATE(orders.start_time) as start_time from `orders` where date(`orders`.`delivery_time`) = '2025-10-08' and `status` = 'CANCELED' group by `reason`, `start_time`) as `sub_query` on `dynamic_enums`.`id` = `sub_query`.`reason` where `dynamic_enums`.`deleted_at` is null", "template": "canceled_orders_reasons", "sample_id": 5}
{"prompt": "Sales by product category", "completion": "select MIN(product_categories.name) as product_category, product_categories.id as product_category_id, SUM(order_product.total_delivered_price) as total_delivered_price from `orders` inner join `order_product` on `order_product`.`order_id` = `orders`.`id` inner join `products` on `order_product`.`product_id` = `products`.`id` inner join `product_categories` on `products`.`product_category_id` = `product_categories`.`id` where `orders`.`status` in ('DELIVERED', 'PARTIALDELIVERY') group by `product_categories`.`id` order by `total_delivered_price` desc", "template": "product_categories_sales", "sample_id": 1}
{"prompt": "Sales by product category Product category: chicken", "completion": "select MIN(product_categories.name) as product_category, product_categories.id as product_category_id, SUM(order_product.total_delivered_price) as total_delivered_price from `orders` inner join `order_product` on `order_product`.`order_id` = `orders`.`id` inner join `products` on `order_product`.`product_id` = `products`.`id` inner join `product_categories` on `products`.`product_category_id` = `product_categories`.`id` where `orders`.`status` in ('DELIVERED', 'PARTIALDELIVERY') and `product_category_id` in (3) group by `product_categories`.`id` order by `total_delivered_price` desc", "template": "product_categories_sales", "sample_id": 2}
{"prompt": "Sales by product category Product category: CRT1 Order date: 11/09/2025", "completion": "select MIN(product_categories.name) as product_category, product_categories.id as product_category_id, SUM(order_product.total_delivered_price) as total_delivered_price from `orders` inner join `order_product` on `order_product`.`order_id` = `orders`.`id` inner join `products` on `order_product`.`product_id` = `products`.`id` inner join `product_categories` on `products`.`product_category_id` = `product_categories`.`id` where date(`start_time`) >= '2025-09-11' and `orders`.`status` in ('DELIVERED', 'PARTIALDELIVERY') and `product_category_id` in (11) group by `product_categories`.`id` order by `total_delivered_price` desc", "template": "product_categories_sales", "sample_id": 3}
{"prompt": "Sales by product category Order date: 03/09/2025", "completion": "select MIN(product_categories.name) as product_category, product_categories.id as product_category_id, SUM(order_product.total_delivered_price) as total_delivered_price from `orders` inner join `order_product` on `order_product`.`order_id` = `orders`.`id` inner join `products` on `order_product`.`product_id` = `products`.`id` inner join `product_categories` on `products`.`product_category_id` = `product_categories`.`id` where date(`start_time`) >= '2025-09-03' and `orders`.`status` in ('DELIVERED', 'PARTIALDELIVERY') group by `product_categories`.`id` order by `total_delivered_price` desc", "template": "product_categories_sales", "sample_id": 4}
{"prompt": "Sales by product category Product category: POS MATERIAL, Mayonnaise, Beef Order date: 07/10/2025", "completion": "select MIN(product_categories.name) as product_category, product_categories.id as product_category_id, SUM(order_product.total_delivered_price) as total_delivered_price from `orders` inner join `order_product` on `order_product`.`order_id` = `orders`.`id` inner join `products` on `order_product`.`product_id` = `products`.`id` inner join `product_categories` on `products`.`product_category_id` = `product_categories`.`id` where date(`start_time`) >= '2025-10-07' and `orders`.`status` in ('DELIVERED', 'PARTIALDELIVERY') and `product_category_id` in (2, 14, 9) group by `product_categories`.`id` order by `total_delivered_price` desc", "template": "product_categories_sales", "sample_id": 5}
{"prompt": "Sales by product", "completion": "select products.id as product_id, MIN(products.name) as name, SUM(order_product.total_delivered_price) as total from `orders` inner join `order_product` on `order_product`.`order_id` = `orders`.`id` inner join `products` on `order_product`.`product_id` = `products`.`id` where `orders`.`status` in ('DELIVERED', 'PARTIALDELIVERY') group by `products`.`id` order by `total` desc", "template": "product_sales", "sample_id": 1}
{"prompt": "Sales by product product: tomato dct 800g, tast enhancers bouillon cube givers chicken 48x10g", "completion": "select products.id as product_id, MIN(products.name) as name, SUM(order_product.total_delivered_price) as total from `orders` inner join `order_product` on `order_product`.`order_id` = `orders`.`id` inner join `products` on `order_product`.`product_id` = `products`.`id` where `product_id` in (19, 11) and `orders`.`status` in ('DELIVERED', 'PARTIALDELIVERY') group by `products`.`id` order by `total` desc", "template": "product_sales", "sample_id": 2}
{"prompt": "Sales by product product: tast enhancers bouillon cube givers sheep 48x10g", "completion": "select products.id as product_id, MIN(products.name) as name, SUM(order_product.total_delivered_price) as total from `orders` inner join `order_product` on `order_product`.`order_id` = `orders`.`id` inner join `products` on `order_product`.`product_id` = `products`.`id` where `product_id` in (20) and `orders`.`status` in ('DELIVERED', 'PARTIALDELIVERY') group by `products`.`id` order by `total` desc", "template": "product_sales", "sample_id": 3}
{"prompt": "Sales per product Order date: 04/10/2025", "completion": "select products.id as product_id, MIN(products.name) as name, SUM(order_product.total_delivered_price) as total from `orders` inner join `order_product` on `order_product`.`order_id` = `orders`.`id` inner join `products` on `order_product`.`product_id` = `products`.`id` where date(`start_time`) = '2025-10-04' and `orders`.`status` in ('DELIVERED', 'PARTIALDELIVERY') group by `products`.`id` order by `total` desc", "template": "product_sales", "sample_id": 4}
{"prompt": "Sales by product Product: Seasonings Beef 30x7g, RM JB Noodles Cheese 40 Vita DZ 70gr, Maxi 120g chicken noodles (NF)", "completion": "select products.id as product_id, MIN(products.name) as name, SUM(order_product.total_delivered_price) as total from `orders` inner join `order_product` on `order_product`.`order_id` = `orders`.`id` inner join `products` on `order_product`.`product_id` = `products`.`id` where `product_id` in (44, 25, 90) and `orders`.`status` in ('DELIVERED', 'PARTIALDELIVERY') group by `products`.`id` order by `total` desc", "template": "product_sales", "sample_id": 5}
{"prompt": "Customer visits", "completion": "select * from `client_visits`", "template": "client_visits", "sample_id": 1}
{"prompt": "Delegated client visits: Amine Test, Samuel Robertson Visit date: 29/09/2025", "completion": "select * from `client_visits` where `client_visits`.`employee_id` in (8, 31) and date(`client_visits`.`start_time`) = '2025-09-29'", "template": "client_visits", "sample_id": 2}
{"prompt": "Customer visits Date of visit: 03/10/2025", "completion": "select * from `client_visits` where date(`client_visits`.`start_time`) <= '2025-10-03'", "template": "client_visits", "sample_id": 3}
{"prompt": "Delegated client visits: Amine Test, Felicity Cervantes, Taher Boulahia", "completion": "select * from `client_visits` where `client_visits`.`employee_id` in (32, 37, 8)", "template": "client_visits", "sample_id": 4}
{"prompt": "Delegated client visits: Abdel Shafi Mohamed, Test test, Lakehal Abderrahmane Visit: 26/09/2025", "completion": "select * from `client_visits` where `client_visits`.`employee_id` in (7, 21, 6) and date(`client_visits`.`start_time`) = '2025-09-26'", "template": "client_visits", "sample_id": 5}
{"prompt": "Customers by activity trial", "completion": "select `business_type_lang`.`id` as `business_type_id`, `business_type_lang`.`name` as `business_type_name`, `sub_query`.`client` as `client`, `sub_query`.`client_id` as `id_client` from `business_type_lang` inner join (select `clients`.`company_name` as `client`, `clients`.`id` as `client_id`, business_type.id as business_type from `clients` inner join `clients_details` on `clients`.`id` = `clients_details`.`client_id` inner join `business_type` on `clients_details`.`business_type_id` = `business_type`.`id` where (((`clients`.`villes_id` in (5) and (`clients`.`route_id` is null or `clients`.`route_id` in (133))) or `clients`.`route_id` in (133)) or (`clients`.`user_group_id` in (23))) and `clients`.`deleted_at` is null) as `sub_query` on `business_type_lang`.`business_type_id` = `sub_query`.`business_type` and `lang` = 'EN'", "template": "clients_activity_sectors", "sample_id": 1}
{"prompt": "Customers by activity sessor of activity: wholesalers, hotel", "completion": "select `business_type_lang`.`id` as `business_type_id`, `business_type_lang`.`name` as `business_type_name`, `sub_query`.`client` as `client`, `sub_query`.`client_id` as `id_client` from `business_type_lang` inner join (select `clients`.`company_name` as `client`, `clients`.`id` as `client_id`, business_type.id as business_type from `clients` inner join `clients_details` on `clients`.`id` = `clients_details`.`client_id` inner join `business_type` on `clients_details`.`business_type_id` = `business_type`.`id` where (((`clients`.`villes_id` in (5) and (`clients`.`route_id` is null or `clients`.`route_id` in (133))) or `clients`.`route_id` in (133)) or (`clients`.`user_group_id` in (23))) and `clients`.`deleted_at` is null) as `sub_query` on `business_type_lang`.`business_type_id` = `sub_query`.`business_type` and `lang` = 'EN' where `business_type_id` in (15, 13)", "template": "clients_activity_sectors", "sample_id": 2}
{"prompt": "Customers by activity trial of activity: cosmetic product", "completion": "select `business_type_lang`.`id` as `business_type_id`, `business_type_lang`.`name` as `business_type_name`, `sub_query`.`client` as `client`, `sub_query`.`client_id` as `id_client` from `business_type_lang` inner join (select `clients`.`company_name` as `client`, `clients`.`id` as `client_id`, business_type.id as business_type from `clients` inner join `clients_details` on `clients`.`id` = `clients_details`.`client_id` inner join `business_type` on `clients_details`.`business_type_id` = `business_type`.`id` where (((`clients`.`villes_id` in (5) and (`clients`.`route_id` is null or `clients`.`route_id` in (133))) or `clients`.`route_id` in (133)) or (`clients`.`user_group_id` in (23))) and `clients`.`deleted_at` is null) as `sub_query` on `business_type_lang`.`business_type_id` = `sub_query`.`business_type` and `lang` = 'EN' where `business_type_id` in (34)", "template": "clients_activity_sectors", "sample_id": 3}
{"prompt": "Customers by activity trial", "completion": "select `business_type_lang`.`id` as `business_type_id`, `business_type_lang`.`name` as `business_type_name`, `sub_query`.`client` as `client`, `sub_query`.`client_id` as `id_client` from `business_type_lang` inner join (select `clients`.`company_name` as `client`, `clients`.`id` as `client_id`, business_type.id as business_type from `clients` inner join `clients_details` on `clients`.`id` = `clients_details`.`client_id` inner join `business_type` on `clients_details`.`business_type_id` = `business_type`.`id` where (((`clients`.`villes_id` in (5) and (`clients`.`route_id` is null or `clients`.`route_id` in (133))) or `clients`.`route_id` in (133)) or (`clients`.`user_group_id` in (23))) and `clients`.`deleted_at` is null) as `sub_query` on `business_type_lang`.`business_type_id` = `sub_query`.`business_type` and `lang` = 'EN'", "template": "clients_activity_sectors", "sample_id": 4}
{"prompt": "Customers by activity trial of activity sessor: Grocery, supermarket, kms", "completion": "select `business_type_lang`.`id` as `business_type_id`, `business_type_lang`.`name` as `business_type_name`, `sub_query`.`client` as `client`, `sub_query`.`client_id` as `id_client` from `business_type_lang` inner join (select `clients`.`company_name` as `client`, `clients`.`id` as `client_id`, business_type.id as business_type from `clients` inner join `clients_details` on `clients`.`id` = `clients_details`.`client_id` inner join `business_type` on `clients_details`.`business_type_id` = `business_type`.`id` where (((`clients`.`villes_id` in (5) and (`clients`.`route_id` is null or `clients`.`route_id` in (133))) or `clients`.`route_id` in (133)) or (`clients`.`user_group_id` in (23))) and `clients`.`deleted_at` is null) as `sub_query` on `business_type_lang`.`business_type_id` = `sub_query`.`business_type` and `lang` = 'EN' where `business_type_id` in (27, 3, 8)", "template": "clients_activity_sectors", "sample_id": 5}
{"prompt": "Orders canceled", "completion": "select * from `orders` where exists (select * from `clients` where `orders`.`client_id` = `clients`.`id` and (((`clients`.`villes_id` in (5) and (`clients`.`route_id` is null or `clients`.`route_id` in (133))) or `clients`.`route_id` in (133)) or (`clients`.`user_group_id` in (23)))) and `orders`.`status` = 'CANCELED'", "template": "canceled_orders", "sample_id": 1}
{"prompt": "Orders canceled delegates:", "completion": "select * from `orders` where exists (select * from `clients` where `orders`.`client_id` = `clients`.`id` and (((`clients`.`villes_id` in (5) and (`clients`.`route_id` is null or `clients`.`route_id` in (133))) or `clients`.`route_id` in (133)) or (`clients`.`user_group_id` in (23)))) and 0 = 1 and `orders`.`status` = 'CANCELED'", "template": "canceled_orders", "sample_id": 2}
{"prompt": "Orders canceled delegates:", "completion": "select * from `orders` where exists (select * from `clients` where `orders`.`client_id` = `clients`.`id` and (((`clients`.`villes_id` in (5) and (`clients`.`route_id` is null or `clients`.`route_id` in (133))) or `clients`.`route_id` in (133)) or (`clients`.`user_group_id` in (23)))) and 0 = 1 and `orders`.`status` = 'CANCELED'", "template": "canceled_orders", "sample_id": 3}
{"prompt": "Orders canceled orders: order date: 18/09/2025", "completion": "select * from `orders` where exists (select * from `clients` where `orders`.`client_id` = `clients`.`id` and (((`clients`.`villes_id` in (5) and (`clients`.`route_id` is null or `clients`.`route_id` in (133))) or `clients`.`route_id` in (133)) or (`clients`.`user_group_id` in (23)))) and 0 = 1 and date(`orders`.`start_time`) = '2025-09-18' and `orders`.`status` = 'CANCELED'", "template": "canceled_orders", "sample_id": 4}
{"prompt": "Orders canceled orders: order date: 08/09/2025", "completion": "select * from `orders` where exists (select * from `clients` where `orders`.`client_id` = `clients`.`id` and (((`clients`.`villes_id` in (5) and (`clients`.`route_id` is null or `clients`.`route_id` in (133))) or `clients`.`route_id` in (133)) or (`clients`.`user_group_id` in (23)))) and 0 = 1 and date(`orders`.`start_time`) >= '2025-09-08' and `orders`.`status` = 'CANCELED'", "template": "canceled_orders", "sample_id": 5}
{"prompt": "Product feedback", "completion": "select products.name as name, DATE(client_returns.start_time) as start_time from `products` inner join `client_return_products` on `products`.`id` = `client_return_products`.`product_id` inner join `client_returns` on `client_return_products`.`client_return_id` = `client_returns`.`id` and `client_returns`.`status` in ('ACCEPTED', 'ONHOLD')", "template": "return_products", "sample_id": 1}
{"prompt": "Product feedback", "completion": "select products.name as name, DATE(client_returns.start_time) as start_time from `products` inner join `client_return_products` on `products`.`id` = `client_return_products`.`product_id` inner join `client_returns` on `client_return_products`.`client_return_id` = `client_returns`.`id` and `client_returns`.`status` in ('ACCEPTED', 'ONHOLD')", "template": "return_products", "sample_id": 2}
{"prompt": "Product returns Return date: 06/09/2025 to 15/09/2025", "completion": "select products.name as name, DATE(client_returns.start_time) as start_time from `products` inner join `client_return_products` on `products`.`id` = `client_return_products`.`product_id` inner join `client_returns` on `client_return_products`.`client_return_id` = `client_returns`.`id` and `client_returns`.`status` in ('ACCEPTED', 'ONHOLD') where `start_time` between '2025-09-06 00:00:00' and '2025-09-15 23:59:59'", "template": "return_products", "sample_id": 3}
{"prompt": "Product returns Return date: 08/10/2025", "completion": "select products.name as name, DATE(client_returns.start_time) as start_time from `products` inner join `client_return_products` on `products`.`id` = `client_return_products`.`product_id` inner join `client_returns` on `client_return_products`.`client_return_id` = `client_returns`.`id` and `client_returns`.`status` in ('ACCEPTED', 'ONHOLD') where date(`start_time`) <= '2025-10-08'", "template": "return_products", "sample_id": 4}
{"prompt": "Return products return date: 09/10/2025", "completion": "select products.name as name, DATE(client_returns.start_time) as start_time from `products` inner join `client_return_products` on `products`.`id` = `client_return_products`.`product_id` inner join `client_returns` on `client_return_products`.`client_return_id` = `client_returns`.`id` and `client_returns`.`status` in ('ACCEPTED', 'ONHOLD') where date(`start_time`) >= '2025-09-10'", "template": "return_products", "sample_id": 5}
{"prompt": "Caneaux sales of customers", "completion": "select `client_canals_lang`.`id` as `id`, `client_canals_lang`.`name` as `canal`, `sub_query`.`total` as `total`, `sub_query`.`client_name` as `client_name`, `sub_query`.`client_id` as `id_client` from `client_canals_lang` inner join (select client_canals.id as canal_id, SUM(orders.delivered_total) as total, clients.id as client_id, MIN(clients.company_name) as client_name from `orders` inner join `clients_details` on `orders`.`client_id` = `clients_details`.`client_id` inner join `client_canals` on `clients_details`.`client_canal_id` = `client_canals`.`id` inner join `clients` on `clients_details`.`client_id` = `clients`.`id` where exists (select * from `clients` where `orders`.`client_id` = `clients`.`id` and (((`clients`.`villes_id` in (5) and (`clients`.`route_id` is null or `clients`.`route_id` in (133))) or `clients`.`route_id` in (133)) or (`clients`.`user_group_id` in (23)))) and `orders`.`status` in ('DELIVERED', 'PARTIALDELIVERY') group by `canal_id`, `client_id` order by `client_id` asc) as `sub_query` on `client_canals_lang`.`client_canal_id` = `sub_query`.`canal_id` and `lang` = 'EN'", "template": "clients_canals_sales", "sample_id": 1}
{"prompt": "Caneaux sales of customers", "completion": "select `client_canals_lang`.`id` as `id`, `client_canals_lang`.`name` as `canal`, `sub_query`.`total` as `total`, `sub_query`.`client_name` as `client_name`, `sub_query`.`client_id` as `id_client` from `client_canals_lang` inner join (select client_canals.id as canal_id, SUM(orders.delivered_total) as total, clients.id as client_id, MIN(clients.company_name) as client_name from `orders` inner join `clients_details` on `orders`.`client_id` = `clients_details`.`client_id` inner join `client_canals` on `clients_details`.`client_canal_id` = `client_canals`.`id` inner join `clients` on `clients_details`.`client_id` = `clients`.`id` where exists (select * from `clients` where `orders`.`client_id` = `clients`.`id` and (((`clients`.`villes_id` in (5) and (`clients`.`route_id` is null or `clients`.`route_id` in (133))) or `clients`.`route_id` in (133)) or (`clients`.`user_group_id` in (23)))) and `orders`.`status` in ('DELIVERED', 'PARTIALDELIVERY') group by `canal_id`, `client_id` order by `client_id` asc) as `sub_query` on `client_canals_lang`.`client_canal_id` = `sub_query`.`canal_id` and `lang` = 'EN'", "template": "clients_canals_sales", "sample_id": 2}
{"prompt": "Sales by Caneaux of Canal Customers: Sale in detail", "completion": "select `client_canals_lang`.`id` as `id`, `client_canals_lang`.`name` as `canal`, `sub_query`.`total` as `total`, `sub_query`.`client_name` as `client_name`, `sub_query`.`client_id` as `id_client` from `client_canals_lang` inner join (select client_canals.id as canal_id, SUM(orders.delivered_total) as total, clients.id as client_id, MIN(clients.company_name) as client_name from `orders` inner join `clients_details` on `orders`.`client_id` = `clients_details`.`client_id` inner join `client_canals` on `clients_details`.`client_canal_id` = `client_canals`.`id` inner join `clients` on `clients_details`.`client_id` = `clients`.`id` where exists (select * from `clients` where `orders`.`client_id` = `clients`.`id` and (((`clients`.`villes_id` in (5) and (`clients`.`route_id` is null or `clients`.`route_id` in (133))) or `clients`.`route_id` in (133)) or (`clients`.`user_group_id` in (23)))) and `orders`.`status` in ('DELIVERED', 'PARTIALDELIVERY') group by `canal_id`, `client_id` order by `client_id` asc) as `sub_query` on `client_canals_lang`.`client_canal_id` = `sub_query`.`canal_id` and `lang` = 'EN' where `id` in (14)", "template": "clients_canals_sales", "sample_id": 3}
{"prompt": "Caneaux sales of Canal customers: Retail / Grocery", "completion": "select `client_canals_lang`.`id` as `id`, `client_canals_lang`.`name` as `canal`, `sub_query`.`total` as `total`, `sub_query`.`client_name` as `client_name`, `sub_query`.`client_id` as `id_client` from `client_canals_lang` inner join (select client_canals.id as canal_id, SUM(orders.delivered_total) as total, clients.id as client_id, MIN(clients.company_name) as client_name from `orders` inner join `clients_details` on `orders`.`client_id` = `clients_details`.`client_id` inner join `client_canals` on `clients_details`.`client_canal_id` = `client_canals`.`id` inner join `clients` on `clients_details`.`client_id` = `clients`.`id` where exists (select * from `clients` where `orders`.`client_id` = `clients`.`id` and (((`clients`.`villes_id` in (5) and (`clients`.`route_id` is null or `clients`.`route_id` in (133))) or `clients`.`route_id` in (133)) or (`clients`.`user_group_id` in (23)))) and `orders`.`status` in ('DELIVERED', 'PARTIALDELIVERY') group by `canal_id`, `client_id` order by `client_id` asc) as `sub_query` on `client_canals_lang`.`client_canal_id` = `sub_query`.`canal_id` and `lang` = 'EN' where `id` in (20)", "template": "clients_canals_sales", "sample_id": 4}
{"prompt": "Caneaux sales of customers", "completion": "select `client_canals_lang`.`id` as `id`, `client_canals_lang`.`name` as `canal`, `sub_query`.`total` as `total`, `sub_query`.`client_name` as `client_name`, `sub_query`.`client_id` as `id_client` from `client_canals_lang` inner join (select client_canals.id as canal_id, SUM(orders.delivered_total) as total, clients.id as client_id, MIN(clients.company_name) as client_name from `orders` inner join `clients_details` on `orders`.`client_id` = `clients_details`.`client_id` inner join `client_canals` on `clients_details`.`client_canal_id` = `client_canals`.`id` inner join `clients` on `clients_details`.`client_id` = `clients`.`id` where exists (select * from `clients` where `orders`.`client_id` = `clients`.`id` and (((`clients`.`villes_id` in (5) and (`clients`.`route_id` is null or `clients`.`route_id` in (133))) or `clients`.`route_id` in (133)) or (`clients`.`user_group_id` in (23)))) and `orders`.`status` in ('DELIVERED', 'PARTIALDELIVERY') group by `canal_id`, `client_id` order by `client_id` asc) as `sub_query` on `client_canals_lang`.`client_canal_id` = `sub_query`.`canal_id` and `lang` = 'EN'", "template": "clients_canals_sales", "sample_id": 5}
{"prompt": "Total sales for each day", "completion": "select clients.id as client_id, MIN(clients.company_name) as client, MIN(employees.name) as employee_name, DATE(orders.start_time) as start_time, SUM(orders.delivered_total) as total from `orders` inner join `clients` on `orders`.`client_id` = `clients`.`id` inner join `employees` on `orders`.`employee_id` = `employees`.`id` where exists (select * from `clients` where `orders`.`client_id` = `clients`.`id` and (((`clients`.`villes_id` in (5) and (`clients`.`route_id` is null or `clients`.`route_id` in (133))) or `clients`.`route_id` in (133)) or (`clients`.`user_group_id` in (23)))) and `orders`.`status` in ('DELIVERED', 'PARTIALDELIVERY') group by `clients`.`id`, `start_time` order by `total` asc", "template": "total_sales", "sample_id": 1}
{"prompt": "Total sales for each day", "completion": "select clients.id as client_id, MIN(clients.company_name) as client, MIN(employees.name) as employee_name, DATE(orders.start_time) as start_time, SUM(orders.delivered_total) as total from `orders` inner join `clients` on `orders`.`client_id` = `clients`.`id` inner join `employees` on `orders`.`employee_id` = `employees`.`id` where exists (select * from `clients` where `orders`.`client_id` = `clients`.`id` and (((`clients`.`villes_id` in (5) and (`clients`.`route_id` is null or `clients`.`route_id` in (133))) or `clients`.`route_id` in (133)) or (`clients`.`user_group_id` in (23)))) and `orders`.`status` in ('DELIVERED', 'PARTIALDELIVERY') group by `clients`.`id`, `start_time` order by `total` asc", "template": "total_sales", "sample_id": 2}
{"prompt": "Total sales for each day", "completion": "select clients.id as client_id, MIN(clients.company_name) as client, MIN(employees.name) as employee_name, DATE(orders.start_time) as start_time, SUM(orders.delivered_total) as total from `orders` inner join `clients` on `orders`.`client_id` = `clients`.`id` inner join `employees` on `orders`.`employee_id` = `employees`.`id` where exists (select * from `clients` where `orders`.`client_id` = `clients`.`id` and (((`clients`.`villes_id` in (5) and (`clients`.`route_id` is null or `clients`.`route_id` in (133))) or `clients`.`route_id` in (133)) or (`clients`.`user_group_id` in (23)))) and `orders`.`status` in ('DELIVERED', 'PARTIALDELIVERY') group by `clients`.`id`, `start_time` order by `total` asc", "template": "total_sales", "sample_id": 3}
{"prompt": "Total sales for each day", "completion": "select clients.id as client_id, MIN(clients.company_name) as client, MIN(employees.name) as employee_name, DATE(orders.start_time) as start_time, SUM(orders.delivered_total) as total from `orders` inner join `clients` on `orders`.`client_id` = `clients`.`id` inner join `employees` on `orders`.`employee_id` = `employees`.`id` where exists (select * from `clients` where `orders`.`client_id` = `clients`.`id` and (((`clients`.`villes_id` in (5) and (`clients`.`route_id` is null or `clients`.`route_id` in (133))) or `clients`.`route_id` in (133)) or (`clients`.`user_group_id` in (23)))) and `orders`.`status` in ('DELIVERED', 'PARTIALDELIVERY') group by `clients`.`id`, `start_time` order by `total` asc", "template": "total_sales", "sample_id": 4}
{"prompt": "Total sales for each day order date: 17/10/2025", "completion": "select clients.id as client_id, MIN(clients.company_name) as client, MIN(employees.name) as employee_name, DATE(orders.start_time) as start_time, SUM(orders.delivered_total) as total from `orders` inner join `clients` on `orders`.`client_id` = `clients`.`id` inner join `employees` on `orders`.`employee_id` = `employees`.`id` where exists (select * from `clients` where `orders`.`client_id` = `clients`.`id` and (((`clients`.`villes_id` in (5) and (`clients`.`route_id` is null or `clients`.`route_id` in (133))) or `clients`.`route_id` in (133)) or (`clients`.`user_group_id` in (23)))) and date(`orders`.`start_time`) = '2025-10-17' and `orders`.`status` in ('DELIVERED', 'PARTIALDELIVERY') group by `clients`.`id`, `start_time` order by `total` asc", "template": "total_sales", "sample_id": 5}
{"prompt": "New customers", "completion": "select clients.id as client_id, clients.company_name as client, DATE(clients.created_at) as date, clients.route_id as route_id, routes.name as route_name from `clients` left join `routes` on `clients`.`route_id` = `routes`.`id` where month(`clients`.`created_at`) = 09 and year(`clients`.`created_at`) = 2025 and `clients`.`deleted_at` is null", "template": "new_clients", "sample_id": 1}
{"prompt": "New Road customers: Final, 2_97279, 5_93460", "completion": "select clients.id as client_id, clients.company_name as client, DATE(clients.created_at) as date, clients.route_id as route_id, routes.name as route_name from `clients` left join `routes` on `clients`.`route_id` = `routes`.`id` where month(`clients`.`created_at`) = 09 and year(`clients`.`created_at`) = 2025 and `route_id` in (52, 84, 87) and `clients`.`deleted_at` is null", "template": "new_clients", "sample_id": 2}
{"prompt": "New customers route: route 1, 1_36284, 0901 (Blida Center)", "completion": "select clients.id as client_id, clients.company_name as client, DATE(clients.created_at) as date, clients.route_id as route_id, routes.name as route_name from `clients` left join `routes` on `clients`.`route_id` = `routes`.`id` where month(`clients`.`created_at`) = 09 and year(`clients`.`created_at`) = 2025 and `route_id` in (144, 1, 110) and `clients`.`deleted_at` is null", "template": "new_clients", "sample_id": 3}
{"prompt": "New Road customers: Final, 1_36284, test route", "completion": "select clients.id as client_id, clients.company_name as client, DATE(clients.created_at) as date, clients.route_id as route_id, routes.name as route_name from `clients` left join `routes` on `clients`.`route_id` = `routes`.`id` where month(`clients`.`created_at`) = 09 and year(`clients`.`created_at`) = 2025 and `route_id` in (52, 110, 139) and `clients`.`deleted_at` is null", "template": "new_clients", "sample_id": 4}
{"prompt": "New customers", "completion": "select clients.id as client_id, clients.company_name as client, DATE(clients.created_at) as date, clients.route_id as route_id, routes.name as route_name from `clients` left join `routes` on `clients`.`route_id` = `routes`.`id` where month(`clients`.`created_at`) = 09 and year(`clients`.`created_at`) = 2025 and `clients`.`deleted_at` is null", "template": "new_clients", "sample_id": 5}
{"prompt": "The most profitable customers", "completion": "select clients.id as client_id, MIN(clients.company_name) as client, SUM(orders.delivered_total) as total, MIN(DATE(orders.start_time)) as start_time from `orders` inner join `clients` on `orders`.`client_id` = `clients`.`id` where exists (select * from `clients` where `orders`.`client_id` = `clients`.`id` and (((`clients`.`villes_id` in (5) and (`clients`.`route_id` is null or `clients`.`route_id` in (133))) or `clients`.`route_id` in (133)) or (`clients`.`user_group_id` in (23)))) and `orders`.`status` in ('DELIVERED', 'PARTIALDELIVERY') group by `clients`.`id` order by `total` desc limit 10", "template": "top_clients_sales", "sample_id": 1}
{"prompt": "The most profitable customers", "completion": "select clients.id as client_id, MIN(clients.company_name) as client, SUM(orders.delivered_total) as total, MIN(DATE(orders.start_time)) as start_time from `orders` inner join `clients` on `orders`.`client_id` = `clients`.`id` where exists (select * from `clients` where `orders`.`client_id` = `clients`.`id` and (((`clients`.`villes_id` in (5) and (`clients`.`route_id` is null or `clients`.`route_id` in (133))) or `clients`.`route_id` in (133)) or (`clients`.`user_group_id` in (23)))) and `orders`.`status` in ('DELIVERED', 'PARTIALDELIVERY') group by `clients`.`id` order by `total` desc limit 10", "template": "top_clients_sales", "sample_id": 2}
{"prompt": "The most profitable customers", "completion": "select clients.id as client_id, MIN(clients.company_name) as client, SUM(orders.delivered_total) as total, MIN(DATE(orders.start_time)) as start_time from `orders` inner join `clients` on `orders`.`client_id` = `clients`.`id` where exists (select * from `clients` where `orders`.`client_id` = `clients`.`id` and (((`clients`.`villes_id` in (5) and (`clients`.`route_id` is null or `clients`.`route_id` in (133))) or `clients`.`route_id` in (133)) or (`clients`.`user_group_id` in (23)))) and `orders`.`status` in ('DELIVERED', 'PARTIALDELIVERY') group by `clients`.`id` order by `total` desc limit 10", "template": "top_clients_sales", "sample_id": 3}
{"prompt": "The most profitable customers Order date: 15/09/2025", "completion": "select clients.id as client_id, MIN(clients.company_name) as client, SUM(orders.delivered_total) as total, MIN(DATE(orders.start_time)) as start_time from `orders` inner join `clients` on `orders`.`client_id` = `clients`.`id` where exists (select * from `clients` where `orders`.`client_id` = `clients`.`id` and (((`clients`.`villes_id` in (5) and (`clients`.`route_id` is null or `clients`.`route_id` in (133))) or `clients`.`route_id` in (133)) or (`clients`.`user_group_id` in (23)))) and `orders`.`status` in ('DELIVERED', 'PARTIALDELIVERY') and date(`start_time`) <= '2025-09-15' group by `clients`.`id` order by `total` desc limit 10", "template": "top_clients_sales", "sample_id": 4}
{"prompt": "The most profitable customers", "completion": "select clients.id as client_id, MIN(clients.company_name) as client, SUM(orders.delivered_total) as total, MIN(DATE(orders.start_time)) as start_time from `orders` inner join `clients` on `orders`.`client_id` = `clients`.`id` where exists (select * from `clients` where `orders`.`client_id` = `clients`.`id` and (((`clients`.`villes_id` in (5) and (`clients`.`route_id` is null or `clients`.`route_id` in (133))) or `clients`.`route_id` in (133)) or (`clients`.`user_group_id` in (23)))) and `orders`.`status` in ('DELIVERED', 'PARTIALDELIVERY') group by `clients`.`id` order by `total` desc limit 10", "template": "top_clients_sales", "sample_id": 5}
{"prompt": "The most profitable products", "completion": "select products.id as product_id, MIN(products.name) as product, SUM(order_product.total_delivered_price) as total from `orders` inner join `order_product` on `order_product`.`order_id` = `orders`.`id` inner join `products` on `order_product`.`product_id` = `products`.`id` where exists (select * from `clients` where `orders`.`client_id` = `clients`.`id` and (((`clients`.`villes_id` in (5) and (`clients`.`route_id` is null or `clients`.`route_id` in (133))) or `clients`.`route_id` in (133)) or (`clients`.`user_group_id` in (23)))) and `orders`.`status` in ('DELIVERED', 'PARTIALDELIVERY') group by `products`.`id` order by `total` desc limit 10", "template": "top_products_sales", "sample_id": 1}
{"prompt": "The most profitable products Delivery date: 10/09/2025", "completion": "select products.id as product_id, MIN(products.name) as product, SUM(order_product.total_delivered_price) as total from `orders` inner join `order_product` on `order_product`.`order_id` = `orders`.`id` inner join `products` on `order_product`.`product_id` = `products`.`id` where exists (select * from `clients` where `orders`.`client_id` = `clients`.`id` and (((`clients`.`villes_id` in (5) and (`clients`.`route_id` is null or `clients`.`route_id` in (133))) or `clients`.`route_id` in (133)) or (`clients`.`user_group_id` in (23)))) and `orders`.`status` in ('DELIVERED', 'PARTIALDELIVERY') and date(`delivery_time`) <= '2025-09-10' group by `products`.`id` order by `total` desc limit 10", "template": "top_products_sales", "sample_id": 2}
{"prompt": "The most profitable products Delivery date: 16/10/2025", "completion": "select products.id as product_id, MIN(products.name) as product, SUM(order_product.total_delivered_price) as total from `orders` inner join `order_product` on `order_product`.`order_id` = `orders`.`id` inner join `products` on `order_product`.`product_id` = `products`.`id` where exists (select * from `clients` where `orders`.`client_id` = `clients`.`id` and (((`clients`.`villes_id` in (5) and (`clients`.`route_id` is null or `clients`.`route_id` in (133))) or `clients`.`route_id` in (133)) or (`clients`.`user_group_id` in (23)))) and `orders`.`status` in ('DELIVERED', 'PARTIALDELIVERY') and date(`delivery_time`) <= '2025-10-16' group by `products`.`id` order by `total` desc limit 10", "template": "top_products_sales", "sample_id": 3}
{"prompt": "The most profitable products Delivery date: 09/10/2025", "completion": "select products.id as product_id, MIN(products.name) as product, SUM(order_product.total_delivered_price) as total from `orders` inner join `order_product` on `order_product`.`order_id` = `orders`.`id` inner join `products` on `order_product`.`product_id` = `products`.`id` where exists (select * from `clients` where `orders`.`client_id` = `clients`.`id` and (((`clients`.`villes_id` in (5) and (`clients`.`route_id` is null or `clients`.`route_id` in (133))) or `clients`.`route_id` in (133)) or (`clients`.`user_group_id` in (23)))) and `orders`.`status` in ('DELIVERED', 'PARTIALDELIVERY') and date(`delivery_time`) = '2025-10-09' group by `products`.`id` order by `total` desc limit 10", "template": "top_products_sales", "sample_id": 4}
{"prompt": "The most profitable products Delivery date: 04/09/2025 to 08/09/2025", "completion": "select products.id as product_id, MIN(products.name) as product, SUM(order_product.total_delivered_price) as total from `orders` inner join `order_product` on `order_product`.`order_id` = `orders`.`id` inner join `products` on `order_product`.`product_id` = `products`.`id` where exists (select * from `clients` where `orders`.`client_id` = `clients`.`id` and (((`clients`.`villes_id` in (5) and (`clients`.`route_id` is null or `clients`.`route_id` in (133))) or `clients`.`route_id` in (133)) or (`clients`.`user_group_id` in (23)))) and `orders`.`status` in ('DELIVERED', 'PARTIALDELIVERY') and `delivery_time` between '2025-09-04 00:00:00' and '2025-09-08 23:59:59' group by `products`.`id` order by `total` desc limit 10", "template": "top_products_sales", "sample_id": 5}
{"prompt": "Sales by delegates", "completion": "select MIN(employees.name) as employee, orders.employee_id as employee_id, SUM(orders.delivered_total) as delivered_total, COUNT(orders.creation_id) as nb_orders, DATE(orders.start_time) as date from `orders` inner join `employees` on `orders`.`employee_id` = `employees`.`id` where exists (select * from `clients` where `orders`.`client_id` = `clients`.`id` and (((`clients`.`villes_id` in (5) and (`clients`.`route_id` is null or `clients`.`route_id` in (133))) or `clients`.`route_id` in (133)) or (`clients`.`user_group_id` in (23)))) and `orders`.`status` in ('DELIVERED', 'PARTIALDELIVERY') group by `orders`.`employee_id`, `date` order by `delivered_total` desc", "template": "employees_sales", "sample_id": 1}
{"prompt": "Sales by delegate delegates: Order date: 31/08/2025 to 01/09/2025", "completion": "select MIN(employees.name) as employee, orders.employee_id as employee_id, SUM(orders.delivered_total) as delivered_total, COUNT(orders.creation_id) as nb_orders, DATE(orders.start_time) as date from `orders` inner join `employees` on `orders`.`employee_id` = `employees`.`id` where exists (select * from `clients` where `orders`.`client_id` = `clients`.`id` and (((`clients`.`villes_id` in (5) and (`clients`.`route_id` is null or `clients`.`route_id` in (133))) or `clients`.`route_id` in (133)) or (`clients`.`user_group_id` in (23)))) and `orders`.`status` in ('DELIVERED', 'PARTIALDELIVERY') and 0 = 1 group by `orders`.`employee_id`, `date` having date BETWEEN '2025-08-31 00:00:00' AND '2025-09-01 23:59:59' order by `delivered_total` desc", "template": "employees_sales", "sample_id": 2}
{"prompt": "Sales by delegate delegates: Order date: 30/08/2025 to 11/09/2025", "completion": "select MIN(employees.name) as employee, orders.employee_id as employee_id, SUM(orders.delivered_total) as delivered_total, COUNT(orders.creation_id) as nb_orders, DATE(orders.start_time) as date from `orders` inner join `employees` on `orders`.`employee_id` = `employees`.`id` where exists (select * from `clients` where `orders`.`client_id` = `clients`.`id` and (((`clients`.`villes_id` in (5) and (`clients`.`route_id` is null or `clients`.`route_id` in (133))) or `clients`.`route_id` in (133)) or (`clients`.`user_group_id` in (23)))) and `orders`.`status` in ('DELIVERED', 'PARTIALDELIVERY') and 0 = 1 group by `orders`.`employee_id`, `date` having date BETWEEN '2025-08-30 00:00:00' AND '2025-09-11 23:59:59' order by `delivered_total` desc", "template": "employees_sales", "sample_id": 3}
{"prompt": "Sales by delegate delegates: Order date: 05/09/2025", "completion": "select MIN(employees.name) as employee, orders.employee_id as employee_id, SUM(orders.delivered_total) as delivered_total, COUNT(orders.creation_id) as nb_orders, DATE(orders.start_time) as date from `orders` inner join `employees` on `orders`.`employee_id` = `employees`.`id` where exists (select * from `clients` where `orders`.`client_id` = `clients`.`id` and (((`clients`.`villes_id` in (5) and (`clients`.`route_id` is null or `clients`.`route_id` in (133))) or `clients`.`route_id` in (133)) or (`clients`.`user_group_id` in (23)))) and `orders`.`status` in ('DELIVERED', 'PARTIALDELIVERY') and 0 = 1 group by `orders`.`employee_id`, `date` having date <= '2025-09-05 00:00:00' order by `delivered_total` desc", "template": "employees_sales", "sample_id": 4}
{"prompt": "Sales by delegated delegates:", "completion": "select MIN(employees.name) as employee, orders.employee_id as employee_id, SUM(orders.delivered_total) as delivered_total, COUNT(orders.creation_id) as nb_orders, DATE(orders.start_time) as date from `orders` inner join `employees` on `orders`.`employee_id` = `employees`.`id` where exists (select * from `clients` where `orders`.`client_id` = `clients`.`id` and (((`clients`.`villes_id` in (5) and (`clients`.`route_id` is null or `clients`.`route_id` in (133))) or `clients`.`route_id` in (133)) or (`clients`.`user_group_id` in (23)))) and `orders`.`status` in ('DELIVERED', 'PARTIALDELIVERY') and 0 = 1 group by `orders`.`employee_id`, `date` order by `delivered_total` desc", "template": "employees_sales", "sample_id": 5}
{"prompt": "Sales by each road", "completion": "select MIN(routes.name) as route_name, routes.id as route_id, COUNT(clients.id) as nb_client, SUM(orders.delivered_total) as total, COUNT(orders.id) as nb_orders from `orders` inner join `clients` on `orders`.`client_id` = `clients`.`id` inner join `routes` on `clients`.`route_id` = `routes`.`id` where exists (select * from `clients` where `orders`.`client_id` = `clients`.`id` and (((`clients`.`villes_id` in (5) and (`clients`.`route_id` is null or `clients`.`route_id` in (133))) or `clients`.`route_id` in (133)) or (`clients`.`user_group_id` in (23)))) and `orders`.`status` in ('DELIVERED', 'PARTIALDELIVERY') group by `routes`.`id` order by `total` desc", "template": "routes_sales", "sample_id": 1}
{"prompt": "Sales by each road road: Route-Sb-Mont D-Or, 9_35819", "completion": "select MIN(routes.name) as route_name, routes.id as route_id, COUNT(clients.id) as nb_client, SUM(orders.delivered_total) as total, COUNT(orders.id) as nb_orders from `orders` inner join `clients` on `orders`.`client_id` = `clients`.`id` inner join `routes` on `clients`.`route_id` = `routes`.`id` where exists (select * from `clients` where `orders`.`client_id` = `clients`.`id` and (((`clients`.`villes_id` in (5) and (`clients`.`route_id` is null or `clients`.`route_id` in (133))) or `clients`.`route_id` in (133)) or (`clients`.`user_group_id` in (23)))) and `orders`.`status` in ('DELIVERED', 'PARTIALDELIVERY') and `route_id` in (37, 91) group by `routes`.`id` order by `total` desc", "template": "routes_sales", "sample_id": 2}
{"prompt": "Sales by each road road: FD, 1_48099, 0903 (Blida Center Est)", "completion": "select MIN(routes.name) as route_name, routes.id as route_id, COUNT(clients.id) as nb_client, SUM(orders.delivered_total) as total, COUNT(orders.id) as nb_orders from `orders` inner join `clients` on `orders`.`client_id` = `clients`.`id` inner join `routes` on `clients`.`route_id` = `routes`.`id` where exists (select * from `clients` where `orders`.`client_id` = `clients`.`id` and (((`clients`.`villes_id` in (5) and (`clients`.`route_id` is null or `clients`.`route_id` in (133))) or `clients`.`route_id` in (133)) or (`clients`.`user_group_id` in (23)))) and `orders`.`status` in ('DELIVERED', 'PARTIALDELIVERY') and `route_id` in (59, 83, 146) group by `routes`.`id` order by `total` desc", "template": "routes_sales", "sample_id": 3}
{"prompt": "Sales by each road road: Final, 8_13432, 29xx", "completion": "select MIN(routes.name) as route_name, routes.id as route_id, COUNT(clients.id) as nb_client, SUM(orders.delivered_total) as total, COUNT(orders.id) as nb_orders from `orders` inner join `clients` on `orders`.`client_id` = `clients`.`id` inner join `routes` on `clients`.`route_id` = `routes`.`id` where exists (select * from `clients` where `orders`.`client_id` = `clients`.`id` and (((`clients`.`villes_id` in (5) and (`clients`.`route_id` is null or `clients`.`route_id` in (133))) or `clients`.`route_id` in (133)) or (`clients`.`user_group_id` in (23)))) and `orders`.`status` in ('DELIVERED', 'PARTIALDELIVERY') and `route_id` in (90, 137, 49) group by `routes`.`id` order by `total` desc", "template": "routes_sales", "sample_id": 4}
{"prompt": "Sales by each road road: Final, FD", "completion": "select MIN(routes.name) as route_name, routes.id as route_id, COUNT(clients.id) as nb_client, SUM(orders.delivered_total) as total, COUNT(orders.id) as nb_orders from `orders` inner join `clients` on `orders`.`client_id` = `clients`.`id` inner join `routes` on `clients`.`route_id` = `routes`.`id` where exists (select * from `clients` where `orders`.`client_id` = `clients`.`id` and (((`clients`.`villes_id` in (5) and (`clients`.`route_id` is null or `clients`.`route_id` in (133))) or `clients`.`route_id` in (133)) or (`clients`.`user_group_id` in (23)))) and `orders`.`status` in ('DELIVERED', 'PARTIALDELIVERY') and `route_id` in (51, 58) group by `routes`.`id` order by `total` desc", "template": "routes_sales", "sample_id": 5}
{"prompt": "Stock levels for each product", "completion": "select MIN(products.name) as product_name, MIN(products.has_display_unit) as agg_has_display_unit, MIN(products.display_unit_name) as agg_display_unit_name, MIN(products.display_unit_scale) as agg_display_unit_scale, products.id as product_id, SUM(stock_global_levels.real_quantity) as quantity from `stock_global_levels` inner join `products` on `stock_global_levels`.`product_id` = `products`.`id` group by `products`.`id` order by `quantity` desc", "template": "products_stock_level", "sample_id": 1}
{"prompt": "Stock levels for each product product: RM JB Noodle Vegetables 40 Vita 70gr DZ 1/2 Carton, PLV Parasite Noodles 3 Saveurs", "completion": "select MIN(products.name) as product_name, MIN(products.has_display_unit) as agg_has_display_unit, MIN(products.display_unit_name) as agg_display_unit_name, MIN(products.display_unit_scale) as agg_display_unit_scale, products.id as product_id, SUM(stock_global_levels.real_quantity) as quantity from `stock_global_levels` inner join `products` on `stock_global_levels`.`product_id` = `products`.`id` where `product_id` in (104, 42) group by `products`.`id` order by `quantity` desc", "template": "products_stock_level", "sample_id": 2}
{"prompt": "Stock levels for each product", "completion": "select MIN(products.name) as product_name, MIN(products.has_display_unit) as agg_has_display_unit, MIN(products.display_unit_name) as agg_display_unit_name, MIN(products.display_unit_scale) as agg_display_unit_scale, products.id as product_id, SUM(stock_global_levels.real_quantity) as quantity from `stock_global_levels` inner join `products` on `stock_global_levels`.`product_id` = `products`.`id` group by `products`.`id` order by `quantity` desc", "template": "products_stock_level", "sample_id": 3}
{"prompt": "Stock levels for each product", "completion": "select MIN(products.name) as product_name, MIN(products.has_display_unit) as agg_has_display_unit, MIN(products.display_unit_name) as agg_display_unit_name, MIN(products.display_unit_scale) as agg_display_unit_scale, products.id as product_id, SUM(stock_global_levels.real_quantity) as quantity from `stock_global_levels` inner join `products` on `stock_global_levels`.`product_id` = `products`.`id` group by `products`.`id` order by `quantity` desc", "template": "products_stock_level", "sample_id": 4}
{"prompt": "Stock levels for each product product: dry soups soups fish 58g, end 1kg couscous", "completion": "select MIN(products.name) as product_name, MIN(products.has_display_unit) as agg_has_display_unit, MIN(products.display_unit_name) as agg_display_unit_name, MIN(products.display_unit_scale) as agg_display_unit_scale, products.id as product_id, SUM(stock_global_levels.real_quantity) as quantity from `stock_global_levels` inner join `products` on `stock_global_levels`.`product_id` = `products`.`id` where `product_id` in (110, 4) group by `products`.`id` order by `quantity` desc", "template": "products_stock_level", "sample_id": 5}
{"prompt": "The number of orders for each channel", "completion": "select `client_canals_lang`.`client_canal_id` as `client_canal_id`, `client_canals_lang`.`name` as `canal`, `sub_query`.`nb_orders` as `nb_orders` from `client_canals_lang` inner join (select client_canals.id as id, COUNT(orders.creation_id) as nb_orders from `orders` inner join `clients` on `orders`.`client_id` = `clients`.`id` inner join `clients_details` on `clients`.`id` = `clients_details`.`client_id` inner join `client_canals` on `clients_details`.`client_canal_id` = `client_canals`.`id` where exists (select * from `clients` where `orders`.`client_id` = `clients`.`id` and (((`clients`.`villes_id` in (5) and (`clients`.`route_id` is null or `clients`.`route_id` in (133))) or `clients`.`route_id` in (133)) or (`clients`.`user_group_id` in (23)))) and `orders`.`status` in ('DELIVERED', 'PARTIALDELIVERY') group by `client_canals`.`id`) as `sub_query` on `client_canals_lang`.`client_canal_id` = `sub_query`.`id` and `lang` = 'EN'", "template": "canals_orders", "sample_id": 1}
{"prompt": "The number of orders for each channel channel: retail, sale in detail, CSP", "completion": "select `client_canals_lang`.`client_canal_id` as `client_canal_id`, `client_canals_lang`.`name` as `canal`, `sub_query`.`nb_orders` as `nb_orders` from `client_canals_lang` inner join (select client_canals.id as id, COUNT(orders.creation_id) as nb_orders from `orders` inner join `clients` on `orders`.`client_id` = `clients`.`id` inner join `clients_details` on `clients`.`id` = `clients_details`.`client_id` inner join `client_canals` on `clients_details`.`client_canal_id` = `client_canals`.`id` where exists (select * from `clients` where `orders`.`client_id` = `clients`.`id` and (((`clients`.`villes_id` in (5) and (`clients`.`route_id` is null or `clients`.`route_id` in (133))) or `clients`.`route_id` in (133)) or (`clients`.`user_group_id` in (23)))) and `orders`.`status` in ('DELIVERED', 'PARTIALDELIVERY') group by `client_canals`.`id`) as `sub_query` on `client_canals_lang`.`client_canal_id` = `sub_query`.`id` and `lang` = 'EN' where `client_canal_id` in (6, 1, 5)", "template": "canals_orders", "sample_id": 2}
{"prompt": "The number of orders for each channel", "completion": "select `client_canals_lang`.`client_canal_id` as `client_canal_id`, `client_canals_lang`.`name` as `canal`, `sub_query`.`nb_orders` as `nb_orders` from `client_canals_lang` inner join (select client_canals.id as id, COUNT(orders.creation_id) as nb_orders from `orders` inner join `clients` on `orders`.`client_id` = `clients`.`id` inner join `clients_details` on `clients`.`id` = `clients_details`.`client_id` inner join `client_canals` on `clients_details`.`client_canal_id` = `client_canals`.`id` where exists (select * from `clients` where `orders`.`client_id` = `clients`.`id` and (((`clients`.`villes_id` in (5) and (`clients`.`route_id` is null or `clients`.`route_id` in (133))) or `clients`.`route_id` in (133)) or (`clients`.`user_group_id` in (23)))) and `orders`.`status` in ('DELIVERED', 'PARTIALDELIVERY') group by `client_canals`.`id`) as `sub_query` on `client_canals_lang`.`client_canal_id` = `sub_query`.`id` and `lang` = 'EN'", "template": "canals_orders", "sample_id": 3}
{"prompt": "The number of orders for each canal channel: Others Grocery", "completion": "select `client_canals_lang`.`client_canal_id` as `client_canal_id`, `client_canals_lang`.`name` as `canal`, `sub_query`.`nb_orders` as `nb_orders` from `client_canals_lang` inner join (select client_canals.id as id, COUNT(orders.creation_id) as nb_orders from `orders` inner join `clients` on `orders`.`client_id` = `clients`.`id` inner join `clients_details` on `clients`.`id` = `clients_details`.`client_id` inner join `client_canals` on `clients_details`.`client_canal_id` = `client_canals`.`id` where exists (select * from `clients` where `orders`.`client_id` = `clients`.`id` and (((`clients`.`villes_id` in (5) and (`clients`.`route_id` is null or `clients`.`route_id` in (133))) or `clients`.`route_id` in (133)) or (`clients`.`user_group_id` in (23)))) and `orders`.`status` in ('DELIVERED', 'PARTIALDELIVERY') group by `client_canals`.`id`) as `sub_query` on `client_canals_lang`.`client_canal_id` = `sub_query`.`id` and `lang` = 'EN' where `client_canal_id` in (9)", "template": "canals_orders", "sample_id": 4}
{"prompt": "The number of orders for each channel", "completion": "select `client_canals_lang`.`client_canal_id` as `client_canal_id`, `client_canals_lang`.`name` as `canal`, `sub_query`.`nb_orders` as `nb_orders` from `client_canals_lang` inner join (select client_canals.id as id, COUNT(orders.creation_id) as nb_orders from `orders` inner join `clients` on `orders`.`client_id` = `clients`.`id` inner join `clients_details` on `clients`.`id` = `clients_details`.`client_id` inner join `client_canals` on `clients_details`.`client_canal_id` = `client_canals`.`id` where exists (select * from `clients` where `orders`.`client_id` = `clients`.`id` and (((`clients`.`villes_id` in (5) and (`clients`.`route_id` is null or `clients`.`route_id` in (133))) or `clients`.`route_id` in (133)) or (`clients`.`user_group_id` in (23)))) and `orders`.`status` in ('DELIVERED', 'PARTIALDELIVERY') group by `client_canals`.`id`) as `sub_query` on `client_canals_lang`.`client_canal_id` = `sub_query`.`id` and `lang` = 'EN'", "template": "canals_orders", "sample_id": 5}
{"prompt": "The reasons for product returns", "completion": "select `dynamic_enums`.`code` as `reason`, `sub_query`.`return_id` as `return_id`, `sub_query`.`product` as `product_name`, `sub_query`.`product_id` as `pr_id` from `dynamic_enums` inner join (select client_return_products.reason as reason, client_returns.creation_id as return_id, products.name as product, products.id as product_id from `client_returns` inner join `client_return_products` on `client_returns`.`id` = `client_return_products`.`client_return_id` inner join `products` on `client_return_products`.`product_id` = `products`.`id` where `client_returns`.`status` in ('ACCEPTED', 'ONHOLD')) as `sub_query` on `dynamic_enums`.`id` = `sub_query`.`reason` where `dynamic_enums`.`type` = 'RETURN' and `dynamic_enums`.`deleted_at` is null", "template": "products_returns_reasons", "sample_id": 1}
{"prompt": "The reasons for product returns product: dry soups veloute soups chicken vermicelli 68g, RM JB chicken noodles 40 dz 70g prm 23, RM JB chicken Noodles 120g dz prm 23 1/2 card reason: technical problem", "completion": "select `dynamic_enums`.`code` as `reason`, `sub_query`.`return_id` as `return_id`, `sub_query`.`product` as `product_name`, `sub_query`.`product_id` as `pr_id` from `dynamic_enums` inner join (select client_return_products.reason as reason, client_returns.creation_id as return_id, products.name as product, products.id as product_id from `client_returns` inner join `client_return_products` on `client_returns`.`id` = `client_return_products`.`client_return_id` inner join `products` on `client_return_products`.`product_id` = `products`.`id` where `client_returns`.`status` in ('ACCEPTED', 'ONHOLD')) as `sub_query` on `dynamic_enums`.`id` = `sub_query`.`reason` where `dynamic_enums`.`type` = 'RETURN' and `pr_id` in (9, 65, 67) and `reason` in (20) and `dynamic_enums`.`deleted_at` is null", "template": "products_returns_reasons", "sample_id": 2}
{"prompt": "The reasons for product returns produced: RM RM JB Noodles Curry 40 DZ 70G PRM 23, FLAN Leila Chocolate 12 x 100g, PLV Parasite Noodles 3 Saveurs Reason:", "completion": "select `dynamic_enums`.`code` as `reason`, `sub_query`.`return_id` as `return_id`, `sub_query`.`product` as `product_name`, `sub_query`.`product_id` as `pr_id` from `dynamic_enums` inner join (select client_return_products.reason as reason, client_returns.creation_id as return_id, products.name as product, products.id as product_id from `client_returns` inner join `client_return_products` on `client_returns`.`id` = `client_return_products`.`client_return_id` inner join `products` on `client_return_products`.`product_id` = `products`.`id` where `client_returns`.`status` in ('ACCEPTED', 'ONHOLD')) as `sub_query` on `dynamic_enums`.`id` = `sub_query`.`reason` where `dynamic_enums`.`type` = 'RETURN' and `pr_id` in (75, 104, 60) and `reason` in (20) and `dynamic_enums`.`deleted_at` is null", "template": "products_returns_reasons", "sample_id": 3}
{"prompt": "The reasons for product returns produced: flan leila vanilla 12 x 100g Reason: technical problem", "completion": "select `dynamic_enums`.`code` as `reason`, `sub_query`.`return_id` as `return_id`, `sub_query`.`product` as `product_name`, `sub_query`.`product_id` as `pr_id` from `dynamic_enums` inner join (select client_return_products.reason as reason, client_returns.creation_id as return_id, products.name as product, products.id as product_id from `client_returns` inner join `client_return_products` on `client_returns`.`id` = `client_return_products`.`client_return_id` inner join `products` on `client_return_products`.`product_id` = `products`.`id` where `client_returns`.`status` in ('ACCEPTED', 'ONHOLD')) as `sub_query` on `dynamic_enums`.`id` = `sub_query`.`reason` where `dynamic_enums`.`type` = 'RETURN' and `pr_id` in (76) and `reason` in (20) and `dynamic_enums`.`deleted_at` is null", "template": "products_returns_reasons", "sample_id": 4}
{"prompt": "The reasons for product feedback Reason: technical problem", "completion": "select `dynamic_enums`.`code` as `reason`, `sub_query`.`return_id` as `return_id`, `sub_query`.`product` as `product_name`, `sub_query`.`product_id` as `pr_id` from `dynamic_enums` inner join (select client_return_products.reason as reason, client_returns.creation_id as return_id, products.name as product, products.id as product_id from `client_returns` inner join `client_return_products` on `client_returns`.`id` = `client_return_products`.`client_return_id` inner join `products` on `client_return_products`.`product_id` = `products`.`id` where `client_returns`.`status` in ('ACCEPTED', 'ONHOLD')) as `sub_query` on `dynamic_enums`.`id` = `sub_query`.`reason` where `dynamic_enums`.`type` = 'RETURN' and `reason` in (20) and `dynamic_enums`.`deleted_at` is null", "template": "products_returns_reasons", "sample_id": 5}
{"prompt": "The reasons for the canceled visits", "completion": "select dynamic_enums.code as reason_code, sub_query.reason as id, sub_query.client as client_name, sub_query.client_id as id_client, sub_query.employee_id as employee_id, sub_query.employee as employee_name, sub_query.visit_id as visit from `dynamic_enums` inner join (select client_visits.reason as reason, clients.company_name as client, clients.id as client_id, employees.id as employee_id, employees.name as employee, client_visits.creation_id as visit_id from `client_visits` inner join `clients` on `client_visits`.`client_id` = `clients`.`id` inner join `employees` on `client_visits`.`employee_id` = `employees`.`id` where `client_visits`.`status` = 'CANCELED') as `sub_query` on `dynamic_enums`.`id` = `sub_query`.`reason` where `dynamic_enums`.`type` = 'VISIT' and `dynamic_enums`.`deleted_at` is null", "template": "canceled_visits_reasons", "sample_id": 1}
{"prompt": "The reasons for the canceled visits Delegate: Melanie Manning Reason: Visit for collection, Image test, QR test", "completion": "select dynamic_enums.code as reason_code, sub_query.reason as id, sub_query.client as client_name, sub_query.client_id as id_client, sub_query.employee_id as employee_id, sub_query.employee as employee_name, sub_query.visit_id as visit from `dynamic_enums` inner join (select client_visits.reason as reason, clients.company_name as client, clients.id as client_id, employees.id as employee_id, employees.name as employee, client_visits.creation_id as visit_id from `client_visits` inner join `clients` on `client_visits`.`client_id` = `clients`.`id` inner join `employees` on `client_visits`.`employee_id` = `employees`.`id` where `client_visits`.`status` = 'CANCELED') as `sub_query` on `dynamic_enums`.`id` = `sub_query`.`reason` where `dynamic_enums`.`type` = 'VISIT' and `employee_id` in (34) and `id` in (34, 32, 19) and `dynamic_enums`.`deleted_at` is null", "template": "canceled_visits_reasons", "sample_id": 2}
{"prompt": "The reasons for the canceled visits Reason: non -targeted customer", "completion": "select dynamic_enums.code as reason_code, sub_query.reason as id, sub_query.client as client_name, sub_query.client_id as id_client, sub_query.employee_id as employee_id, sub_query.employee as employee_name, sub_query.visit_id as visit from `dynamic_enums` inner join (select client_visits.reason as reason, clients.company_name as client, clients.id as client_id, employees.id as employee_id, employees.name as employee, client_visits.creation_id as visit_id from `client_visits` inner join `clients` on `client_visits`.`client_id` = `clients`.`id` inner join `employees` on `client_visits`.`employee_id` = `employees`.`id` where `client_visits`.`status` = 'CANCELED') as `sub_query` on `dynamic_enums`.`id` = `sub_query`.`reason` where `dynamic_enums`.`type` = 'VISIT' and `id` in (22) and `dynamic_enums`.`deleted_at` is null", "template": "canceled_visits_reasons", "sample_id": 3}
{"prompt": "The reasons for the canceled visits delegated: SAFWET MOHAMED RE are: closed closed definitively, available stock, duplicted customer", "completion": "select dynamic_enums.code as reason_code, sub_query.reason as id, sub_query.client as client_name, sub_query.client_id as id_client, sub_query.employee_id as employee_id, sub_query.employee as employee_name, sub_query.visit_id as visit from `dynamic_enums` inner join (select client_visits.reason as reason, clients.company_name as client, clients.id as client_id, employees.id as employee_id, employees.name as employee, client_visits.creation_id as visit_id from `client_visits` inner join `clients` on `client_visits`.`client_id` = `clients`.`id` inner join `employees` on `client_visits`.`employee_id` = `employees`.`id` where `client_visits`.`status` = 'CANCELED') as `sub_query` on `dynamic_enums`.`id` = `sub_query`.`reason` where `dynamic_enums`.`type` = 'VISIT' and `employee_id` in (2) and `id` in (24, 25, 21) and `dynamic_enums`.`deleted_at` is null", "template": "canceled_visits_reasons", "sample_id": 4}
{"prompt": "The reasons for the canceled visits Reason: closed customer, delay/technical problem, no money", "completion": "select dynamic_enums.code as reason_code, sub_query.reason as id, sub_query.client as client_name, sub_query.client_id as id_client, sub_query.employee_id as employee_id, sub_query.employee as employee_name, sub_query.visit_id as visit from `dynamic_enums` inner join (select client_visits.reason as reason, clients.company_name as client, clients.id as client_id, employees.id as employee_id, employees.name as employee, client_visits.creation_id as visit_id from `client_visits` inner join `clients` on `client_visits`.`client_id` = `clients`.`id` inner join `employees` on `client_visits`.`employee_id` = `employees`.`id` where `client_visits`.`status` = 'CANCELED') as `sub_query` on `dynamic_enums`.`id` = `sub_query`.`reason` where `dynamic_enums`.`type` = 'VISIT' and `id` in (17, 18, 14) and `dynamic_enums`.`deleted_at` is null", "template": "canceled_visits_reasons", "sample_id": 5}
{"prompt": "Details of promotions", "completion": "select * from `promos`", "template": "promotions_details", "sample_id": 1}
{"prompt": "Detailing promotions Promotion: State test: Draft", "completion": "select * from `promos` where `id` in (182) and `status` in ('DRAFT')", "template": "promotions_details", "sample_id": 2}
{"prompt": "Detailing promotions promotion: QSDQSD, New Promo test, TAG CONDITIONS PROMO", "completion": "select * from `promos` where `id` in (93, 148, 158)", "template": "promotions_details", "sample_id": 3}
{"prompt": "Detailing promotions promotion: QSDQSD, New Promo test, State test: DRAFT, IN PROCESS, archive", "completion": "select * from `promos` where `id` in (182, 145, 92) and `status` in ('INPROGRESS', 'ARCHIVED', 'DRAFT')", "template": "promotions_details", "sample_id": 4}
{"prompt": "Details of promotions promotion: promo with repetition, qsdqsdqs State: in process", "completion": "select * from `promos` where `id` in (63, 95) and `status` in ('INPROGRESS')", "template": "promotions_details", "sample_id": 5}
{"prompt": "Sales by activity trial", "completion": "select `business_type_lang`.`name` as `name`, `sub_query`.`business_type` as `business_type_id`, `sub_query`.`total` as `total`, `sub_query`.`nb_orders` as `nb_orders` from `business_type_lang` inner join (select business_type.id as business_type, SUM(orders.delivered_total) as total, COUNT(orders.creation_id) as nb_orders from `orders` inner join `clients_details` on `orders`.`client_id` = `clients_details`.`client_id` inner join `business_type` on `clients_details`.`business_type_id` = `business_type`.`id` where exists (select * from `clients` where `orders`.`client_id` = `clients`.`id` and (((`clients`.`villes_id` in (5) and (`clients`.`route_id` is null or `clients`.`route_id` in (133))) or `clients`.`route_id` in (133)) or (`clients`.`user_group_id` in (23)))) group by `business_type` order by `total` asc) as `sub_query` on `business_type_lang`.`business_type_id` = `sub_query`.`business_type` and `lang` = 'EN'", "template": "activity_sectors_sales", "sample_id": 1}
{"prompt": "Sales by activity trial", "completion": "select `business_type_lang`.`name` as `name`, `sub_query`.`business_type` as `business_type_id`, `sub_query`.`total` as `total`, `sub_query`.`nb_orders` as `nb_orders` from `business_type_lang` inner join (select business_type.id as business_type, SUM(orders.delivered_total) as total, COUNT(orders.creation_id) as nb_orders from `orders` inner join `clients_details` on `orders`.`client_id` = `clients_details`.`client_id` inner join `business_type` on `clients_details`.`business_type_id` = `business_type`.`id` where exists (select * from `clients` where `orders`.`client_id` = `clients`.`id` and (((`clients`.`villes_id` in (5) and (`clients`.`route_id` is null or `clients`.`route_id` in (133))) or `clients`.`route_id` in (133)) or (`clients`.`user_group_id` in (23)))) group by `business_type` order by `total` asc) as `sub_query` on `business_type_lang`.`business_type_id` = `sub_query`.`business_type` and `lang` = 'EN'", "template": "activity_sectors_sales", "sample_id": 2}
{"prompt": "Sales by activity trial", "completion": "select `business_type_lang`.`name` as `name`, `sub_query`.`business_type` as `business_type_id`, `sub_query`.`total` as `total`, `sub_query`.`nb_orders` as `nb_orders` from `business_type_lang` inner join (select business_type.id as business_type, SUM(orders.delivered_total) as total, COUNT(orders.creation_id) as nb_orders from `orders` inner join `clients_details` on `orders`.`client_id` = `clients_details`.`client_id` inner join `business_type` on `clients_details`.`business_type_id` = `business_type`.`id` where exists (select * from `clients` where `orders`.`client_id` = `clients`.`id` and (((`clients`.`villes_id` in (5) and (`clients`.`route_id` is null or `clients`.`route_id` in (133))) or `clients`.`route_id` in (133)) or (`clients`.`user_group_id` in (23)))) group by `business_type` order by `total` asc) as `sub_query` on `business_type_lang`.`business_type_id` = `sub_query`.`business_type` and `lang` = 'EN'", "template": "activity_sectors_sales", "sample_id": 3}
{"prompt": "Sales by activity sector of activity: wholesalers, hotel, kms", "completion": "select `business_type_lang`.`name` as `name`, `sub_query`.`business_type` as `business_type_id`, `sub_query`.`total` as `total`, `sub_query`.`nb_orders` as `nb_orders` from `business_type_lang` inner join (select business_type.id as business_type, SUM(orders.delivered_total) as total, COUNT(orders.creation_id) as nb_orders from `orders` inner join `clients_details` on `orders`.`client_id` = `clients_details`.`client_id` inner join `business_type` on `clients_details`.`business_type_id` = `business_type`.`id` where exists (select * from `clients` where `orders`.`client_id` = `clients`.`id` and (((`clients`.`villes_id` in (5) and (`clients`.`route_id` is null or `clients`.`route_id` in (133))) or `clients`.`route_id` in (133)) or (`clients`.`user_group_id` in (23)))) group by `business_type` order by `total` asc) as `sub_query` on `business_type_lang`.`business_type_id` = `sub_query`.`business_type` and `lang` = 'EN' where `business_type_id` in (13, 27, 15)", "template": "activity_sectors_sales", "sample_id": 4}
{"prompt": "Sales by activity sessor of activity: supermarket, grocery and olive, wholesalers", "completion": "select `business_type_lang`.`name` as `name`, `sub_query`.`business_type` as `business_type_id`, `sub_query`.`total` as `total`, `sub_query`.`nb_orders` as `nb_orders` from `business_type_lang` inner join (select business_type.id as business_type, SUM(orders.delivered_total) as total, COUNT(orders.creation_id) as nb_orders from `orders` inner join `clients_details` on `orders`.`client_id` = `clients_details`.`client_id` inner join `business_type` on `clients_details`.`business_type_id` = `business_type`.`id` where exists (select * from `clients` where `orders`.`client_id` = `clients`.`id` and (((`clients`.`villes_id` in (5) and (`clients`.`route_id` is null or `clients`.`route_id` in (133))) or `clients`.`route_id` in (133)) or (`clients`.`user_group_id` in (23)))) group by `business_type` order by `total` asc) as `sub_query` on `business_type_lang`.`business_type_id` = `sub_query`.`business_type` and `lang` = 'EN' where `business_type_id` in (13, 10, 1)", "template": "activity_sectors_sales", "sample_id": 5}
{"prompt": "Products out of stock", "completion": "select products.id as id, products.name as product_name, MIN(products.has_display_unit) as agg_has_display_unit, MIN(products.display_unit_name) as agg_display_unit_name, MIN(products.display_unit_scale) as agg_display_unit_scale, stock_global_levels.real_quantity as quantity from `stock_global_levels` inner join `products` on `stock_global_levels`.`product_id` = `products`.`id` where `stock_global_levels`.`real_quantity` <= 0 order by `products`.`id` asc", "template": "out_of_stock_products", "sample_id": 1}
{"prompt": "Products Product Stock Product: Dry Velu Soups Soups Vermicelle 68g, Seasonings Beef 30x7g, Tast Enhancers Bouillon Cube Etuis 13+3 Chicken 16x10g promo", "completion": "select products.id as id, products.name as product_name, MIN(products.has_display_unit) as agg_has_display_unit, MIN(products.display_unit_name) as agg_display_unit_name, MIN(products.display_unit_scale) as agg_display_unit_scale, stock_global_levels.real_quantity as quantity from `stock_global_levels` inner join `products` on `stock_global_levels`.`product_id` = `products`.`id` where `stock_global_levels`.`real_quantity` <= 0 and `id` in (25, 9, 53) order by `products`.`id` asc", "template": "out_of_stock_products", "sample_id": 2}
{"prompt": "Products out of stock", "completion": "select products.id as id, products.name as product_name, MIN(products.has_display_unit) as agg_has_display_unit, MIN(products.display_unit_name) as agg_display_unit_name, MIN(products.display_unit_scale) as agg_display_unit_scale, stock_global_levels.real_quantity as quantity from `stock_global_levels` inner join `products` on `stock_global_levels`.`product_id` = `products`.`id` where `stock_global_levels`.`real_quantity` <= 0 order by `products`.`id` asc", "template": "out_of_stock_products", "sample_id": 3}
{"prompt": "Products Product products: BC JB Chicken 24x16 DZ Ramadan 24, New Display Unit Forced", "completion": "select products.id as id, products.name as product_name, MIN(products.has_display_unit) as agg_has_display_unit, MIN(products.display_unit_name) as agg_display_unit_name, MIN(products.display_unit_scale) as agg_display_unit_scale, stock_global_levels.real_quantity as quantity from `stock_global_levels` inner join `products` on `stock_global_levels`.`product_id` = `products`.`id` where `stock_global_levels`.`real_quantity` <= 0 and `id` in (68, 78) order by `products`.`id` asc", "template": "out_of_stock_products", "sample_id": 4}
{"prompt": "Products products Product stock: BC JB MUTTON 24x8 PRM RAMADAN 23 DZ, CB JB Chicken 48x24 PRM DZ (Mini Display), TAST Enhancers Food Service Product Chicken 1kg", "completion": "select products.id as id, products.name as product_name, MIN(products.has_display_unit) as agg_has_display_unit, MIN(products.display_unit_name) as agg_display_unit_name, MIN(products.display_unit_scale) as agg_display_unit_scale, stock_global_levels.real_quantity as quantity from `stock_global_levels` inner join `products` on `stock_global_levels`.`product_id` = `products`.`id` where `stock_global_levels`.`real_quantity` <= 0 and `id` in (34, 17, 88) order by `products`.`id` asc", "template": "out_of_stock_products", "sample_id": 5}
{"prompt": "Stock levels per warehouse", "completion": "select MIN(products.name) as product, MIN(products.has_display_unit) as agg_has_display_unit, MIN(products.display_unit_name) as agg_display_unit_name, MIN(products.display_unit_scale) as agg_display_unit_scale, MIN(warehouses.name) as warehouse, products.id as product_id, stock_warehouse_levels.warehouse_id as warehouse_id, SUM(stock_warehouse_levels.real_quantity) as quantity from `stock_warehouse_levels` inner join `products` on `stock_warehouse_levels`.`product_id` = `products`.`id` inner join `warehouses` on `stock_warehouse_levels`.`warehouse_id` = `warehouses`.`id` group by `warehouse_id`, `products`.`id` order by `product` asc, `warehouse` asc, `quantity` desc", "template": "warehouses_stock_levels", "sample_id": 1}
{"prompt": "Stock levels by Product warehouse: RM JB Noodle Vegetables 40 DZ 70g PRM 23 Warehouse: E-SBA, E-Chlef", "completion": "select MIN(products.name) as product, MIN(products.has_display_unit) as agg_has_display_unit, MIN(products.display_unit_name) as agg_display_unit_name, MIN(products.display_unit_scale) as agg_display_unit_scale, MIN(warehouses.name) as warehouse, products.id as product_id, stock_warehouse_levels.warehouse_id as warehouse_id, SUM(stock_warehouse_levels.real_quantity) as quantity from `stock_warehouse_levels` inner join `products` on `stock_warehouse_levels`.`product_id` = `products`.`id` inner join `warehouses` on `stock_warehouse_levels`.`warehouse_id` = `warehouses`.`id` where `product_id` in (61) and `warehouse_id` in (1, 5) group by `warehouse_id`, `products`.`id` order by `product` asc, `warehouse` asc, `quantity` desc", "template": "warehouses_stock_levels", "sample_id": 2}
{"prompt": "Stock levels per warehouse produced: cube chicken chicken 16x10g, cube chicken chicken 8x10g, noodles vegetables 70g 1/2 warehouse card: e-sba, e-chlef", "completion": "select MIN(products.name) as product, MIN(products.has_display_unit) as agg_has_display_unit, MIN(products.display_unit_name) as agg_display_unit_name, MIN(products.display_unit_scale) as agg_display_unit_scale, MIN(warehouses.name) as warehouse, products.id as product_id, stock_warehouse_levels.warehouse_id as warehouse_id, SUM(stock_warehouse_levels.real_quantity) as quantity from `stock_warehouse_levels` inner join `products` on `stock_warehouse_levels`.`product_id` = `products`.`id` inner join `warehouses` on `stock_warehouse_levels`.`warehouse_id` = `warehouses`.`id` where `product_id` in (35, 47, 38) and `warehouse_id` in (5, 1) group by `warehouse_id`, `products`.`id` order by `product` asc, `warehouse` asc, `quantity` desc", "template": "warehouses_stock_levels", "sample_id": 3}
{"prompt": "Stock levels by warehouse warehouse: E-SBA, e-chlef", "completion": "select MIN(products.name) as product, MIN(products.has_display_unit) as agg_has_display_unit, MIN(products.display_unit_name) as agg_display_unit_name, MIN(products.display_unit_scale) as agg_display_unit_scale, MIN(warehouses.name) as warehouse, products.id as product_id, stock_warehouse_levels.warehouse_id as warehouse_id, SUM(stock_warehouse_levels.real_quantity) as quantity from `stock_warehouse_levels` inner join `products` on `stock_warehouse_levels`.`product_id` = `products`.`id` inner join `warehouses` on `stock_warehouse_levels`.`warehouse_id` = `warehouses`.`id` where `warehouse_id` in (1, 5) group by `warehouse_id`, `products`.`id` order by `product` asc, `warehouse` asc, `quantity` desc", "template": "warehouses_stock_levels", "sample_id": 4}
{"prompt": "Stock levels by product warehouse: tomato dct 800g, seasonings sheep 30x7g, cube chicken chicken 8x10g", "completion": "select MIN(products.name) as product, MIN(products.has_display_unit) as agg_has_display_unit, MIN(products.display_unit_name) as agg_display_unit_name, MIN(products.display_unit_scale) as agg_display_unit_scale, MIN(warehouses.name) as warehouse, products.id as product_id, stock_warehouse_levels.warehouse_id as warehouse_id, SUM(stock_warehouse_levels.real_quantity) as quantity from `stock_warehouse_levels` inner join `products` on `stock_warehouse_levels`.`product_id` = `products`.`id` inner join `warehouses` on `stock_warehouse_levels`.`warehouse_id` = `warehouses`.`id` where `product_id` in (38, 11, 26) group by `warehouse_id`, `products`.`id` order by `product` asc, `warehouse` asc, `quantity` desc", "template": "warehouses_stock_levels", "sample_id": 5}
{"prompt": "Inactive customers", "completion": "select COUNT(client_transactions.creation_id) as nb_transactions, clients.id as client_id, MIN(clients.company_name) as client from `client_transactions` inner join `clients` on `client_transactions`.`client_id` = `clients`.`id` where exists (select * from `clients` where `client_transactions`.`client_id` = `clients`.`id` and (((`clients`.`villes_id` in (5) and (`clients`.`route_id` is null or `clients`.`route_id` in (133))) or `clients`.`route_id` in (133)) or (`clients`.`user_group_id` in (23)))) group by `clients`.`id` order by `nb_transactions` asc limit 10", "template": "inactive_clients", "sample_id": 1}
{"prompt": "Inactive customers Number of transactions: 908", "completion": "select COUNT(client_transactions.creation_id) as nb_transactions, clients.id as client_id, MIN(clients.company_name) as client from `client_transactions` inner join `clients` on `client_transactions`.`client_id` = `clients`.`id` where exists (select * from `clients` where `client_transactions`.`client_id` = `clients`.`id` and (((`clients`.`villes_id` in (5) and (`clients`.`route_id` is null or `clients`.`route_id` in (133))) or `clients`.`route_id` in (133)) or (`clients`.`user_group_id` in (23)))) group by `clients`.`id` having `nb_transactions` <= 908 order by `nb_transactions` asc limit 10", "template": "inactive_clients", "sample_id": 2}
{"prompt": "Inactive customers Number of transactions: 773 TB 911", "completion": "select COUNT(client_transactions.creation_id) as nb_transactions, clients.id as client_id, MIN(clients.company_name) as client from `client_transactions` inner join `clients` on `client_transactions`.`client_id` = `clients`.`id` where exists (select * from `clients` where `client_transactions`.`client_id` = `clients`.`id` and (((`clients`.`villes_id` in (5) and (`clients`.`route_id` is null or `clients`.`route_id` in (133))) or `clients`.`route_id` in (133)) or (`clients`.`user_group_id` in (23)))) and `nb_transactions` between 773 and 911 group by `clients`.`id` order by `nb_transactions` asc limit 10", "template": "inactive_clients", "sample_id": 3}
{"prompt": "Inactive customers Number of transactions: 567", "completion": "select COUNT(client_transactions.creation_id) as nb_transactions, clients.id as client_id, MIN(clients.company_name) as client from `client_transactions` inner join `clients` on `client_transactions`.`client_id` = `clients`.`id` where exists (select * from `clients` where `client_transactions`.`client_id` = `clients`.`id` and (((`clients`.`villes_id` in (5) and (`clients`.`route_id` is null or `clients`.`route_id` in (133))) or `clients`.`route_id` in (133)) or (`clients`.`user_group_id` in (23)))) group by `clients`.`id` having `nb_transactions` = 567 order by `nb_transactions` asc limit 10", "template": "inactive_clients", "sample_id": 4}
{"prompt": "Inactive customers Number of transactions: 429 to 699", "completion": "select COUNT(client_transactions.creation_id) as nb_transactions, clients.id as client_id, MIN(clients.company_name) as client from `client_transactions` inner join `clients` on `client_transactions`.`client_id` = `clients`.`id` where exists (select * from `clients` where `client_transactions`.`client_id` = `clients`.`id` and (((`clients`.`villes_id` in (5) and (`clients`.`route_id` is null or `clients`.`route_id` in (133))) or `clients`.`route_id` in (133)) or (`clients`.`user_group_id` in (23)))) and `nb_transactions` between 429 and 699 group by `clients`.`id` order by `nb_transactions` asc limit 10", "template": "inactive_clients", "sample_id": 5}
{"prompt": "The least sold products", "completion": "select products.id as product_id, MIN(products.name) as product, SUM(order_product.total_delivered_price) as d_total from `orders` inner join `order_product` on `order_product`.`order_id` = `orders`.`id` inner join `products` on `order_product`.`product_id` = `products`.`id` where exists (select * from `clients` where `orders`.`client_id` = `clients`.`id` and (((`clients`.`villes_id` in (5) and (`clients`.`route_id` is null or `clients`.`route_id` in (133))) or `clients`.`route_id` in (133)) or (`clients`.`user_group_id` in (23)))) and `orders`.`status` in ('DELIVERED', 'PARTIALDELIVERY') group by `products`.`id` order by `d_total` asc limit 10", "template": "less_products_sales", "sample_id": 1}
{"prompt": "The less sold products produced: half cardboard pullet curry (not Vendable), flan leila strawberry 12 x 100g, noodles cheese 70g 40 DZD Total: 765 to 799", "completion": "select products.id as product_id, MIN(products.name) as product, SUM(order_product.total_delivered_price) as d_total from `orders` inner join `order_product` on `order_product`.`order_id` = `orders`.`id` inner join `products` on `order_product`.`product_id` = `products`.`id` where exists (select * from `clients` where `orders`.`client_id` = `clients`.`id` and (((`clients`.`villes_id` in (5) and (`clients`.`route_id` is null or `clients`.`route_id` in (133))) or `clients`.`route_id` in (133)) or (`clients`.`user_group_id` in (23)))) and `orders`.`status` in ('DELIVERED', 'PARTIALDELIVERY') and `product_id` in (81, 74, 41) and `d_total` between 765 and 799 group by `products`.`id` order by `d_total` asc limit 10", "template": "less_products_sales", "sample_id": 2}
{"prompt": "The least sold products Product: 70g cheese noodles, RM JB Noodles Cheese 40 DZ 70G PRM 23 Total: 560", "completion": "select products.id as product_id, MIN(products.name) as product, SUM(order_product.total_delivered_price) as d_total from `orders` inner join `order_product` on `order_product`.`order_id` = `orders`.`id` inner join `products` on `order_product`.`product_id` = `products`.`id` where exists (select * from `clients` where `orders`.`client_id` = `clients`.`id` and (((`clients`.`villes_id` in (5) and (`clients`.`route_id` is null or `clients`.`route_id` in (133))) or `clients`.`route_id` in (133)) or (`clients`.`user_group_id` in (23)))) and `orders`.`status` in ('DELIVERED', 'PARTIALDELIVERY') and `product_id` in (63, 32) group by `products`.`id` having `d_total` = 560 order by `d_total` asc limit 10", "template": "less_products_sales", "sample_id": 3}
{"prompt": "Total least sold products: 773", "completion": "select products.id as product_id, MIN(products.name) as product, SUM(order_product.total_delivered_price) as d_total from `orders` inner join `order_product` on `order_product`.`order_id` = `orders`.`id` inner join `products` on `order_product`.`product_id` = `products`.`id` where exists (select * from `clients` where `orders`.`client_id` = `clients`.`id` and (((`clients`.`villes_id` in (5) and (`clients`.`route_id` is null or `clients`.`route_id` in (133))) or `clients`.`route_id` in (133)) or (`clients`.`user_group_id` in (23)))) and `orders`.`status` in ('DELIVERED', 'PARTIALDELIVERY') group by `products`.`id` having `d_total` <= 773 order by `d_total` asc limit 10", "template": "less_products_sales", "sample_id": 4}
{"prompt": "The least sold products", "completion": "select products.id as product_id, MIN(products.name) as product, SUM(order_product.total_delivered_price) as d_total from `orders` inner join `order_product` on `order_product`.`order_id` = `orders`.`id` inner join `products` on `order_product`.`product_id` = `products`.`id` where exists (select * from `clients` where `orders`.`client_id` = `clients`.`id` and (((`clients`.`villes_id` in (5) and (`clients`.`route_id` is null or `clients`.`route_id` in (133))) or `clients`.`route_id` in (133)) or (`clients`.`user_group_id` in (23)))) and `orders`.`status` in ('DELIVERED', 'PARTIALDELIVERY') group by `products`.`id` order by `d_total` asc limit 10", "template": "less_products_sales", "sample_id": 5}
{"prompt": "Annual sales", "completion": "select COALESCE(sub_query.d_total, 0) as total_delivered, core_months_lang.month as month_id, core_months_lang.name as month_name from `core_months_lang` left join (select MONTH(start_time) as month, SUM(delivered_total) as d_total from `orders` where exists (select * from `clients` where `orders`.`client_id` = `clients`.`id` and (((`clients`.`villes_id` in (5) and (`clients`.`route_id` is null or `clients`.`route_id` in (133))) or `clients`.`route_id` in (133)) or (`clients`.`user_group_id` in (23)))) and `status` in ('DELIVERED', 'PARTIALDELIVERY') and year(`start_time`) = 2025 group by `month`) as `sub_query` on `core_months_lang`.`month` = `sub_query`.`month` where `lang` = 'EN' order by `month_id` asc", "template": "annual_sales", "sample_id": 1}
{"prompt": "Annual sales", "completion": "select COALESCE(sub_query.d_total, 0) as total_delivered, core_months_lang.month as month_id, core_months_lang.name as month_name from `core_months_lang` left join (select MONTH(start_time) as month, SUM(delivered_total) as d_total from `orders` where exists (select * from `clients` where `orders`.`client_id` = `clients`.`id` and (((`clients`.`villes_id` in (5) and (`clients`.`route_id` is null or `clients`.`route_id` in (133))) or `clients`.`route_id` in (133)) or (`clients`.`user_group_id` in (23)))) and `status` in ('DELIVERED', 'PARTIALDELIVERY') and year(`start_time`) = 2025 group by `month`) as `sub_query` on `core_months_lang`.`month` = `sub_query`.`month` where `lang` = 'EN' order by `month_id` asc", "template": "annual_sales", "sample_id": 2}
{"prompt": "Annual sales", "completion": "select COALESCE(sub_query.d_total, 0) as total_delivered, core_months_lang.month as month_id, core_months_lang.name as month_name from `core_months_lang` left join (select MONTH(start_time) as month, SUM(delivered_total) as d_total from `orders` where exists (select * from `clients` where `orders`.`client_id` = `clients`.`id` and (((`clients`.`villes_id` in (5) and (`clients`.`route_id` is null or `clients`.`route_id` in (133))) or `clients`.`route_id` in (133)) or (`clients`.`user_group_id` in (23)))) and `status` in ('DELIVERED', 'PARTIALDELIVERY') and year(`start_time`) = 2025 group by `month`) as `sub_query` on `core_months_lang`.`month` = `sub_query`.`month` where `lang` = 'EN' order by `month_id` asc", "template": "annual_sales", "sample_id": 3}
{"prompt": "Annual sales", "completion": "select COALESCE(sub_query.d_total, 0) as total_delivered, core_months_lang.month as month_id, core_months_lang.name as month_name from `core_months_lang` left join (select MONTH(start_time) as month, SUM(delivered_total) as d_total from `orders` where exists (select * from `clients` where `orders`.`client_id` = `clients`.`id` and (((`clients`.`villes_id` in (5) and (`clients`.`route_id` is null or `clients`.`route_id` in (133))) or `clients`.`route_id` in (133)) or (`clients`.`user_group_id` in (23)))) and `status` in ('DELIVERED', 'PARTIALDELIVERY') and year(`start_time`) = 2025 group by `month`) as `sub_query` on `core_months_lang`.`month` = `sub_query`.`month` where `lang` = 'EN' order by `month_id` asc", "template": "annual_sales", "sample_id": 4}
{"prompt": "Annual sales", "completion": "select COALESCE(sub_query.d_total, 0) as total_delivered, core_months_lang.month as month_id, core_months_lang.name as month_name from `core_months_lang` left join (select MONTH(start_time) as month, SUM(delivered_total) as d_total from `orders` where exists (select * from `clients` where `orders`.`client_id` = `clients`.`id` and (((`clients`.`villes_id` in (5) and (`clients`.`route_id` is null or `clients`.`route_id` in (133))) or `clients`.`route_id` in (133)) or (`clients`.`user_group_id` in (23)))) and `status` in ('DELIVERED', 'PARTIALDELIVERY') and year(`start_time`) = 2025 group by `month`) as `sub_query` on `core_months_lang`.`month` = `sub_query`.`month` where `lang` = 'EN' order by `month_id` asc", "template": "annual_sales", "sample_id": 5}
{"prompt": "Payment details of customers", "completion": "select clients.id as client_id, clients.company_name as client, client_transactions.creation_id as transaction, payment_details.type as type, payment_details.amount as total, DATE(payment_details.date) as date from `payment_details` inner join `clients` on `payment_details`.`client_id` = `clients`.`id` inner join `client_transactions` on `payment_details`.`client_transaction_id` = `client_transactions`.`id`", "template": "clients_payment_details", "sample_id": 1}
{"prompt": "Payment details of customers", "completion": "select clients.id as client_id, clients.company_name as client, client_transactions.creation_id as transaction, payment_details.type as type, payment_details.amount as total, DATE(payment_details.date) as date from `payment_details` inner join `clients` on `payment_details`.`client_id` = `clients`.`id` inner join `client_transactions` on `payment_details`.`client_transaction_id` = `client_transactions`.`id`", "template": "clients_payment_details", "sample_id": 2}
{"prompt": "Payment details of customers", "completion": "select clients.id as client_id, clients.company_name as client, client_transactions.creation_id as transaction, payment_details.type as type, payment_details.amount as total, DATE(payment_details.date) as date from `payment_details` inner join `clients` on `payment_details`.`client_id` = `clients`.`id` inner join `client_transactions` on `payment_details`.`client_transaction_id` = `client_transactions`.`id`", "template": "clients_payment_details", "sample_id": 3}
{"prompt": "Payment details of customers", "completion": "select clients.id as client_id, clients.company_name as client, client_transactions.creation_id as transaction, payment_details.type as type, payment_details.amount as total, DATE(payment_details.date) as date from `payment_details` inner join `clients` on `payment_details`.`client_id` = `clients`.`id` inner join `client_transactions` on `payment_details`.`client_transaction_id` = `client_transactions`.`id`", "template": "clients_payment_details", "sample_id": 4}
{"prompt": "Payment details of customers", "completion": "select clients.id as client_id, clients.company_name as client, client_transactions.creation_id as transaction, payment_details.type as type, payment_details.amount as total, DATE(payment_details.date) as date from `payment_details` inner join `clients` on `payment_details`.`client_id` = `clients`.`id` inner join `client_transactions` on `payment_details`.`client_transaction_id` = `client_transactions`.`id`", "template": "clients_payment_details", "sample_id": 5}
{"prompt": "Customer sales", "completion": "select clients.id as client_id, MIN(clients.company_name) as client, SUM(orders.delivered_total) as d_total, MIN(DATE(orders.start_time)) as start_time from `orders` inner join `clients` on `orders`.`client_id` = `clients`.`id` where exists (select * from `clients` where `orders`.`client_id` = `clients`.`id` and (((`clients`.`villes_id` in (5) and (`clients`.`route_id` is null or `clients`.`route_id` in (133))) or `clients`.`route_id` in (133)) or (`clients`.`user_group_id` in (23)))) and `orders`.`status` in ('DELIVERED', 'PARTIALDELIVERY') group by `clients`.`id` order by `d_total` desc", "template": "clients_sales", "sample_id": 1}
{"prompt": "Customer sales", "completion": "select clients.id as client_id, MIN(clients.company_name) as client, SUM(orders.delivered_total) as d_total, MIN(DATE(orders.start_time)) as start_time from `orders` inner join `clients` on `orders`.`client_id` = `clients`.`id` where exists (select * from `clients` where `orders`.`client_id` = `clients`.`id` and (((`clients`.`villes_id` in (5) and (`clients`.`route_id` is null or `clients`.`route_id` in (133))) or `clients`.`route_id` in (133)) or (`clients`.`user_group_id` in (23)))) and `orders`.`status` in ('DELIVERED', 'PARTIALDELIVERY') group by `clients`.`id` order by `d_total` desc", "template": "clients_sales", "sample_id": 2}
{"prompt": "Total customer sales: 510", "completion": "select clients.id as client_id, MIN(clients.company_name) as client, SUM(orders.delivered_total) as d_total, MIN(DATE(orders.start_time)) as start_time from `orders` inner join `clients` on `orders`.`client_id` = `clients`.`id` where exists (select * from `clients` where `orders`.`client_id` = `clients`.`id` and (((`clients`.`villes_id` in (5) and (`clients`.`route_id` is null or `clients`.`route_id` in (133))) or `clients`.`route_id` in (133)) or (`clients`.`user_group_id` in (23)))) and `orders`.`status` in ('DELIVERED', 'PARTIALDELIVERY') group by `clients`.`id` having `d_total` >= 510 order by `d_total` desc", "template": "clients_sales", "sample_id": 3}
{"prompt": "Customer sales", "completion": "select clients.id as client_id, MIN(clients.company_name) as client, SUM(orders.delivered_total) as d_total, MIN(DATE(orders.start_time)) as start_time from `orders` inner join `clients` on `orders`.`client_id` = `clients`.`id` where exists (select * from `clients` where `orders`.`client_id` = `clients`.`id` and (((`clients`.`villes_id` in (5) and (`clients`.`route_id` is null or `clients`.`route_id` in (133))) or `clients`.`route_id` in (133)) or (`clients`.`user_group_id` in (23)))) and `orders`.`status` in ('DELIVERED', 'PARTIALDELIVERY') group by `clients`.`id` order by `d_total` desc", "template": "clients_sales", "sample_id": 4}
{"prompt": "Customer sales", "completion": "select clients.id as client_id, MIN(clients.company_name) as client, SUM(orders.delivered_total) as d_total, MIN(DATE(orders.start_time)) as start_time from `orders` inner join `clients` on `orders`.`client_id` = `clients`.`id` where exists (select * from `clients` where `orders`.`client_id` = `clients`.`id` and (((`clients`.`villes_id` in (5) and (`clients`.`route_id` is null or `clients`.`route_id` in (133))) or `clients`.`route_id` in (133)) or (`clients`.`user_group_id` in (23)))) and `orders`.`status` in ('DELIVERED', 'PARTIALDELIVERY') group by `clients`.`id` order by `d_total` desc", "template": "clients_sales", "sample_id": 5}
{"prompt": "The quantities delivered for each product", "completion": "select products.id as product_id, MIN(products.name) as product_name, MIN(products.has_display_unit) as agg_has_display_unit, MIN(products.display_unit_name) as agg_display_unit_name, MIN(products.display_unit_scale) as agg_display_unit_scale, SUM(order_product.delivered_quantity) as delivered_quantity, DATE(orders.delivery_time) as date from `orders` inner join `order_product` on `orders`.`id` = `order_product`.`order_id` inner join `products` on `products`.`id` = `order_product`.`product_id` where exists (select * from `clients` where `orders`.`client_id` = `clients`.`id` and (((`clients`.`villes_id` in (5) and (`clients`.`route_id` is null or `clients`.`route_id` in (133))) or `clients`.`route_id` in (133)) or (`clients`.`user_group_id` in (23)))) and `orders`.`status` in ('DELIVERED', 'PARTIALDELIVERY') group by `products`.`id`, `date` order by `delivered_quantity` desc", "template": "products_delivered_quantities", "sample_id": 1}
{"prompt": "The quantities delivered for each product Delivery date: 14/11/2025", "completion": "select products.id as product_id, MIN(products.name) as product_name, MIN(products.has_display_unit) as agg_has_display_unit, MIN(products.display_unit_name) as agg_display_unit_name, MIN(products.display_unit_scale) as agg_display_unit_scale, SUM(order_product.delivered_quantity) as delivered_quantity, DATE(orders.delivery_time) as date from `orders` inner join `order_product` on `orders`.`id` = `order_product`.`order_id` inner join `products` on `products`.`id` = `order_product`.`product_id` where exists (select * from `clients` where `orders`.`client_id` = `clients`.`id` and (((`clients`.`villes_id` in (5) and (`clients`.`route_id` is null or `clients`.`route_id` in (133))) or `clients`.`route_id` in (133)) or (`clients`.`user_group_id` in (23)))) and `orders`.`status` in ('DELIVERED', 'PARTIALDELIVERY') group by `products`.`id`, `date` having date <= '2025-10-14 00:00:00' order by `delivered_quantity` desc", "template": "products_delivered_quantities", "sample_id": 2}
{"prompt": "The quantities delivered for each product", "completion": "select products.id as product_id, MIN(products.name) as product_name, MIN(products.has_display_unit) as agg_has_display_unit, MIN(products.display_unit_name) as agg_display_unit_name, MIN(products.display_unit_scale) as agg_display_unit_scale, SUM(order_product.delivered_quantity) as delivered_quantity, DATE(orders.delivery_time) as date from `orders` inner join `order_product` on `orders`.`id` = `order_product`.`order_id` inner join `products` on `products`.`id` = `order_product`.`product_id` where exists (select * from `clients` where `orders`.`client_id` = `clients`.`id` and (((`clients`.`villes_id` in (5) and (`clients`.`route_id` is null or `clients`.`route_id` in (133))) or `clients`.`route_id` in (133)) or (`clients`.`user_group_id` in (23)))) and `orders`.`status` in ('DELIVERED', 'PARTIALDELIVERY') group by `products`.`id`, `date` order by `delivered_quantity` desc", "template": "products_delivered_quantities", "sample_id": 3}
{"prompt": "The quantities delivered for each product", "completion": "select products.id as product_id, MIN(products.name) as product_name, MIN(products.has_display_unit) as agg_has_display_unit, MIN(products.display_unit_name) as agg_display_unit_name, MIN(products.display_unit_scale) as agg_display_unit_scale, SUM(order_product.delivered_quantity) as delivered_quantity, DATE(orders.delivery_time) as date from `orders` inner join `order_product` on `orders`.`id` = `order_product`.`order_id` inner join `products` on `products`.`id` = `order_product`.`product_id` where exists (select * from `clients` where `orders`.`client_id` = `clients`.`id` and (((`clients`.`villes_id` in (5) and (`clients`.`route_id` is null or `clients`.`route_id` in (133))) or `clients`.`route_id` in (133)) or (`clients`.`user_group_id` in (23)))) and `orders`.`status` in ('DELIVERED', 'PARTIALDELIVERY') group by `products`.`id`, `date` order by `delivered_quantity` desc", "template": "products_delivered_quantities", "sample_id": 4}
{"prompt": "The quantities delivered for each product Delivery date: 23/09/2025", "completion": "select products.id as product_id, MIN(products.name) as product_name, MIN(products.has_display_unit) as agg_has_display_unit, MIN(products.display_unit_name) as agg_display_unit_name, MIN(products.display_unit_scale) as agg_display_unit_scale, SUM(order_product.delivered_quantity) as delivered_quantity, DATE(orders.delivery_time) as date from `orders` inner join `order_product` on `orders`.`id` = `order_product`.`order_id` inner join `products` on `products`.`id` = `order_product`.`product_id` where exists (select * from `clients` where `orders`.`client_id` = `clients`.`id` and (((`clients`.`villes_id` in (5) and (`clients`.`route_id` is null or `clients`.`route_id` in (133))) or `clients`.`route_id` in (133)) or (`clients`.`user_group_id` in (23)))) and `orders`.`status` in ('DELIVERED', 'PARTIALDELIVERY') group by `products`.`id`, `date` having date <= '2025-09-23 00:00:00' order by `delivered_quantity` desc", "template": "products_delivered_quantities", "sample_id": 5}
{"prompt": "The number of clients delivered from customers", "completion": "select clients.id as client_id, MIN(clients.company_name) as client, COUNT(orders.delivered_total) as nb_orders, DATE(orders.start_time) as date from `orders` inner join `clients` on `orders`.`client_id` = `clients`.`id` where exists (select * from `clients` where `orders`.`client_id` = `clients`.`id` and (((`clients`.`villes_id` in (5) and (`clients`.`route_id` is null or `clients`.`route_id` in (133))) or `clients`.`route_id` in (133)) or (`clients`.`user_group_id` in (23)))) and `orders`.`status` in ('DELIVERED', 'PARTIALDELIVERY') group by `clients`.`id`, `date` order by `nb_orders` desc", "template": "clients_delivered_orders", "sample_id": 1}
{"prompt": "The number of orders delivered from customers Number of orders: 852 to 907", "completion": "select clients.id as client_id, MIN(clients.company_name) as client, COUNT(orders.delivered_total) as nb_orders, DATE(orders.start_time) as date from `orders` inner join `clients` on `orders`.`client_id` = `clients`.`id` where exists (select * from `clients` where `orders`.`client_id` = `clients`.`id` and (((`clients`.`villes_id` in (5) and (`clients`.`route_id` is null or `clients`.`route_id` in (133))) or `clients`.`route_id` in (133)) or (`clients`.`user_group_id` in (23)))) and `orders`.`status` in ('DELIVERED', 'PARTIALDELIVERY') and `nb_orders` between 852 and 907 group by `clients`.`id`, `date` order by `nb_orders` desc", "template": "clients_delivered_orders", "sample_id": 2}
{"prompt": "The number of orders delivered customers order date: 11/09/2025", "completion": "select clients.id as client_id, MIN(clients.company_name) as client, COUNT(orders.delivered_total) as nb_orders, DATE(orders.start_time) as date from `orders` inner join `clients` on `orders`.`client_id` = `clients`.`id` where exists (select * from `clients` where `orders`.`client_id` = `clients`.`id` and (((`clients`.`villes_id` in (5) and (`clients`.`route_id` is null or `clients`.`route_id` in (133))) or `clients`.`route_id` in (133)) or (`clients`.`user_group_id` in (23)))) and `orders`.`status` in ('DELIVERED', 'PARTIALDELIVERY') group by `clients`.`id`, `date` having date <= '2025-09-11 00:00:00' order by `nb_orders` desc", "template": "clients_delivered_orders", "sample_id": 3}
{"prompt": "The number of clients delivered from customers", "completion": "select clients.id as client_id, MIN(clients.company_name) as client, COUNT(orders.delivered_total) as nb_orders, DATE(orders.start_time) as date from `orders` inner join `clients` on `orders`.`client_id` = `clients`.`id` where exists (select * from `clients` where `orders`.`client_id` = `clients`.`id` and (((`clients`.`villes_id` in (5) and (`clients`.`route_id` is null or `clients`.`route_id` in (133))) or `clients`.`route_id` in (133)) or (`clients`.`user_group_id` in (23)))) and `orders`.`status` in ('DELIVERED', 'PARTIALDELIVERY') group by `clients`.`id`, `date` order by `nb_orders` desc", "template": "clients_delivered_orders", "sample_id": 4}
{"prompt": "The number of orders delivered from customers Number of orders: 474", "completion": "select clients.id as client_id, MIN(clients.company_name) as client, COUNT(orders.delivered_total) as nb_orders, DATE(orders.start_time) as date from `orders` inner join `clients` on `orders`.`client_id` = `clients`.`id` where exists (select * from `clients` where `orders`.`client_id` = `clients`.`id` and (((`clients`.`villes_id` in (5) and (`clients`.`route_id` is null or `clients`.`route_id` in (133))) or `clients`.`route_id` in (133)) or (`clients`.`user_group_id` in (23)))) and `orders`.`status` in ('DELIVERED', 'PARTIALDELIVERY') group by `clients`.`id`, `date` having `nb_orders` >= 474 order by `nb_orders` desc", "template": "clients_delivered_orders", "sample_id": 5}
{"prompt": "The number of commands delivered", "completion": "select COUNT(orders.creation_id) as nb_orders, DATE(orders.start_time) as delivery_date from `orders` where exists (select * from `clients` where `orders`.`client_id` = `clients`.`id` and (((`clients`.`villes_id` in (5) and (`clients`.`route_id` is null or `clients`.`route_id` in (133))) or `clients`.`route_id` in (133)) or (`clients`.`user_group_id` in (23)))) and `orders`.`status` in ('DELIVERED', 'PARTIALDELIVERY') and `orders`.`start_time` is not null group by `delivery_date` order by `delivery_date` desc", "template": "delivered_orders", "sample_id": 1}
{"prompt": "The number of orders delivered Number of orders: 128 Date: 28/08/2025", "completion": "select COUNT(orders.creation_id) as nb_orders, DATE(orders.start_time) as delivery_date from `orders` where exists (select * from `clients` where `orders`.`client_id` = `clients`.`id` and (((`clients`.`villes_id` in (5) and (`clients`.`route_id` is null or `clients`.`route_id` in (133))) or `clients`.`route_id` in (133)) or (`clients`.`user_group_id` in (23)))) and `orders`.`status` in ('DELIVERED', 'PARTIALDELIVERY') and `orders`.`start_time` is not null and date(`delivery_time`) <= '2025-08-28' group by `delivery_date` having `nb_orders` = 128 order by `delivery_date` desc", "template": "delivered_orders", "sample_id": 2}
{"prompt": "The number of orders delivered Number of orders: 533 TB 641", "completion": "select COUNT(orders.creation_id) as nb_orders, DATE(orders.start_time) as delivery_date from `orders` where exists (select * from `clients` where `orders`.`client_id` = `clients`.`id` and (((`clients`.`villes_id` in (5) and (`clients`.`route_id` is null or `clients`.`route_id` in (133))) or `clients`.`route_id` in (133)) or (`clients`.`user_group_id` in (23)))) and `orders`.`status` in ('DELIVERED', 'PARTIALDELIVERY') and `orders`.`start_time` is not null and `nb_orders` between 533 and 641 group by `delivery_date` order by `delivery_date` desc", "template": "delivered_orders", "sample_id": 3}
{"prompt": "The number of commands delivered", "completion": "select COUNT(orders.creation_id) as nb_orders, DATE(orders.start_time) as delivery_date from `orders` where exists (select * from `clients` where `orders`.`client_id` = `clients`.`id` and (((`clients`.`villes_id` in (5) and (`clients`.`route_id` is null or `clients`.`route_id` in (133))) or `clients`.`route_id` in (133)) or (`clients`.`user_group_id` in (23)))) and `orders`.`status` in ('DELIVERED', 'PARTIALDELIVERY') and `orders`.`start_time` is not null group by `delivery_date` order by `delivery_date` desc", "template": "delivered_orders", "sample_id": 4}
{"prompt": "The number of orders delivered Number of orders: 472 Date: 07/09/2025", "completion": "select COUNT(orders.creation_id) as nb_orders, DATE(orders.start_time) as delivery_date from `orders` where exists (select * from `clients` where `orders`.`client_id` = `clients`.`id` and (((`clients`.`villes_id` in (5) and (`clients`.`route_id` is null or `clients`.`route_id` in (133))) or `clients`.`route_id` in (133)) or (`clients`.`user_group_id` in (23)))) and `orders`.`status` in ('DELIVERED', 'PARTIALDELIVERY') and `orders`.`start_time` is not null and date(`delivery_time`) <= '2025-09-07' group by `delivery_date` having `nb_orders` >= 472 order by `delivery_date` desc", "template": "delivered_orders", "sample_id": 5}
{"prompt": "Opening and closing hours of delegates", "completion": "select employees.name as employee_name, employees.id as employee_id, `sub_query_start`.`average_start_time` as `start`, `sub_query_end`.`average_end_time` as `end`, TIMEDIFF(sub_query_end.average_end_time, sub_query_start.average_start_time) as duration from `employees` inner join (select day_schedules.employee_id as employee_start_id, SEC_TO_TIME(AVG(TIME_TO_SEC(time))) as average_start_time from `day_schedules` where `day_schedules`.`type` = 'START' group by `employee_start_id`) as `sub_query_start` on `employees`.`id` = `sub_query_start`.`employee_start_id` inner join (select day_schedules.employee_id as employee_end_id, SEC_TO_TIME(AVG(TIME_TO_SEC(time))) as average_end_time from `day_schedules` where `day_schedules`.`type` = 'END' group by `employee_end_id`) as `sub_query_end` on `employees`.`id` = `sub_query_end`.`employee_end_id` where ((exists (select * from `routes` where `employees`.`route_id` = `routes`.`id` and ((`routes`.`id` in (133) or `routes`.`user_group_id` in (23)))) or exists (select * from `warehouses` where `employees`.`warehouse_id` = `warehouses`.`id` and ((exists (select * from `core_villes` inner join `warehouse_ville` on `core_villes`.`id` = `warehouse_ville`.`villes_id` where `warehouses`.`id` = `warehouse_ville`.`warehouse_id` and `core_villes`.`id` in (5))) or (`warehouses`.`user_group_id` in (23)))))) and `employees`.`deleted_at` is null", "template": "employees_average_work_time", "sample_id": 1}
{"prompt": "Average opening and closing hours of delegated delegates:", "completion": "select employees.name as employee_name, employees.id as employee_id, `sub_query_start`.`average_start_time` as `start`, `sub_query_end`.`average_end_time` as `end`, TIMEDIFF(sub_query_end.average_end_time, sub_query_start.average_start_time) as duration from `employees` inner join (select day_schedules.employee_id as employee_start_id, SEC_TO_TIME(AVG(TIME_TO_SEC(time))) as average_start_time from `day_schedules` where `day_schedules`.`type` = 'START' group by `employee_start_id`) as `sub_query_start` on `employees`.`id` = `sub_query_start`.`employee_start_id` inner join (select day_schedules.employee_id as employee_end_id, SEC_TO_TIME(AVG(TIME_TO_SEC(time))) as average_end_time from `day_schedules` where `day_schedules`.`type` = 'END' group by `employee_end_id`) as `sub_query_end` on `employees`.`id` = `sub_query_end`.`employee_end_id` where ((exists (select * from `routes` where `employees`.`route_id` = `routes`.`id` and ((`routes`.`id` in (133) or `routes`.`user_group_id` in (23)))) or exists (select * from `warehouses` where `employees`.`warehouse_id` = `warehouses`.`id` and ((exists (select * from `core_villes` inner join `warehouse_ville` on `core_villes`.`id` = `warehouse_ville`.`villes_id` where `warehouses`.`id` = `warehouse_ville`.`warehouse_id` and `core_villes`.`id` in (5))) or (`warehouses`.`user_group_id` in (23)))))) and 0 = 1 and `employees`.`deleted_at` is null", "template": "employees_average_work_time", "sample_id": 2}
{"prompt": "Opening and closing hours of delegates", "completion": "select employees.name as employee_name, employees.id as employee_id, `sub_query_start`.`average_start_time` as `start`, `sub_query_end`.`average_end_time` as `end`, TIMEDIFF(sub_query_end.average_end_time, sub_query_start.average_start_time) as duration from `employees` inner join (select day_schedules.employee_id as employee_start_id, SEC_TO_TIME(AVG(TIME_TO_SEC(time))) as average_start_time from `day_schedules` where `day_schedules`.`type` = 'START' group by `employee_start_id`) as `sub_query_start` on `employees`.`id` = `sub_query_start`.`employee_start_id` inner join (select day_schedules.employee_id as employee_end_id, SEC_TO_TIME(AVG(TIME_TO_SEC(time))) as average_end_time from `day_schedules` where `day_schedules`.`type` = 'END' group by `employee_end_id`) as `sub_query_end` on `employees`.`id` = `sub_query_end`.`employee_end_id` where ((exists (select * from `routes` where `employees`.`route_id` = `routes`.`id` and ((`routes`.`id` in (133) or `routes`.`user_group_id` in (23)))) or exists (select * from `warehouses` where `employees`.`warehouse_id` = `warehouses`.`id` and ((exists (select * from `core_villes` inner join `warehouse_ville` on `core_villes`.`id` = `warehouse_ville`.`villes_id` where `warehouses`.`id` = `warehouse_ville`.`warehouse_id` and `core_villes`.`id` in (5))) or (`warehouses`.`user_group_id` in (23)))))) and `employees`.`deleted_at` is null", "template": "employees_average_work_time", "sample_id": 3}
{"prompt": "Average opening and closing hours of delegated delegates:", "completion": "select employees.name as employee_name, employees.id as employee_id, `sub_query_start`.`average_start_time` as `start`, `sub_query_end`.`average_end_time` as `end`, TIMEDIFF(sub_query_end.average_end_time, sub_query_start.average_start_time) as duration from `employees` inner join (select day_schedules.employee_id as employee_start_id, SEC_TO_TIME(AVG(TIME_TO_SEC(time))) as average_start_time from `day_schedules` where `day_schedules`.`type` = 'START' group by `employee_start_id`) as `sub_query_start` on `employees`.`id` = `sub_query_start`.`employee_start_id` inner join (select day_schedules.employee_id as employee_end_id, SEC_TO_TIME(AVG(TIME_TO_SEC(time))) as average_end_time from `day_schedules` where `day_schedules`.`type` = 'END' group by `employee_end_id`) as `sub_query_end` on `employees`.`id` = `sub_query_end`.`employee_end_id` where ((exists (select * from `routes` where `employees`.`route_id` = `routes`.`id` and ((`routes`.`id` in (133) or `routes`.`user_group_id` in (23)))) or exists (select * from `warehouses` where `employees`.`warehouse_id` = `warehouses`.`id` and ((exists (select * from `core_villes` inner join `warehouse_ville` on `core_villes`.`id` = `warehouse_ville`.`villes_id` where `warehouses`.`id` = `warehouse_ville`.`warehouse_id` and `core_villes`.`id` in (5))) or (`warehouses`.`user_group_id` in (23)))))) and 0 = 1 and `employees`.`deleted_at` is null", "template": "employees_average_work_time", "sample_id": 4}
{"prompt": "Average opening and closing hours of delegated delegates:", "completion": "select employees.name as employee_name, employees.id as employee_id, `sub_query_start`.`average_start_time` as `start`, `sub_query_end`.`average_end_time` as `end`, TIMEDIFF(sub_query_end.average_end_time, sub_query_start.average_start_time) as duration from `employees` inner join (select day_schedules.employee_id as employee_start_id, SEC_TO_TIME(AVG(TIME_TO_SEC(time))) as average_start_time from `day_schedules` where `day_schedules`.`type` = 'START' group by `employee_start_id`) as `sub_query_start` on `employees`.`id` = `sub_query_start`.`employee_start_id` inner join (select day_schedules.employee_id as employee_end_id, SEC_TO_TIME(AVG(TIME_TO_SEC(time))) as average_end_time from `day_schedules` where `day_schedules`.`type` = 'END' group by `employee_end_id`) as `sub_query_end` on `employees`.`id` = `sub_query_end`.`employee_end_id` where ((exists (select * from `routes` where `employees`.`route_id` = `routes`.`id` and ((`routes`.`id` in (133) or `routes`.`user_group_id` in (23)))) or exists (select * from `warehouses` where `employees`.`warehouse_id` = `warehouses`.`id` and ((exists (select * from `core_villes` inner join `warehouse_ville` on `core_villes`.`id` = `warehouse_ville`.`villes_id` where `warehouses`.`id` = `warehouse_ville`.`warehouse_id` and `core_villes`.`id` in (5))) or (`warehouses`.`user_group_id` in (23)))))) and 0 = 1 and `employees`.`deleted_at` is null", "template": "employees_average_work_time", "sample_id": 5}
{"prompt": "Total sales by region", "completion": "select clients.countries_id as countries_id, clients.villes_id as villes_id, MIN(core_villes_lang.name) as ville, MIN(core_countries_lang.name) as country, SUM(orders.delivered_total) as total, DATE(orders.start_time) as date from `orders` inner join `clients` on `orders`.`client_id` = `clients`.`id` inner join `core_countries_lang` on `clients`.`countries_id` = `core_countries_lang`.`countries_id` inner join `core_villes_lang` on `clients`.`villes_id` = `core_villes_lang`.`villes_id` where exists (select * from `clients` where `orders`.`client_id` = `clients`.`id` and (((`clients`.`villes_id` in (5) and (`clients`.`route_id` is null or `clients`.`route_id` in (133))) or `clients`.`route_id` in (133)) or (`clients`.`user_group_id` in (23)))) and `core_countries_lang`.`lang` = 'EN' and `core_villes_lang`.`lang` = 'EN' and `orders`.`status` in ('DELIVERED', 'PARTIALDELIVERY') group by `clients`.`villes_id`, `clients`.`countries_id`, `date` order by `total` desc", "template": "regional_sales", "sample_id": 1}
{"prompt": "Total sales by region Order date: 13/10/2025", "completion": "select clients.countries_id as countries_id, clients.villes_id as villes_id, MIN(core_villes_lang.name) as ville, MIN(core_countries_lang.name) as country, SUM(orders.delivered_total) as total, DATE(orders.start_time) as date from `orders` inner join `clients` on `orders`.`client_id` = `clients`.`id` inner join `core_countries_lang` on `clients`.`countries_id` = `core_countries_lang`.`countries_id` inner join `core_villes_lang` on `clients`.`villes_id` = `core_villes_lang`.`villes_id` where exists (select * from `clients` where `orders`.`client_id` = `clients`.`id` and (((`clients`.`villes_id` in (5) and (`clients`.`route_id` is null or `clients`.`route_id` in (133))) or `clients`.`route_id` in (133)) or (`clients`.`user_group_id` in (23)))) and `core_countries_lang`.`lang` = 'EN' and `core_villes_lang`.`lang` = 'EN' and `orders`.`status` in ('DELIVERED', 'PARTIALDELIVERY') group by `clients`.`villes_id`, `clients`.`countries_id`, `date` having date = '2025-10-13 00:00:00' order by `total` desc", "template": "regional_sales", "sample_id": 2}
{"prompt": "Total sales by region", "completion": "select clients.countries_id as countries_id, clients.villes_id as villes_id, MIN(core_villes_lang.name) as ville, MIN(core_countries_lang.name) as country, SUM(orders.delivered_total) as total, DATE(orders.start_time) as date from `orders` inner join `clients` on `orders`.`client_id` = `clients`.`id` inner join `core_countries_lang` on `clients`.`countries_id` = `core_countries_lang`.`countries_id` inner join `core_villes_lang` on `clients`.`villes_id` = `core_villes_lang`.`villes_id` where exists (select * from `clients` where `orders`.`client_id` = `clients`.`id` and (((`clients`.`villes_id` in (5) and (`clients`.`route_id` is null or `clients`.`route_id` in (133))) or `clients`.`route_id` in (133)) or (`clients`.`user_group_id` in (23)))) and `core_countries_lang`.`lang` = 'EN' and `core_villes_lang`.`lang` = 'EN' and `orders`.`status` in ('DELIVERED', 'PARTIALDELIVERY') group by `clients`.`villes_id`, `clients`.`countries_id`, `date` order by `total` desc", "template": "regional_sales", "sample_id": 3}
{"prompt": "Total sales by region Order date: 12/10/2025", "completion": "select clients.countries_id as countries_id, clients.villes_id as villes_id, MIN(core_villes_lang.name) as ville, MIN(core_countries_lang.name) as country, SUM(orders.delivered_total) as total, DATE(orders.start_time) as date from `orders` inner join `clients` on `orders`.`client_id` = `clients`.`id` inner join `core_countries_lang` on `clients`.`countries_id` = `core_countries_lang`.`countries_id` inner join `core_villes_lang` on `clients`.`villes_id` = `core_villes_lang`.`villes_id` where exists (select * from `clients` where `orders`.`client_id` = `clients`.`id` and (((`clients`.`villes_id` in (5) and (`clients`.`route_id` is null or `clients`.`route_id` in (133))) or `clients`.`route_id` in (133)) or (`clients`.`user_group_id` in (23)))) and `core_countries_lang`.`lang` = 'EN' and `core_villes_lang`.`lang` = 'EN' and `orders`.`status` in ('DELIVERED', 'PARTIALDELIVERY') group by `clients`.`villes_id`, `clients`.`countries_id`, `date` having date >= '2025-10-12 00:00:00' order by `total` desc", "template": "regional_sales", "sample_id": 4}
{"prompt": "Total sales by region", "completion": "select clients.countries_id as countries_id, clients.villes_id as villes_id, MIN(core_villes_lang.name) as ville, MIN(core_countries_lang.name) as country, SUM(orders.delivered_total) as total, DATE(orders.start_time) as date from `orders` inner join `clients` on `orders`.`client_id` = `clients`.`id` inner join `core_countries_lang` on `clients`.`countries_id` = `core_countries_lang`.`countries_id` inner join `core_villes_lang` on `clients`.`villes_id` = `core_villes_lang`.`villes_id` where exists (select * from `clients` where `orders`.`client_id` = `clients`.`id` and (((`clients`.`villes_id` in (5) and (`clients`.`route_id` is null or `clients`.`route_id` in (133))) or `clients`.`route_id` in (133)) or (`clients`.`user_group_id` in (23)))) and `core_countries_lang`.`lang` = 'EN' and `core_villes_lang`.`lang` = 'EN' and `orders`.`status` in ('DELIVERED', 'PARTIALDELIVERY') group by `clients`.`villes_id`, `clients`.`countries_id`, `date` order by `total` desc", "template": "regional_sales", "sample_id": 5}
{"prompt": "The number of returns per product category", "completion": "select COUNT(client_returns.id) as count, product_categories.id as product_category_id, MIN(product_categories.name) as category_name from `client_returns` inner join `client_return_products` on `client_returns`.`id` = `client_return_products`.`client_return_id` inner join `products` on `client_return_products`.`product_id` = `products`.`id` inner join `product_categories` on `products`.`product_category_id` = `product_categories`.`id` where `client_returns`.`status` in ('ACCEPTED', 'ONHOLD') group by `product_categories`.`id` order by `count` desc", "template": "products_categories_returns", "sample_id": 1}
{"prompt": "The number of returns per product category", "completion": "select COUNT(client_returns.id) as count, product_categories.id as product_category_id, MIN(product_categories.name) as category_name from `client_returns` inner join `client_return_products` on `client_returns`.`id` = `client_return_products`.`client_return_id` inner join `products` on `client_return_products`.`product_id` = `products`.`id` inner join `product_categories` on `products`.`product_category_id` = `product_categories`.`id` where `client_returns`.`status` in ('ACCEPTED', 'ONHOLD') group by `product_categories`.`id` order by `count` desc", "template": "products_categories_returns", "sample_id": 2}
{"prompt": "The number of returns per product category Product category: Mix, Hot & Spicy", "completion": "select COUNT(client_returns.id) as count, product_categories.id as product_category_id, MIN(product_categories.name) as category_name from `client_returns` inner join `client_return_products` on `client_returns`.`id` = `client_return_products`.`client_return_id` inner join `products` on `client_return_products`.`product_id` = `products`.`id` inner join `product_categories` on `products`.`product_category_id` = `product_categories`.`id` where `client_returns`.`status` in ('ACCEPTED', 'ONHOLD') and `product_category_id` in (22, 12) group by `product_categories`.`id` order by `count` desc", "template": "products_categories_returns", "sample_id": 3}
{"prompt": "The number of returns per product category Product category: vegetables, flan", "completion": "select COUNT(client_returns.id) as count, product_categories.id as product_category_id, MIN(product_categories.name) as category_name from `client_returns` inner join `client_return_products` on `client_returns`.`id` = `client_return_products`.`client_return_id` inner join `products` on `client_return_products`.`product_id` = `products`.`id` inner join `product_categories` on `products`.`product_category_id` = `product_categories`.`id` where `client_returns`.`status` in ('ACCEPTED', 'ONHOLD') and `product_category_id` in (17, 21) group by `product_categories`.`id` order by `count` desc", "template": "products_categories_returns", "sample_id": 4}
{"prompt": "The number of returns per product category Product category: no Vendible, Harira, Flan", "completion": "select COUNT(client_returns.id) as count, product_categories.id as product_category_id, MIN(product_categories.name) as category_name from `client_returns` inner join `client_return_products` on `client_returns`.`id` = `client_return_products`.`client_return_id` inner join `products` on `client_return_products`.`product_id` = `products`.`id` inner join `product_categories` on `products`.`product_category_id` = `product_categories`.`id` where `client_returns`.`status` in ('ACCEPTED', 'ONHOLD') and `product_category_id` in (21, 1, 19) group by `product_categories`.`id` order by `count` desc", "template": "products_categories_returns", "sample_id": 5}
{"prompt": "The number of returns and quantities returned by product", "completion": "select COUNT(client_returns.id) as count, SUM(client_return_products.quantity) as quantity, MIN(products.name) as product_name, MIN(products.has_display_unit) as agg_has_display_unit, MIN(products.display_unit_name) as agg_display_unit_name, MIN(products.display_unit_scale) as agg_display_unit_scale, MIN(products.id) as product_id from `client_returns` inner join `client_return_products` on `client_returns`.`id` = `client_return_products`.`client_return_id` inner join `products` on `client_return_products`.`product_id` = `products`.`id` where `client_returns`.`status` in ('ACCEPTED', 'ONHOLD') group by `products`.`id` order by `count` desc", "template": "products_returns_quantities", "sample_id": 1}
{"prompt": "The number of returns and quantities returned by product product: 70G chicken noodles (NF)", "completion": "select COUNT(client_returns.id) as count, SUM(client_return_products.quantity) as quantity, MIN(products.name) as product_name, MIN(products.has_display_unit) as agg_has_display_unit, MIN(products.display_unit_name) as agg_display_unit_name, MIN(products.display_unit_scale) as agg_display_unit_scale, MIN(products.id) as product_id from `client_returns` inner join `client_return_products` on `client_returns`.`id` = `client_return_products`.`client_return_id` inner join `products` on `client_return_products`.`product_id` = `products`.`id` where `client_returns`.`status` in ('ACCEPTED', 'ONHOLD') and `product_id` in (89) group by `products`.`id` order by `count` desc", "template": "products_returns_quantities", "sample_id": 2}
{"prompt": "The number of returns and the quantities returned by product product: tast enhancers bouillon cube Etuis 8 sheep 8x10g promo, tast enhancers bouillon cube chube 8x10g promo, rm jb chicken noodles 120g dz prm 23 1/2 cardboard", "completion": "select COUNT(client_returns.id) as count, SUM(client_return_products.quantity) as quantity, MIN(products.name) as product_name, MIN(products.has_display_unit) as agg_has_display_unit, MIN(products.display_unit_name) as agg_display_unit_name, MIN(products.display_unit_scale) as agg_display_unit_scale, MIN(products.id) as product_id from `client_returns` inner join `client_return_products` on `client_returns`.`id` = `client_return_products`.`client_return_id` inner join `products` on `client_return_products`.`product_id` = `products`.`id` where `client_returns`.`status` in ('ACCEPTED', 'ONHOLD') and `product_id` in (56, 67, 54) group by `products`.`id` order by `count` desc", "template": "products_returns_quantities", "sample_id": 3}
{"prompt": "The number of returns and the quantities returned by product product: RM JB Noodle Vegetables 40 DZ 70G PRM 23 1/2 Carton, PLV Cash Desk Seasonings", "completion": "select COUNT(client_returns.id) as count, SUM(client_return_products.quantity) as quantity, MIN(products.name) as product_name, MIN(products.has_display_unit) as agg_has_display_unit, MIN(products.display_unit_name) as agg_display_unit_name, MIN(products.display_unit_scale) as agg_display_unit_scale, MIN(products.id) as product_id from `client_returns` inner join `client_return_products` on `client_returns`.`id` = `client_return_products`.`client_return_id` inner join `products` on `client_return_products`.`product_id` = `products`.`id` where `client_returns`.`status` in ('ACCEPTED', 'ONHOLD') and `product_id` in (98, 62) group by `products`.`id` order by `count` desc", "template": "products_returns_quantities", "sample_id": 4}
{"prompt": "The number of returns and quantities returned by product product: Curry 70G noodles, New Product", "completion": "select COUNT(client_returns.id) as count, SUM(client_return_products.quantity) as quantity, MIN(products.name) as product_name, MIN(products.has_display_unit) as agg_has_display_unit, MIN(products.display_unit_name) as agg_display_unit_name, MIN(products.display_unit_scale) as agg_display_unit_scale, MIN(products.id) as product_id from `client_returns` inner join `client_return_products` on `client_returns`.`id` = `client_return_products`.`client_return_id` inner join `products` on `client_return_products`.`product_id` = `products`.`id` where `client_returns`.`status` in ('ACCEPTED', 'ONHOLD') and `product_id` in (33, 79) group by `products`.`id` order by `count` desc", "template": "products_returns_quantities", "sample_id": 5}
{"prompt": "Daily deliveries of products by price by delegate", "completion": "select MIN(employees.name) as employee_name, MIN(employees.type) as employee_type, MIN(employee_type_langs.name) as employee_type_lang, MIN(unit_langs.name) as base_unit_lang, employees.id as employee_id, products.id as product_id, MIN(products.name) as product_name, MIN(products.has_display_unit) as agg_has_display_unit, MIN(products.display_unit_name) as agg_display_unit_name, MIN(products.display_unit_scale) as agg_display_unit_scale, order_product.discounted_price as price, SUM(order_product.delivered_quantity) as quantity, SUM(order_product.total_delivered_price) as total, DATE(orders.delivery_time) as date from `orders` inner join `employees` on `orders`.`delivery_employee_id` = `employees`.`id` and `employees`.`type` != 'SELLER' inner join `employee_type_langs` on `employees`.`type` = `employee_type_langs`.`related_code` and `employee_type_langs`.`lang` = 'EN' inner join `order_product` on `orders`.`id` = `order_product`.`order_id` inner join `products` on `order_product`.`product_id` = `products`.`id` inner join `unit_langs` on `order_product`.`unit_id` = `unit_langs`.`unit_id` and `unit_langs`.`lang` = 'EN' where exists (select * from `clients` where `orders`.`client_id` = `clients`.`id` and (((`clients`.`villes_id` in (5) and (`clients`.`route_id` is null or `clients`.`route_id` in (133))) or `clients`.`route_id` in (133)) or (`clients`.`user_group_id` in (23)))) and `orders`.`status` in ('DELIVERED', 'PARTIALDELIVERY') group by `employees`.`id`, `products`.`id`, `date`, `price` having `quantity` > 0 order by `date` desc, `employee_type_lang` asc, `employee_name` asc, `product_name` asc", "template": "employees_daily_sku_sales", "sample_id": 1}
{"prompt": "Daily orders of products by price by delegate", "completion": "select MIN(employees.name) as employee_name, MIN(unit_langs.name) as base_unit_lang, employees.id as employee_id, products.id as product_id, MIN(products.name) as product_name, MIN(products.has_display_unit) as agg_has_display_unit, MIN(products.display_unit_name) as agg_display_unit_name, MIN(products.display_unit_scale) as agg_display_unit_scale, order_product.discounted_price as price, SUM(order_product.quantity) as quantity, SUM(order_product.total_discounted_price) as total, DATE(orders.start_time) as date, DATE(orders.delivery_time) as delivery_date from `orders` inner join `employees` on `orders`.`employee_id` = `employees`.`id` and `employees`.`type` = 'SELLER' inner join `order_product` on `orders`.`id` = `order_product`.`order_id` inner join `products` on `order_product`.`product_id` = `products`.`id` inner join `unit_langs` on `order_product`.`unit_id` = `unit_langs`.`unit_id` and `unit_langs`.`lang` = 'EN' where exists (select * from `clients` where `orders`.`client_id` = `clients`.`id` and (((`clients`.`villes_id` in (5) and (`clients`.`route_id` is null or `clients`.`route_id` in (133))) or `clients`.`route_id` in (133)) or (`clients`.`user_group_id` in (23)))) group by `employees`.`id`, `products`.`id`, `date`, `delivery_date`, `price` having `quantity` > 0 order by `date` desc, `employee_name` asc, `product_name` asc", "template": "employees_daily_sku_orders", "sample_id": 1}
{"prompt": "Daily orders of products by price by delegate Order date: 04/10/2025 Delivery date: 08/10/2025", "completion": "select MIN(employees.name) as employee_name, MIN(unit_langs.name) as base_unit_lang, employees.id as employee_id, products.id as product_id, MIN(products.name) as product_name, MIN(products.has_display_unit) as agg_has_display_unit, MIN(products.display_unit_name) as agg_display_unit_name, MIN(products.display_unit_scale) as agg_display_unit_scale, order_product.discounted_price as price, SUM(order_product.quantity) as quantity, SUM(order_product.total_discounted_price) as total, DATE(orders.start_time) as date, DATE(orders.delivery_time) as delivery_date from `orders` inner join `employees` on `orders`.`employee_id` = `employees`.`id` and `employees`.`type` = 'SELLER' inner join `order_product` on `orders`.`id` = `order_product`.`order_id` inner join `products` on `order_product`.`product_id` = `products`.`id` inner join `unit_langs` on `order_product`.`unit_id` = `unit_langs`.`unit_id` and `unit_langs`.`lang` = 'EN' where exists (select * from `clients` where `orders`.`client_id` = `clients`.`id` and (((`clients`.`villes_id` in (5) and (`clients`.`route_id` is null or `clients`.`route_id` in (133))) or `clients`.`route_id` in (133)) or (`clients`.`user_group_id` in (23)))) group by `employees`.`id`, `products`.`id`, `date`, `delivery_date`, `price` having `quantity` > 0 and date >= '2025-10-04 00:00:00' and delivery_date >= '2025-10-08 00:00:00' order by `date` desc, `employee_name` asc, `product_name` asc", "template": "employees_daily_sku_orders", "sample_id": 2}
{"prompt": "Daily commands of products by price by Product delegate: CB JB Chicken Givers 24x4 DZ, (**) BC JB Beef 24x (8+2) FR/BE PRM, PLV Noodles 5 Order date: 12/09/2025 to 14/09/2025", "completion": "select MIN(employees.name) as employee_name, MIN(unit_langs.name) as base_unit_lang, employees.id as employee_id, products.id as product_id, MIN(products.name) as product_name, MIN(products.has_display_unit) as agg_has_display_unit, MIN(products.display_unit_name) as agg_display_unit_name, MIN(products.display_unit_scale) as agg_display_unit_scale, order_product.discounted_price as price, SUM(order_product.quantity) as quantity, SUM(order_product.total_discounted_price) as total, DATE(orders.start_time) as date, DATE(orders.delivery_time) as delivery_date from `orders` inner join `employees` on `orders`.`employee_id` = `employees`.`id` and `employees`.`type` = 'SELLER' inner join `order_product` on `orders`.`id` = `order_product`.`order_id` inner join `products` on `order_product`.`product_id` = `products`.`id` inner join `unit_langs` on `order_product`.`unit_id` = `unit_langs`.`unit_id` and `unit_langs`.`lang` = 'EN' where exists (select * from `clients` where `orders`.`client_id` = `clients`.`id` and (((`clients`.`villes_id` in (5) and (`clients`.`route_id` is null or `clients`.`route_id` in (133))) or `clients`.`route_id` in (133)) or (`clients`.`user_group_id` in (23)))) and `product_id` in (23, 86, 100) group by `employees`.`id`, `products`.`id`, `date`, `delivery_date`, `price` having `quantity` > 0 and date BETWEEN '2025-09-12 00:00:00' AND '2025-09-14 23:59:59' order by `date` desc, `employee_name` asc, `product_name` asc", "template": "employees_daily_sku_orders", "sample_id": 3}
{"prompt": "Daily orders of products by price by delegate delegate: Product: Dry sauces sauces bechamel 52g order date: 21/09/2025 Delivery date: 24/10/2025", "completion": "select MIN(employees.name) as employee_name, MIN(unit_langs.name) as base_unit_lang, employees.id as employee_id, products.id as product_id, MIN(products.name) as product_name, MIN(products.has_display_unit) as agg_has_display_unit, MIN(products.display_unit_name) as agg_display_unit_name, MIN(products.display_unit_scale) as agg_display_unit_scale, order_product.discounted_price as price, SUM(order_product.quantity) as quantity, SUM(order_product.total_discounted_price) as total, DATE(orders.start_time) as date, DATE(orders.delivery_time) as delivery_date from `orders` inner join `employees` on `orders`.`employee_id` = `employees`.`id` and `employees`.`type` = 'SELLER' inner join `order_product` on `orders`.`id` = `order_product`.`order_id` inner join `products` on `order_product`.`product_id` = `products`.`id` inner join `unit_langs` on `order_product`.`unit_id` = `unit_langs`.`unit_id` and `unit_langs`.`lang` = 'EN' where exists (select * from `clients` where `orders`.`client_id` = `clients`.`id` and (((`clients`.`villes_id` in (5) and (`clients`.`route_id` is null or `clients`.`route_id` in (133))) or `clients`.`route_id` in (133)) or (`clients`.`user_group_id` in (23)))) and 0 = 1 and `product_id` in (12) group by `employees`.`id`, `products`.`id`, `date`, `delivery_date`, `price` having `quantity` > 0 and date >= '2025-09-21 00:00:00' and delivery_date = '2025-10-24 00:00:00' order by `date` desc, `employee_name` asc, `product_name` asc", "template": "employees_daily_sku_orders", "sample_id": 4}
{"prompt": "Daily commands of products by price by Product delegate: Maxi chicken noodles 120g, tomato sauce 1L, Maxi chicken noodles 120g 1/2 Carton Order date: 28/09/2025 Delivery date: 15/10/2025", "completion": "select MIN(employees.name) as employee_name, MIN(unit_langs.name) as base_unit_lang, employees.id as employee_id, products.id as product_id, MIN(products.name) as product_name, MIN(products.has_display_unit) as agg_has_display_unit, MIN(products.display_unit_name) as agg_display_unit_name, MIN(products.display_unit_scale) as agg_display_unit_scale, order_product.discounted_price as price, SUM(order_product.quantity) as quantity, SUM(order_product.total_discounted_price) as total, DATE(orders.start_time) as date, DATE(orders.delivery_time) as delivery_date from `orders` inner join `employees` on `orders`.`employee_id` = `employees`.`id` and `employees`.`type` = 'SELLER' inner join `order_product` on `orders`.`id` = `order_product`.`order_id` inner join `products` on `order_product`.`product_id` = `products`.`id` inner join `unit_langs` on `order_product`.`unit_id` = `unit_langs`.`unit_id` and `unit_langs`.`lang` = 'EN' where exists (select * from `clients` where `orders`.`client_id` = `clients`.`id` and (((`clients`.`villes_id` in (5) and (`clients`.`route_id` is null or `clients`.`route_id` in (133))) or `clients`.`route_id` in (133)) or (`clients`.`user_group_id` in (23)))) and `product_id` in (77, 49, 29) group by `employees`.`id`, `products`.`id`, `date`, `delivery_date`, `price` having `quantity` > 0 and date = '2025-09-28 00:00:00' and delivery_date >= '2025-10-15 00:00:00' order by `date` desc, `employee_name` asc, `product_name` asc", "template": "employees_daily_sku_orders", "sample_id": 5}
{"prompt": "Sales by delegate by brand", "completion": "select MIN(employees.name) as employee_name, orders.employee_id as employee_id, MIN(brands.name) as brand_name, brands.id as brand_id, SUM(order_product.total_delivered_price) as d_total, DATE(orders.start_time) as date from `orders` inner join `employees` on `orders`.`employee_id` = `employees`.`id` inner join `order_product` on `orders`.`id` = `order_product`.`order_id` inner join `products` on `order_product`.`product_id` = `products`.`id` inner join `brands` on `products`.`brand_id` = `brands`.`id` where exists (select * from `clients` where `orders`.`client_id` = `clients`.`id` and (((`clients`.`villes_id` in (5) and (`clients`.`route_id` is null or `clients`.`route_id` in (133))) or `clients`.`route_id` in (133)) or (`clients`.`user_group_id` in (23)))) and `orders`.`status` in ('DELIVERED', 'PARTIALDELIVERY') group by `orders`.`employee_id`, `date`, `brands`.`id` order by `date` desc, `employee_name` asc, `d_total` asc", "template": "brand_employees_sales", "sample_id": 1}
{"prompt": "Sales by delegate by Delegate brand: Brand: Kool Date: 04/09/2025", "completion": "select MIN(employees.name) as employee_name, orders.employee_id as employee_id, MIN(brands.name) as brand_name, brands.id as brand_id, SUM(order_product.total_delivered_price) as d_total, DATE(orders.start_time) as date from `orders` inner join `employees` on `orders`.`employee_id` = `employees`.`id` inner join `order_product` on `orders`.`id` = `order_product`.`order_id` inner join `products` on `order_product`.`product_id` = `products`.`id` inner join `brands` on `products`.`brand_id` = `brands`.`id` where exists (select * from `clients` where `orders`.`client_id` = `clients`.`id` and (((`clients`.`villes_id` in (5) and (`clients`.`route_id` is null or `clients`.`route_id` in (133))) or `clients`.`route_id` in (133)) or (`clients`.`user_group_id` in (23)))) and `orders`.`status` in ('DELIVERED', 'PARTIALDELIVERY') and 0 = 1 and `brand_id` in (1) group by `orders`.`employee_id`, `date`, `brands`.`id` having date <= '2025-09-04 00:00:00' order by `date` desc, `employee_name` asc, `d_total` asc", "template": "brand_employees_sales", "sample_id": 2}
{"prompt": "Sales by delegate by delegated brand: Brand: Kool, moment, Leila Date: 17/09/2025", "completion": "select MIN(employees.name) as employee_name, orders.employee_id as employee_id, MIN(brands.name) as brand_name, brands.id as brand_id, SUM(order_product.total_delivered_price) as d_total, DATE(orders.start_time) as date from `orders` inner join `employees` on `orders`.`employee_id` = `employees`.`id` inner join `order_product` on `orders`.`id` = `order_product`.`order_id` inner join `products` on `order_product`.`product_id` = `products`.`id` inner join `brands` on `products`.`brand_id` = `brands`.`id` where exists (select * from `clients` where `orders`.`client_id` = `clients`.`id` and (((`clients`.`villes_id` in (5) and (`clients`.`route_id` is null or `clients`.`route_id` in (133))) or `clients`.`route_id` in (133)) or (`clients`.`user_group_id` in (23)))) and `orders`.`status` in ('DELIVERED', 'PARTIALDELIVERY') and 0 = 1 and `brand_id` in (3, 1, 8) group by `orders`.`employee_id`, `date`, `brands`.`id` having date >= '2025-09-17 00:00:00' order by `date` desc, `employee_name` asc, `d_total` asc", "template": "brand_employees_sales", "sample_id": 3}
{"prompt": "Sales by delegate by delegated brand:", "completion": "select MIN(employees.name) as employee_name, orders.employee_id as employee_id, MIN(brands.name) as brand_name, brands.id as brand_id, SUM(order_product.total_delivered_price) as d_total, DATE(orders.start_time) as date from `orders` inner join `employees` on `orders`.`employee_id` = `employees`.`id` inner join `order_product` on `orders`.`id` = `order_product`.`order_id` inner join `products` on `order_product`.`product_id` = `products`.`id` inner join `brands` on `products`.`brand_id` = `brands`.`id` where exists (select * from `clients` where `orders`.`client_id` = `clients`.`id` and (((`clients`.`villes_id` in (5) and (`clients`.`route_id` is null or `clients`.`route_id` in (133))) or `clients`.`route_id` in (133)) or (`clients`.`user_group_id` in (23)))) and `orders`.`status` in ('DELIVERED', 'PARTIALDELIVERY') and 0 = 1 group by `orders`.`employee_id`, `date`, `brands`.`id` order by `date` desc, `employee_name` asc, `d_total` asc", "template": "brand_employees_sales", "sample_id": 4}
{"prompt": "Sales by delegate by brand brand: Palmary, moment, Qaada Date: 17/09/2025", "completion": "select MIN(employees.name) as employee_name, orders.employee_id as employee_id, MIN(brands.name) as brand_name, brands.id as brand_id, SUM(order_product.total_delivered_price) as d_total, DATE(orders.start_time) as date from `orders` inner join `employees` on `orders`.`employee_id` = `employees`.`id` inner join `order_product` on `orders`.`id` = `order_product`.`order_id` inner join `products` on `order_product`.`product_id` = `products`.`id` inner join `brands` on `products`.`brand_id` = `brands`.`id` where exists (select * from `clients` where `orders`.`client_id` = `clients`.`id` and (((`clients`.`villes_id` in (5) and (`clients`.`route_id` is null or `clients`.`route_id` in (133))) or `clients`.`route_id` in (133)) or (`clients`.`user_group_id` in (23)))) and `orders`.`status` in ('DELIVERED', 'PARTIALDELIVERY') and `brand_id` in (5, 2, 3) group by `orders`.`employee_id`, `date`, `brands`.`id` having date <= '2025-09-17 00:00:00' order by `date` desc, `employee_name` asc, `d_total` asc", "template": "brand_employees_sales", "sample_id": 5}
{"prompt": "Sales by delivery man", "completion": "select MIN(employees.name) as employee_name, employees.id as employee_id, SUM(discounted_total) as total_ordered, SUM(delivered_total) as total_delivered, COUNT(CASE WHEN orders.status = \"DELIVERED\" THEN 1 END) as count_delivered, COUNT(CASE WHEN orders.status = \"PARTIALDELIVERY\" THEN 1 END) as count_partially_delivered, COUNT(CASE WHEN orders.status = \"CANCELED\" THEN 1 END) as count_canceled, COUNT(CASE WHEN orders.status IN (\"CANCELED\", \"DELIVERED\", \"PARTIALDELIVERY\") THEN 1 END) as count_total from `orders` inner join `employees` on `orders`.`delivery_employee_id` = `employees`.`id` and `employees`.`type` = 'DRIVER' where exists (select * from `clients` where `orders`.`client_id` = `clients`.`id` and (((`clients`.`villes_id` in (5) and (`clients`.`route_id` is null or `clients`.`route_id` in (133))) or `clients`.`route_id` in (133)) or (`clients`.`user_group_id` in (23)))) group by `employees`.`id` order by `employee_name` asc", "template": "drivers_sales_vs_ordered", "sample_id": 1}
{"prompt": "Sales by delivery man:", "completion": "select MIN(employees.name) as employee_name, employees.id as employee_id, SUM(discounted_total) as total_ordered, SUM(delivered_total) as total_delivered, COUNT(CASE WHEN orders.status = \"DELIVERED\" THEN 1 END) as count_delivered, COUNT(CASE WHEN orders.status = \"PARTIALDELIVERY\" THEN 1 END) as count_partially_delivered, COUNT(CASE WHEN orders.status = \"CANCELED\" THEN 1 END) as count_canceled, COUNT(CASE WHEN orders.status IN (\"CANCELED\", \"DELIVERED\", \"PARTIALDELIVERY\") THEN 1 END) as count_total from `orders` inner join `employees` on `orders`.`delivery_employee_id` = `employees`.`id` and `employees`.`type` = 'DRIVER' where exists (select * from `clients` where `orders`.`client_id` = `clients`.`id` and (((`clients`.`villes_id` in (5) and (`clients`.`route_id` is null or `clients`.`route_id` in (133))) or `clients`.`route_id` in (133)) or (`clients`.`user_group_id` in (23)))) and 0 = 1 group by `employees`.`id` order by `employee_name` asc", "template": "drivers_sales_vs_ordered", "sample_id": 2}
{"prompt": "Sales by delivery man: order date: 09/10/2025", "completion": "select MIN(employees.name) as employee_name, employees.id as employee_id, SUM(discounted_total) as total_ordered, SUM(delivered_total) as total_delivered, COUNT(CASE WHEN orders.status = \"DELIVERED\" THEN 1 END) as count_delivered, COUNT(CASE WHEN orders.status = \"PARTIALDELIVERY\" THEN 1 END) as count_partially_delivered, COUNT(CASE WHEN orders.status = \"CANCELED\" THEN 1 END) as count_canceled, COUNT(CASE WHEN orders.status IN (\"CANCELED\", \"DELIVERED\", \"PARTIALDELIVERY\") THEN 1 END) as count_total from `orders` inner join `employees` on `orders`.`delivery_employee_id` = `employees`.`id` and `employees`.`type` = 'DRIVER' where exists (select * from `clients` where `orders`.`client_id` = `clients`.`id` and (((`clients`.`villes_id` in (5) and (`clients`.`route_id` is null or `clients`.`route_id` in (133))) or `clients`.`route_id` in (133)) or (`clients`.`user_group_id` in (23)))) and 0 = 1 and date(`start_time`) <= '2025-10-09' group by `employees`.`id` order by `employee_name` asc", "template": "drivers_sales_vs_ordered", "sample_id": 3}
{"prompt": "Sales by delivery man: order date: 02/10/2025", "completion": "select MIN(employees.name) as employee_name, employees.id as employee_id, SUM(discounted_total) as total_ordered, SUM(delivered_total) as total_delivered, COUNT(CASE WHEN orders.status = \"DELIVERED\" THEN 1 END) as count_delivered, COUNT(CASE WHEN orders.status = \"PARTIALDELIVERY\" THEN 1 END) as count_partially_delivered, COUNT(CASE WHEN orders.status = \"CANCELED\" THEN 1 END) as count_canceled, COUNT(CASE WHEN orders.status IN (\"CANCELED\", \"DELIVERED\", \"PARTIALDELIVERY\") THEN 1 END) as count_total from `orders` inner join `employees` on `orders`.`delivery_employee_id` = `employees`.`id` and `employees`.`type` = 'DRIVER' where exists (select * from `clients` where `orders`.`client_id` = `clients`.`id` and (((`clients`.`villes_id` in (5) and (`clients`.`route_id` is null or `clients`.`route_id` in (133))) or `clients`.`route_id` in (133)) or (`clients`.`user_group_id` in (23)))) and 0 = 1 and date(`start_time`) >= '2025-10-02' group by `employees`.`id` order by `employee_name` asc", "template": "drivers_sales_vs_ordered", "sample_id": 4}
{"prompt": "Sales by delivery man:", "completion": "select MIN(employees.name) as employee_name, employees.id as employee_id, SUM(discounted_total) as total_ordered, SUM(delivered_total) as total_delivered, COUNT(CASE WHEN orders.status = \"DELIVERED\" THEN 1 END) as count_delivered, COUNT(CASE WHEN orders.status = \"PARTIALDELIVERY\" THEN 1 END) as count_partially_delivered, COUNT(CASE WHEN orders.status = \"CANCELED\" THEN 1 END) as count_canceled, COUNT(CASE WHEN orders.status IN (\"CANCELED\", \"DELIVERED\", \"PARTIALDELIVERY\") THEN 1 END) as count_total from `orders` inner join `employees` on `orders`.`delivery_employee_id` = `employees`.`id` and `employees`.`type` = 'DRIVER' where exists (select * from `clients` where `orders`.`client_id` = `clients`.`id` and (((`clients`.`villes_id` in (5) and (`clients`.`route_id` is null or `clients`.`route_id` in (133))) or `clients`.`route_id` in (133)) or (`clients`.`user_group_id` in (23)))) and 0 = 1 group by `employees`.`id` order by `employee_name` asc", "template": "drivers_sales_vs_ordered", "sample_id": 5}
{"prompt": "Visits", "completion": "select CASE WHEN SUM(planned_visits_query.planned_visits) = 0 THEN 0 ELSE SUM(accomplished_visits_query.accomplished_visits) / SUM(planned_visits_query.planned_visits) END as visit_rate, MIN(employees.name) as employee_name, employees.id as employee_id from `tours` inner join (select COUNT(client_visits.id) as accomplished_visits, client_visits.tour_delivery_id as tour_id from `tours` inner join `client_visits` on `tours`.`id` = `client_visits`.`tour_delivery_id` and `client_visits`.`within_schedule` = 1 where `tours`.`status` in ('COMPLETED', 'PARTIALLYCOMPLETED', 'FORCECLOSED') group by `client_visits`.`tour_delivery_id`) as `accomplished_visits_query` on `tours`.`id` = `accomplished_visits_query`.`tour_id` inner join (select COUNT(tour_client.client_id) as planned_visits, tour_client.tour_id as tour_id from `tours` inner join `tour_client` on `tours`.`id` = `tour_client`.`tour_id` where `tours`.`status` in ('COMPLETED', 'PARTIALLYCOMPLETED', 'FORCECLOSED') group by `tour_client`.`tour_id`) as `planned_visits_query` on `tours`.`id` = `planned_visits_query`.`tour_id` inner join `employees` on `tours`.`employee_id` = `employees`.`id` and `employees`.`type` in ('SELLER', 'CASHVAN') where `tours`.`status` in ('COMPLETED', 'PARTIALLYCOMPLETED', 'FORCECLOSED') group by `employees`.`id` order by `employee_name` asc", "template": "visits_rates", "sample_id": 1}
{"prompt": "Delegated rate of visits: Date: 29/09/2025", "completion": "select CASE WHEN SUM(planned_visits_query.planned_visits) = 0 THEN 0 ELSE SUM(accomplished_visits_query.accomplished_visits) / SUM(planned_visits_query.planned_visits) END as visit_rate, MIN(employees.name) as employee_name, employees.id as employee_id from `tours` inner join (select COUNT(client_visits.id) as accomplished_visits, client_visits.tour_delivery_id as tour_id from `tours` inner join `client_visits` on `tours`.`id` = `client_visits`.`tour_delivery_id` and `client_visits`.`within_schedule` = 1 where `tours`.`status` in ('COMPLETED', 'PARTIALLYCOMPLETED', 'FORCECLOSED') and 0 = 1 and date(`tours`.`date`) <= '2025-09-29' group by `client_visits`.`tour_delivery_id`) as `accomplished_visits_query` on `tours`.`id` = `accomplished_visits_query`.`tour_id` inner join (select COUNT(tour_client.client_id) as planned_visits, tour_client.tour_id as tour_id from `tours` inner join `tour_client` on `tours`.`id` = `tour_client`.`tour_id` where `tours`.`status` in ('COMPLETED', 'PARTIALLYCOMPLETED', 'FORCECLOSED') and 0 = 1 and date(`tours`.`date`) <= '2025-09-29' group by `tour_client`.`tour_id`) as `planned_visits_query` on `tours`.`id` = `planned_visits_query`.`tour_id` inner join `employees` on `tours`.`employee_id` = `employees`.`id` and `employees`.`type` in ('SELLER', 'CASHVAN') where `tours`.`status` in ('COMPLETED', 'PARTIALLYCOMPLETED', 'FORCECLOSED') and 0 = 1 and date(`tours`.`date`) <= '2025-09-29' group by `employees`.`id` order by `employee_name` asc", "template": "visits_rates", "sample_id": 2}
{"prompt": "Delegated visits rate: Date: 28/09/2025", "completion": "select CASE WHEN SUM(planned_visits_query.planned_visits) = 0 THEN 0 ELSE SUM(accomplished_visits_query.accomplished_visits) / SUM(planned_visits_query.planned_visits) END as visit_rate, MIN(employees.name) as employee_name, employees.id as employee_id from `tours` inner join (select COUNT(client_visits.id) as accomplished_visits, client_visits.tour_delivery_id as tour_id from `tours` inner join `client_visits` on `tours`.`id` = `client_visits`.`tour_delivery_id` and `client_visits`.`within_schedule` = 1 where `tours`.`status` in ('COMPLETED', 'PARTIALLYCOMPLETED', 'FORCECLOSED') and 0 = 1 and date(`tours`.`date`) <= '2025-09-28' group by `client_visits`.`tour_delivery_id`) as `accomplished_visits_query` on `tours`.`id` = `accomplished_visits_query`.`tour_id` inner join (select COUNT(tour_client.client_id) as planned_visits, tour_client.tour_id as tour_id from `tours` inner join `tour_client` on `tours`.`id` = `tour_client`.`tour_id` where `tours`.`status` in ('COMPLETED', 'PARTIALLYCOMPLETED', 'FORCECLOSED') and 0 = 1 and date(`tours`.`date`) <= '2025-09-28' group by `tour_client`.`tour_id`) as `planned_visits_query` on `tours`.`id` = `planned_visits_query`.`tour_id` inner join `employees` on `tours`.`employee_id` = `employees`.`id` and `employees`.`type` in ('SELLER', 'CASHVAN') where `tours`.`status` in ('COMPLETED', 'PARTIALLYCOMPLETED', 'FORCECLOSED') and 0 = 1 and date(`tours`.`date`) <= '2025-09-28' group by `employees`.`id` order by `employee_name` asc", "template": "visits_rates", "sample_id": 3}
{"prompt": "Visits rate Date: 21/10/2025", "completion": "select CASE WHEN SUM(planned_visits_query.planned_visits) = 0 THEN 0 ELSE SUM(accomplished_visits_query.accomplished_visits) / SUM(planned_visits_query.planned_visits) END as visit_rate, MIN(employees.name) as employee_name, employees.id as employee_id from `tours` inner join (select COUNT(client_visits.id) as accomplished_visits, client_visits.tour_delivery_id as tour_id from `tours` inner join `client_visits` on `tours`.`id` = `client_visits`.`tour_delivery_id` and `client_visits`.`within_schedule` = 1 where `tours`.`status` in ('COMPLETED', 'PARTIALLYCOMPLETED', 'FORCECLOSED') and date(`tours`.`date`) <= '2025-10-21' group by `client_visits`.`tour_delivery_id`) as `accomplished_visits_query` on `tours`.`id` = `accomplished_visits_query`.`tour_id` inner join (select COUNT(tour_client.client_id) as planned_visits, tour_client.tour_id as tour_id from `tours` inner join `tour_client` on `tours`.`id` = `tour_client`.`tour_id` where `tours`.`status` in ('COMPLETED', 'PARTIALLYCOMPLETED', 'FORCECLOSED') and date(`tours`.`date`) <= '2025-10-21' group by `tour_client`.`tour_id`) as `planned_visits_query` on `tours`.`id` = `planned_visits_query`.`tour_id` inner join `employees` on `tours`.`employee_id` = `employees`.`id` and `employees`.`type` in ('SELLER', 'CASHVAN') where `tours`.`status` in ('COMPLETED', 'PARTIALLYCOMPLETED', 'FORCECLOSED') and date(`tours`.`date`) <= '2025-10-21' group by `employees`.`id` order by `employee_name` asc", "template": "visits_rates", "sample_id": 4}
{"prompt": "Delegated rate of visits:", "completion": "select CASE WHEN SUM(planned_visits_query.planned_visits) = 0 THEN 0 ELSE SUM(accomplished_visits_query.accomplished_visits) / SUM(planned_visits_query.planned_visits) END as visit_rate, MIN(employees.name) as employee_name, employees.id as employee_id from `tours` inner join (select COUNT(client_visits.id) as accomplished_visits, client_visits.tour_delivery_id as tour_id from `tours` inner join `client_visits` on `tours`.`id` = `client_visits`.`tour_delivery_id` and `client_visits`.`within_schedule` = 1 where `tours`.`status` in ('COMPLETED', 'PARTIALLYCOMPLETED', 'FORCECLOSED') and 0 = 1 group by `client_visits`.`tour_delivery_id`) as `accomplished_visits_query` on `tours`.`id` = `accomplished_visits_query`.`tour_id` inner join (select COUNT(tour_client.client_id) as planned_visits, tour_client.tour_id as tour_id from `tours` inner join `tour_client` on `tours`.`id` = `tour_client`.`tour_id` where `tours`.`status` in ('COMPLETED', 'PARTIALLYCOMPLETED', 'FORCECLOSED') and 0 = 1 group by `tour_client`.`tour_id`) as `planned_visits_query` on `tours`.`id` = `planned_visits_query`.`tour_id` inner join `employees` on `tours`.`employee_id` = `employees`.`id` and `employees`.`type` in ('SELLER', 'CASHVAN') where `tours`.`status` in ('COMPLETED', 'PARTIALLYCOMPLETED', 'FORCECLOSED') and 0 = 1 group by `employees`.`id` order by `employee_name` asc", "template": "visits_rates", "sample_id": 5}
{"prompt": "Sales by delivery man on tour with return", "completion": "select `tours`.`id` as `tour_id`, `employees`.`id` as `employee_id`, MIN(employees.name) as employee_name, MIN(tours.creation_id) as tour_creation_id, MIN(tours.date) as tour_date, SUM(all_quantities_query.total_discounted_price) as total_discounted_price, SUM(all_quantities_query.total_delivered_price) as total_delivered_price, SUM(all_quantities_query.total_discounted_price) - SUM(all_quantities_query.total_delivered_price) as total_difference, SUM(all_quantities_query.unloaded_total) as unloaded_total, SUM(all_quantities_query.postponed_total) as postponed_total from `tours` inner join (select * from `tours` where exists (select * from `employees` where `tours`.`employee_id` = `employees`.`id` and ((exists (select * from `routes` where `employees`.`route_id` = `routes`.`id` and ((`routes`.`id` in (133) or `routes`.`user_group_id` in (23)))) or exists (select * from `warehouses` where `employees`.`warehouse_id` = `warehouses`.`id` and ((exists (select * from `core_villes` inner join `warehouse_ville` on `core_villes`.`id` = `warehouse_ville`.`villes_id` where `warehouses`.`id` = `warehouse_ville`.`warehouse_id` and `core_villes`.`id` in (5))) or (`warehouses`.`user_group_id` in (23)))))) and `employees`.`deleted_at` is null) and `tours`.`type` = 'DELIVERY' and `tours`.`status` in ('COMPLETED', 'FORCECLOSED', 'PARTIALLYCOMPLETED')) as `tours_query` on `tours`.`id` = `tours_query`.`id` inner join (select `ordered_quantities`.`tour_id` as `tour_id`, `products`.`id` as `product_id`, COALESCE(ordered_quantities.ordered_quantity, 0) as ordered_quantity, COALESCE(ordered_quantities.total_delivered_price, 0) as total_delivered_price, COALESCE(ordered_quantities.total_discounted_price, 0) as total_discounted_price, COALESCE(loaded_quantities.loaded_quantity, 0) as loaded_quantity, COALESCE(unloaded_quantities.unloaded_quantity, 0) as unloaded_quantity, COALESCE(postponed_quantities.postponed_quantity, 0) as postponed_quantity, COALESCE(CASE WHEN ordered_quantities.ordered_quantity <> 0 THEN ordered_quantities.total_discounted_price / ordered_quantities.ordered_quantity END, 0) as unloaded_unit_price, COALESCE(CASE WHEN ordered_quantities.ordered_quantity <> 0 THEN ordered_quantities.total_discounted_price / ordered_quantities.ordered_quantity * (unloaded_quantities.unloaded_quantity - COALESCE(postponed_quantities.postponed_quantity, 0)) END, 0) as unloaded_total, COALESCE(CASE WHEN ordered_quantities.ordered_quantity <> 0 THEN ordered_quantities.total_discounted_price / ordered_quantities.ordered_quantity END, 0) * COALESCE(postponed_quantities.postponed_quantity, 0) as postponed_total from `products` cross join `tours` left join (select `tours_query`.`id` as `tour_id`, `products`.`id` as `product_id`, SUM(order_product.quantity) as ordered_quantity, SUM(CASE WHEN orders.tour_delivery_id = order_tour_client.tour_id THEN order_product.total_delivered_price ELSE 0 END) as total_delivered_price, SUM(CASE WHEN order_product.quantity != 0 THEN order_product.total_discounted_price ELSE 0 END) as total_discounted_price from `products` inner join `order_product` on `products`.`id` = `order_product`.`product_id` inner join `order_tour_client` on `order_product`.`order_id` = `order_tour_client`.`order_id` inner join (select * from `tours` where exists (select * from `employees` where `tours`.`employee_id` = `employees`.`id` and ((exists (select * from `routes` where `employees`.`route_id` = `routes`.`id` and ((`routes`.`id` in (133) or `routes`.`user_group_id` in (23)))) or exists (select * from `warehouses` where `employees`.`warehouse_id` = `warehouses`.`id` and ((exists (select * from `core_villes` inner join `warehouse_ville` on `core_villes`.`id` = `warehouse_ville`.`villes_id` where `warehouses`.`id` = `warehouse_ville`.`warehouse_id` and `core_villes`.`id` in (5))) or (`warehouses`.`user_group_id` in (23)))))) and `employees`.`deleted_at` is null) and `tours`.`type` = 'DELIVERY' and `tours`.`status` in ('COMPLETED', 'FORCECLOSED', 'PARTIALLYCOMPLETED')) as `tours_query` on `order_tour_client`.`tour_id` = `tours_query`.`id` inner join `orders` on `orders`.`id` = `order_product`.`order_id` group by `products`.`id`, `tours_query`.`id`) as `ordered_quantities` on `products`.`id` = `ordered_quantities`.`product_id` and `tours`.`id` = `ordered_quantities`.`tour_id` left join (select `tours_query`.`id` as `tour_id`, `products`.`id` as `product_id`, SUM(load_products.loaded_quantity) as loaded_quantity from `products` inner join `load_products` on `products`.`id` = `load_products`.`product_id` inner join `loads` on `load_products`.`load_id` = `loads`.`id` and `loads`.`status` = 'ACCEPTED' inner join (select * from `tours` where exists (select * from `employees` where `tours`.`employee_id` = `employees`.`id` and ((exists (select * from `routes` where `employees`.`route_id` = `routes`.`id` and ((`routes`.`id` in (133) or `routes`.`user_group_id` in (23)))) or exists (select * from `warehouses` where `employees`.`warehouse_id` = `warehouses`.`id` and ((exists (select * from `core_villes` inner join `warehouse_ville` on `core_villes`.`id` = `warehouse_ville`.`villes_id` where `warehouses`.`id` = `warehouse_ville`.`warehouse_id` and `core_villes`.`id` in (5))) or (`warehouses`.`user_group_id` in (23)))))) and `employees`.`deleted_at` is null) and `tours`.`type` = 'DELIVERY' and `tours`.`status` in ('COMPLETED', 'FORCECLOSED', 'PARTIALLYCOMPLETED')) as `tours_query` on `loads`.`tour_id` = `tours_query`.`id` group by `products`.`id`, `tours_query`.`id`) as `loaded_quantities` on `products`.`id` = `loaded_quantities`.`product_id` and `tours`.`id` = `loaded_quantities`.`tour_id` left join (select `tours_query`.`id` as `tour_id`, `products`.`id` as `product_id`, SUM(unload_products.quantity) as unloaded_quantity from `products` inner join `unload_products` on `products`.`id` = `unload_products`.`product_id` inner join `unloads` on `unload_products`.`unload_id` = `unloads`.`id` and `unloads`.`status` = 'ACCEPTED' inner join (select * from `tours` where exists (select * from `employees` where `tours`.`employee_id` = `employees`.`id` and ((exists (select * from `routes` where `employees`.`route_id` = `routes`.`id` and ((`routes`.`id` in (133) or `routes`.`user_group_id` in (23)))) or exists (select * from `warehouses` where `employees`.`warehouse_id` = `warehouses`.`id` and ((exists (select * from `core_villes` inner join `warehouse_ville` on `core_villes`.`id` = `warehouse_ville`.`villes_id` where `warehouses`.`id` = `warehouse_ville`.`warehouse_id` and `core_villes`.`id` in (5))) or (`warehouses`.`user_group_id` in (23)))))) and `employees`.`deleted_at` is null) and `tours`.`type` = 'DELIVERY' and `tours`.`status` in ('COMPLETED', 'FORCECLOSED', 'PARTIALLYCOMPLETED')) as `tours_query` on `unloads`.`tour_id` = `tours_query`.`id` group by `products`.`id`, `tours_query`.`id`) as `unloaded_quantities` on `products`.`id` = `unloaded_quantities`.`product_id` and `tours`.`id` = `unloaded_quantities`.`tour_id` left join (select `tours_query`.`id` as `tour_id`, `products`.`id` as `product_id`, SUM(order_product.quantity) as postponed_quantity from `products` inner join `order_product` on `products`.`id` = `order_product`.`product_id` inner join `order_tour_client` on `order_product`.`order_id` = `order_tour_client`.`order_id` inner join (select * from `tours` where exists (select * from `employees` where `tours`.`employee_id` = `employees`.`id` and ((exists (select * from `routes` where `employees`.`route_id` = `routes`.`id` and ((`routes`.`id` in (133) or `routes`.`user_group_id` in (23)))) or exists (select * from `warehouses` where `employees`.`warehouse_id` = `warehouses`.`id` and ((exists (select * from `core_villes` inner join `warehouse_ville` on `core_villes`.`id` = `warehouse_ville`.`villes_id` where `warehouses`.`id` = `warehouse_ville`.`warehouse_id` and `core_villes`.`id` in (5))) or (`warehouses`.`user_group_id` in (23)))))) and `employees`.`deleted_at` is null) and `tours`.`type` = 'DELIVERY' and `tours`.`status` in ('COMPLETED', 'FORCECLOSED', 'PARTIALLYCOMPLETED')) as `tours_query` on `order_tour_client`.`tour_id` = `tours_query`.`id` inner join `orders` on `orders`.`id` = `order_product`.`order_id` where `orders`.`tour_delivery_id` is not null and (`orders`.`tour_delivery_id` != `order_tour_client`.`tour_id` or (`orders`.`status` not in ('DELIVERED', 'PARTIALDELIVERY', 'CANCELED'))) group by `products`.`id`, `tours_query`.`id`) as `postponed_quantities` on `products`.`id` = `postponed_quantities`.`product_id` and `tours`.`id` = `postponed_quantities`.`tour_id` where (`ordered_quantities`.`ordered_quantity` > 0 or `loaded_quantities`.`loaded_quantity` > 0 or `unloaded_quantities`.`unloaded_quantity` > 0)) as `all_quantities_query` on `tours`.`id` = `all_quantities_query`.`tour_id` inner join `employees` on `tours`.`employee_id` = `employees`.`id` and `employees`.`type` = 'DRIVER' group by `tours`.`id`, `employees`.`id` order by `employee_name` asc, `tours`.`id` desc", "template": "drivers_sales_vs_ordered_with_missed", "sample_id": 1}
{"prompt": "Sales by delivery man on tour with return delivery man:", "completion": "select `tours`.`id` as `tour_id`, `employees`.`id` as `employee_id`, MIN(employees.name) as employee_name, MIN(tours.creation_id) as tour_creation_id, MIN(tours.date) as tour_date, SUM(all_quantities_query.total_discounted_price) as total_discounted_price, SUM(all_quantities_query.total_delivered_price) as total_delivered_price, SUM(all_quantities_query.total_discounted_price) - SUM(all_quantities_query.total_delivered_price) as total_difference, SUM(all_quantities_query.unloaded_total) as unloaded_total, SUM(all_quantities_query.postponed_total) as postponed_total from `tours` inner join (select * from `tours` where exists (select * from `employees` where `tours`.`employee_id` = `employees`.`id` and ((exists (select * from `routes` where `employees`.`route_id` = `routes`.`id` and ((`routes`.`id` in (133) or `routes`.`user_group_id` in (23)))) or exists (select * from `warehouses` where `employees`.`warehouse_id` = `warehouses`.`id` and ((exists (select * from `core_villes` inner join `warehouse_ville` on `core_villes`.`id` = `warehouse_ville`.`villes_id` where `warehouses`.`id` = `warehouse_ville`.`warehouse_id` and `core_villes`.`id` in (5))) or (`warehouses`.`user_group_id` in (23)))))) and `employees`.`deleted_at` is null) and `tours`.`type` = 'DELIVERY' and `tours`.`status` in ('COMPLETED', 'FORCECLOSED', 'PARTIALLYCOMPLETED') and 0 = 1) as `tours_query` on `tours`.`id` = `tours_query`.`id` inner join (select `ordered_quantities`.`tour_id` as `tour_id`, `products`.`id` as `product_id`, COALESCE(ordered_quantities.ordered_quantity, 0) as ordered_quantity, COALESCE(ordered_quantities.total_delivered_price, 0) as total_delivered_price, COALESCE(ordered_quantities.total_discounted_price, 0) as total_discounted_price, COALESCE(loaded_quantities.loaded_quantity, 0) as loaded_quantity, COALESCE(unloaded_quantities.unloaded_quantity, 0) as unloaded_quantity, COALESCE(postponed_quantities.postponed_quantity, 0) as postponed_quantity, COALESCE(CASE WHEN ordered_quantities.ordered_quantity <> 0 THEN ordered_quantities.total_discounted_price / ordered_quantities.ordered_quantity END, 0) as unloaded_unit_price, COALESCE(CASE WHEN ordered_quantities.ordered_quantity <> 0 THEN ordered_quantities.total_discounted_price / ordered_quantities.ordered_quantity * (unloaded_quantities.unloaded_quantity - COALESCE(postponed_quantities.postponed_quantity, 0)) END, 0) as unloaded_total, COALESCE(CASE WHEN ordered_quantities.ordered_quantity <> 0 THEN ordered_quantities.total_discounted_price / ordered_quantities.ordered_quantity END, 0) * COALESCE(postponed_quantities.postponed_quantity, 0) as postponed_total from `products` cross join `tours` left join (select `tours_query`.`id` as `tour_id`, `products`.`id` as `product_id`, SUM(order_product.quantity) as ordered_quantity, SUM(CASE WHEN orders.tour_delivery_id = order_tour_client.tour_id THEN order_product.total_delivered_price ELSE 0 END) as total_delivered_price, SUM(CASE WHEN order_product.quantity != 0 THEN order_product.total_discounted_price ELSE 0 END) as total_discounted_price from `products` inner join `order_product` on `products`.`id` = `order_product`.`product_id` inner join `order_tour_client` on `order_product`.`order_id` = `order_tour_client`.`order_id` inner join (select * from `tours` where exists (select * from `employees` where `tours`.`employee_id` = `employees`.`id` and ((exists (select * from `routes` where `employees`.`route_id` = `routes`.`id` and ((`routes`.`id` in (133) or `routes`.`user_group_id` in (23)))) or exists (select * from `warehouses` where `employees`.`warehouse_id` = `warehouses`.`id` and ((exists (select * from `core_villes` inner join `warehouse_ville` on `core_villes`.`id` = `warehouse_ville`.`villes_id` where `warehouses`.`id` = `warehouse_ville`.`warehouse_id` and `core_villes`.`id` in (5))) or (`warehouses`.`user_group_id` in (23)))))) and `employees`.`deleted_at` is null) and `tours`.`type` = 'DELIVERY' and `tours`.`status` in ('COMPLETED', 'FORCECLOSED', 'PARTIALLYCOMPLETED') and 0 = 1) as `tours_query` on `order_tour_client`.`tour_id` = `tours_query`.`id` inner join `orders` on `orders`.`id` = `order_product`.`order_id` group by `products`.`id`, `tours_query`.`id`) as `ordered_quantities` on `products`.`id` = `ordered_quantities`.`product_id` and `tours`.`id` = `ordered_quantities`.`tour_id` left join (select `tours_query`.`id` as `tour_id`, `products`.`id` as `product_id`, SUM(load_products.loaded_quantity) as loaded_quantity from `products` inner join `load_products` on `products`.`id` = `load_products`.`product_id` inner join `loads` on `load_products`.`load_id` = `loads`.`id` and `loads`.`status` = 'ACCEPTED' inner join (select * from `tours` where exists (select * from `employees` where `tours`.`employee_id` = `employees`.`id` and ((exists (select * from `routes` where `employees`.`route_id` = `routes`.`id` and ((`routes`.`id` in (133) or `routes`.`user_group_id` in (23)))) or exists (select * from `warehouses` where `employees`.`warehouse_id` = `warehouses`.`id` and ((exists (select * from `core_villes` inner join `warehouse_ville` on `core_villes`.`id` = `warehouse_ville`.`villes_id` where `warehouses`.`id` = `warehouse_ville`.`warehouse_id` and `core_villes`.`id` in (5))) or (`warehouses`.`user_group_id` in (23)))))) and `employees`.`deleted_at` is null) and `tours`.`type` = 'DELIVERY' and `tours`.`status` in ('COMPLETED', 'FORCECLOSED', 'PARTIALLYCOMPLETED') and 0 = 1) as `tours_query` on `loads`.`tour_id` = `tours_query`.`id` group by `products`.`id`, `tours_query`.`id`) as `loaded_quantities` on `products`.`id` = `loaded_quantities`.`product_id` and `tours`.`id` = `loaded_quantities`.`tour_id` left join (select `tours_query`.`id` as `tour_id`, `products`.`id` as `product_id`, SUM(unload_products.quantity) as unloaded_quantity from `products` inner join `unload_products` on `products`.`id` = `unload_products`.`product_id` inner join `unloads` on `unload_products`.`unload_id` = `unloads`.`id` and `unloads`.`status` = 'ACCEPTED' inner join (select * from `tours` where exists (select * from `employees` where `tours`.`employee_id` = `employees`.`id` and ((exists (select * from `routes` where `employees`.`route_id` = `routes`.`id` and ((`routes`.`id` in (133) or `routes`.`user_group_id` in (23)))) or exists (select * from `warehouses` where `employees`.`warehouse_id` = `warehouses`.`id` and ((exists (select * from `core_villes` inner join `warehouse_ville` on `core_villes`.`id` = `warehouse_ville`.`villes_id` where `warehouses`.`id` = `warehouse_ville`.`warehouse_id` and `core_villes`.`id` in (5))) or (`warehouses`.`user_group_id` in (23)))))) and `employees`.`deleted_at` is null) and `tours`.`type` = 'DELIVERY' and `tours`.`status` in ('COMPLETED', 'FORCECLOSED', 'PARTIALLYCOMPLETED') and 0 = 1) as `tours_query` on `unloads`.`tour_id` = `tours_query`.`id` group by `products`.`id`, `tours_query`.`id`) as `unloaded_quantities` on `products`.`id` = `unloaded_quantities`.`product_id` and `tours`.`id` = `unloaded_quantities`.`tour_id` left join (select `tours_query`.`id` as `tour_id`, `products`.`id` as `product_id`, SUM(order_product.quantity) as postponed_quantity from `products` inner join `order_product` on `products`.`id` = `order_product`.`product_id` inner join `order_tour_client` on `order_product`.`order_id` = `order_tour_client`.`order_id` inner join (select * from `tours` where exists (select * from `employees` where `tours`.`employee_id` = `employees`.`id` and ((exists (select * from `routes` where `employees`.`route_id` = `routes`.`id` and ((`routes`.`id` in (133) or `routes`.`user_group_id` in (23)))) or exists (select * from `warehouses` where `employees`.`warehouse_id` = `warehouses`.`id` and ((exists (select * from `core_villes` inner join `warehouse_ville` on `core_villes`.`id` = `warehouse_ville`.`villes_id` where `warehouses`.`id` = `warehouse_ville`.`warehouse_id` and `core_villes`.`id` in (5))) or (`warehouses`.`user_group_id` in (23)))))) and `employees`.`deleted_at` is null) and `tours`.`type` = 'DELIVERY' and `tours`.`status` in ('COMPLETED', 'FORCECLOSED', 'PARTIALLYCOMPLETED') and 0 = 1) as `tours_query` on `order_tour_client`.`tour_id` = `tours_query`.`id` inner join `orders` on `orders`.`id` = `order_product`.`order_id` where `orders`.`tour_delivery_id` is not null and (`orders`.`tour_delivery_id` != `order_tour_client`.`tour_id` or (`orders`.`status` not in ('DELIVERED', 'PARTIALDELIVERY', 'CANCELED'))) group by `products`.`id`, `tours_query`.`id`) as `postponed_quantities` on `products`.`id` = `postponed_quantities`.`product_id` and `tours`.`id` = `postponed_quantities`.`tour_id` where (`ordered_quantities`.`ordered_quantity` > 0 or `loaded_quantities`.`loaded_quantity` > 0 or `unloaded_quantities`.`unloaded_quantity` > 0)) as `all_quantities_query` on `tours`.`id` = `all_quantities_query`.`tour_id` inner join `employees` on `tours`.`employee_id` = `employees`.`id` and `employees`.`type` = 'DRIVER' group by `tours`.`id`, `employees`.`id` order by `employee_name` asc, `tours`.`id` desc", "template": "drivers_sales_vs_ordered_with_missed", "sample_id": 2}
{"prompt": "Sales by delivery man on tour with return delivery man: the warehouse: Date: 13/09/2025", "completion": "select `tours`.`id` as `tour_id`, `employees`.`id` as `employee_id`, MIN(employees.name) as employee_name, MIN(tours.creation_id) as tour_creation_id, MIN(tours.date) as tour_date, SUM(all_quantities_query.total_discounted_price) as total_discounted_price, SUM(all_quantities_query.total_delivered_price) as total_delivered_price, SUM(all_quantities_query.total_discounted_price) - SUM(all_quantities_query.total_delivered_price) as total_difference, SUM(all_quantities_query.unloaded_total) as unloaded_total, SUM(all_quantities_query.postponed_total) as postponed_total from `tours` inner join (select * from `tours` where exists (select * from `employees` where `tours`.`employee_id` = `employees`.`id` and ((exists (select * from `routes` where `employees`.`route_id` = `routes`.`id` and ((`routes`.`id` in (133) or `routes`.`user_group_id` in (23)))) or exists (select * from `warehouses` where `employees`.`warehouse_id` = `warehouses`.`id` and ((exists (select * from `core_villes` inner join `warehouse_ville` on `core_villes`.`id` = `warehouse_ville`.`villes_id` where `warehouses`.`id` = `warehouse_ville`.`warehouse_id` and `core_villes`.`id` in (5))) or (`warehouses`.`user_group_id` in (23)))))) and `employees`.`deleted_at` is null) and `tours`.`type` = 'DELIVERY' and `tours`.`status` in ('COMPLETED', 'FORCECLOSED', 'PARTIALLYCOMPLETED') and 0 = 1 and 0 = 1 and date(`date`) <= '2025-09-13') as `tours_query` on `tours`.`id` = `tours_query`.`id` inner join (select `ordered_quantities`.`tour_id` as `tour_id`, `products`.`id` as `product_id`, COALESCE(ordered_quantities.ordered_quantity, 0) as ordered_quantity, COALESCE(ordered_quantities.total_delivered_price, 0) as total_delivered_price, COALESCE(ordered_quantities.total_discounted_price, 0) as total_discounted_price, COALESCE(loaded_quantities.loaded_quantity, 0) as loaded_quantity, COALESCE(unloaded_quantities.unloaded_quantity, 0) as unloaded_quantity, COALESCE(postponed_quantities.postponed_quantity, 0) as postponed_quantity, COALESCE(CASE WHEN ordered_quantities.ordered_quantity <> 0 THEN ordered_quantities.total_discounted_price / ordered_quantities.ordered_quantity END, 0) as unloaded_unit_price, COALESCE(CASE WHEN ordered_quantities.ordered_quantity <> 0 THEN ordered_quantities.total_discounted_price / ordered_quantities.ordered_quantity * (unloaded_quantities.unloaded_quantity - COALESCE(postponed_quantities.postponed_quantity, 0)) END, 0) as unloaded_total, COALESCE(CASE WHEN ordered_quantities.ordered_quantity <> 0 THEN ordered_quantities.total_discounted_price / ordered_quantities.ordered_quantity END, 0) * COALESCE(postponed_quantities.postponed_quantity, 0) as postponed_total from `products` cross join `tours` left join (select `tours_query`.`id` as `tour_id`, `products`.`id` as `product_id`, SUM(order_product.quantity) as ordered_quantity, SUM(CASE WHEN orders.tour_delivery_id = order_tour_client.tour_id THEN order_product.total_delivered_price ELSE 0 END) as total_delivered_price, SUM(CASE WHEN order_product.quantity != 0 THEN order_product.total_discounted_price ELSE 0 END) as total_discounted_price from `products` inner join `order_product` on `products`.`id` = `order_product`.`product_id` inner join `order_tour_client` on `order_product`.`order_id` = `order_tour_client`.`order_id` inner join (select * from `tours` where exists (select * from `employees` where `tours`.`employee_id` = `employees`.`id` and ((exists (select * from `routes` where `employees`.`route_id` = `routes`.`id` and ((`routes`.`id` in (133) or `routes`.`user_group_id` in (23)))) or exists (select * from `warehouses` where `employees`.`warehouse_id` = `warehouses`.`id` and ((exists (select * from `core_villes` inner join `warehouse_ville` on `core_villes`.`id` = `warehouse_ville`.`villes_id` where `warehouses`.`id` = `warehouse_ville`.`warehouse_id` and `core_villes`.`id` in (5))) or (`warehouses`.`user_group_id` in (23)))))) and `employees`.`deleted_at` is null) and `tours`.`type` = 'DELIVERY' and `tours`.`status` in ('COMPLETED', 'FORCECLOSED', 'PARTIALLYCOMPLETED') and 0 = 1 and 0 = 1 and date(`date`) <= '2025-09-13') as `tours_query` on `order_tour_client`.`tour_id` = `tours_query`.`id` inner join `orders` on `orders`.`id` = `order_product`.`order_id` group by `products`.`id`, `tours_query`.`id`) as `ordered_quantities` on `products`.`id` = `ordered_quantities`.`product_id` and `tours`.`id` = `ordered_quantities`.`tour_id` left join (select `tours_query`.`id` as `tour_id`, `products`.`id` as `product_id`, SUM(load_products.loaded_quantity) as loaded_quantity from `products` inner join `load_products` on `products`.`id` = `load_products`.`product_id` inner join `loads` on `load_products`.`load_id` = `loads`.`id` and `loads`.`status` = 'ACCEPTED' inner join (select * from `tours` where exists (select * from `employees` where `tours`.`employee_id` = `employees`.`id` and ((exists (select * from `routes` where `employees`.`route_id` = `routes`.`id` and ((`routes`.`id` in (133) or `routes`.`user_group_id` in (23)))) or exists (select * from `warehouses` where `employees`.`warehouse_id` = `warehouses`.`id` and ((exists (select * from `core_villes` inner join `warehouse_ville` on `core_villes`.`id` = `warehouse_ville`.`villes_id` where `warehouses`.`id` = `warehouse_ville`.`warehouse_id` and `core_villes`.`id` in (5))) or (`warehouses`.`user_group_id` in (23)))))) and `employees`.`deleted_at` is null) and `tours`.`type` = 'DELIVERY' and `tours`.`status` in ('COMPLETED', 'FORCECLOSED', 'PARTIALLYCOMPLETED') and 0 = 1 and 0 = 1 and date(`date`) <= '2025-09-13') as `tours_query` on `loads`.`tour_id` = `tours_query`.`id` group by `products`.`id`, `tours_query`.`id`) as `loaded_quantities` on `products`.`id` = `loaded_quantities`.`product_id` and `tours`.`id` = `loaded_quantities`.`tour_id` left join (select `tours_query`.`id` as `tour_id`, `products`.`id` as `product_id`, SUM(unload_products.quantity) as unloaded_quantity from `products` inner join `unload_products` on `products`.`id` = `unload_products`.`product_id` inner join `unloads` on `unload_products`.`unload_id` = `unloads`.`id` and `unloads`.`status` = 'ACCEPTED' inner join (select * from `tours` where exists (select * from `employees` where `tours`.`employee_id` = `employees`.`id` and ((exists (select * from `routes` where `employees`.`route_id` = `routes`.`id` and ((`routes`.`id` in (133) or `routes`.`user_group_id` in (23)))) or exists (select * from `warehouses` where `employees`.`warehouse_id` = `warehouses`.`id` and ((exists (select * from `core_villes` inner join `warehouse_ville` on `core_villes`.`id` = `warehouse_ville`.`villes_id` where `warehouses`.`id` = `warehouse_ville`.`warehouse_id` and `core_villes`.`id` in (5))) or (`warehouses`.`user_group_id` in (23)))))) and `employees`.`deleted_at` is null) and `tours`.`type` = 'DELIVERY' and `tours`.`status` in ('COMPLETED', 'FORCECLOSED', 'PARTIALLYCOMPLETED') and 0 = 1 and 0 = 1 and date(`date`) <= '2025-09-13') as `tours_query` on `unloads`.`tour_id` = `tours_query`.`id` group by `products`.`id`, `tours_query`.`id`) as `unloaded_quantities` on `products`.`id` = `unloaded_quantities`.`product_id` and `tours`.`id` = `unloaded_quantities`.`tour_id` left join (select `tours_query`.`id` as `tour_id`, `products`.`id` as `product_id`, SUM(order_product.quantity) as postponed_quantity from `products` inner join `order_product` on `products`.`id` = `order_product`.`product_id` inner join `order_tour_client` on `order_product`.`order_id` = `order_tour_client`.`order_id` inner join (select * from `tours` where exists (select * from `employees` where `tours`.`employee_id` = `employees`.`id` and ((exists (select * from `routes` where `employees`.`route_id` = `routes`.`id` and ((`routes`.`id` in (133) or `routes`.`user_group_id` in (23)))) or exists (select * from `warehouses` where `employees`.`warehouse_id` = `warehouses`.`id` and ((exists (select * from `core_villes` inner join `warehouse_ville` on `core_villes`.`id` = `warehouse_ville`.`villes_id` where `warehouses`.`id` = `warehouse_ville`.`warehouse_id` and `core_villes`.`id` in (5))) or (`warehouses`.`user_group_id` in (23)))))) and `employees`.`deleted_at` is null) and `tours`.`type` = 'DELIVERY' and `tours`.`status` in ('COMPLETED', 'FORCECLOSED', 'PARTIALLYCOMPLETED') and 0 = 1 and 0 = 1 and date(`date`) <= '2025-09-13') as `tours_query` on `order_tour_client`.`tour_id` = `tours_query`.`id` inner join `orders` on `orders`.`id` = `order_product`.`order_id` where `orders`.`tour_delivery_id` is not null and (`orders`.`tour_delivery_id` != `order_tour_client`.`tour_id` or (`orders`.`status` not in ('DELIVERED', 'PARTIALDELIVERY', 'CANCELED'))) group by `products`.`id`, `tours_query`.`id`) as `postponed_quantities` on `products`.`id` = `postponed_quantities`.`product_id` and `tours`.`id` = `postponed_quantities`.`tour_id` where (`ordered_quantities`.`ordered_quantity` > 0 or `loaded_quantities`.`loaded_quantity` > 0 or `unloaded_quantities`.`unloaded_quantity` > 0)) as `all_quantities_query` on `tours`.`id` = `all_quantities_query`.`tour_id` inner join `employees` on `tours`.`employee_id` = `employees`.`id` and `employees`.`type` = 'DRIVER' group by `tours`.`id`, `employees`.`id` order by `employee_name` asc, `tours`.`id` desc", "template": "drivers_sales_vs_ordered_with_missed", "sample_id": 3}
{"prompt": "Sales by delivery man on tour with return delivery man: the warehouse: Date: 23/11/2025", "completion": "select `tours`.`id` as `tour_id`, `employees`.`id` as `employee_id`, MIN(employees.name) as employee_name, MIN(tours.creation_id) as tour_creation_id, MIN(tours.date) as tour_date, SUM(all_quantities_query.total_discounted_price) as total_discounted_price, SUM(all_quantities_query.total_delivered_price) as total_delivered_price, SUM(all_quantities_query.total_discounted_price) - SUM(all_quantities_query.total_delivered_price) as total_difference, SUM(all_quantities_query.unloaded_total) as unloaded_total, SUM(all_quantities_query.postponed_total) as postponed_total from `tours` inner join (select * from `tours` where exists (select * from `employees` where `tours`.`employee_id` = `employees`.`id` and ((exists (select * from `routes` where `employees`.`route_id` = `routes`.`id` and ((`routes`.`id` in (133) or `routes`.`user_group_id` in (23)))) or exists (select * from `warehouses` where `employees`.`warehouse_id` = `warehouses`.`id` and ((exists (select * from `core_villes` inner join `warehouse_ville` on `core_villes`.`id` = `warehouse_ville`.`villes_id` where `warehouses`.`id` = `warehouse_ville`.`warehouse_id` and `core_villes`.`id` in (5))) or (`warehouses`.`user_group_id` in (23)))))) and `employees`.`deleted_at` is null) and `tours`.`type` = 'DELIVERY' and `tours`.`status` in ('COMPLETED', 'FORCECLOSED', 'PARTIALLYCOMPLETED') and 0 = 1 and 0 = 1 and date(`date`) = '2025-10-23') as `tours_query` on `tours`.`id` = `tours_query`.`id` inner join (select `ordered_quantities`.`tour_id` as `tour_id`, `products`.`id` as `product_id`, COALESCE(ordered_quantities.ordered_quantity, 0) as ordered_quantity, COALESCE(ordered_quantities.total_delivered_price, 0) as total_delivered_price, COALESCE(ordered_quantities.total_discounted_price, 0) as total_discounted_price, COALESCE(loaded_quantities.loaded_quantity, 0) as loaded_quantity, COALESCE(unloaded_quantities.unloaded_quantity, 0) as unloaded_quantity, COALESCE(postponed_quantities.postponed_quantity, 0) as postponed_quantity, COALESCE(CASE WHEN ordered_quantities.ordered_quantity <> 0 THEN ordered_quantities.total_discounted_price / ordered_quantities.ordered_quantity END, 0) as unloaded_unit_price, COALESCE(CASE WHEN ordered_quantities.ordered_quantity <> 0 THEN ordered_quantities.total_discounted_price / ordered_quantities.ordered_quantity * (unloaded_quantities.unloaded_quantity - COALESCE(postponed_quantities.postponed_quantity, 0)) END, 0) as unloaded_total, COALESCE(CASE WHEN ordered_quantities.ordered_quantity <> 0 THEN ordered_quantities.total_discounted_price / ordered_quantities.ordered_quantity END, 0) * COALESCE(postponed_quantities.postponed_quantity, 0) as postponed_total from `products` cross join `tours` left join (select `tours_query`.`id` as `tour_id`, `products`.`id` as `product_id`, SUM(order_product.quantity) as ordered_quantity, SUM(CASE WHEN orders.tour_delivery_id = order_tour_client.tour_id THEN order_product.total_delivered_price ELSE 0 END) as total_delivered_price, SUM(CASE WHEN order_product.quantity != 0 THEN order_product.total_discounted_price ELSE 0 END) as total_discounted_price from `products` inner join `order_product` on `products`.`id` = `order_product`.`product_id` inner join `order_tour_client` on `order_product`.`order_id` = `order_tour_client`.`order_id` inner join (select * from `tours` where exists (select * from `employees` where `tours`.`employee_id` = `employees`.`id` and ((exists (select * from `routes` where `employees`.`route_id` = `routes`.`id` and ((`routes`.`id` in (133) or `routes`.`user_group_id` in (23)))) or exists (select * from `warehouses` where `employees`.`warehouse_id` = `warehouses`.`id` and ((exists (select * from `core_villes` inner join `warehouse_ville` on `core_villes`.`id` = `warehouse_ville`.`villes_id` where `warehouses`.`id` = `warehouse_ville`.`warehouse_id` and `core_villes`.`id` in (5))) or (`warehouses`.`user_group_id` in (23)))))) and `employees`.`deleted_at` is null) and `tours`.`type` = 'DELIVERY' and `tours`.`status` in ('COMPLETED', 'FORCECLOSED', 'PARTIALLYCOMPLETED') and 0 = 1 and 0 = 1 and date(`date`) = '2025-10-23') as `tours_query` on `order_tour_client`.`tour_id` = `tours_query`.`id` inner join `orders` on `orders`.`id` = `order_product`.`order_id` group by `products`.`id`, `tours_query`.`id`) as `ordered_quantities` on `products`.`id` = `ordered_quantities`.`product_id` and `tours`.`id` = `ordered_quantities`.`tour_id` left join (select `tours_query`.`id` as `tour_id`, `products`.`id` as `product_id`, SUM(load_products.loaded_quantity) as loaded_quantity from `products` inner join `load_products` on `products`.`id` = `load_products`.`product_id` inner join `loads` on `load_products`.`load_id` = `loads`.`id` and `loads`.`status` = 'ACCEPTED' inner join (select * from `tours` where exists (select * from `employees` where `tours`.`employee_id` = `employees`.`id` and ((exists (select * from `routes` where `employees`.`route_id` = `routes`.`id` and ((`routes`.`id` in (133) or `routes`.`user_group_id` in (23)))) or exists (select * from `warehouses` where `employees`.`warehouse_id` = `warehouses`.`id` and ((exists (select * from `core_villes` inner join `warehouse_ville` on `core_villes`.`id` = `warehouse_ville`.`villes_id` where `warehouses`.`id` = `warehouse_ville`.`warehouse_id` and `core_villes`.`id` in (5))) or (`warehouses`.`user_group_id` in (23)))))) and `employees`.`deleted_at` is null) and `tours`.`type` = 'DELIVERY' and `tours`.`status` in ('COMPLETED', 'FORCECLOSED', 'PARTIALLYCOMPLETED') and 0 = 1 and 0 = 1 and date(`date`) = '2025-10-23') as `tours_query` on `loads`.`tour_id` = `tours_query`.`id` group by `products`.`id`, `tours_query`.`id`) as `loaded_quantities` on `products`.`id` = `loaded_quantities`.`product_id` and `tours`.`id` = `loaded_quantities`.`tour_id` left join (select `tours_query`.`id` as `tour_id`, `products`.`id` as `product_id`, SUM(unload_products.quantity) as unloaded_quantity from `products` inner join `unload_products` on `products`.`id` = `unload_products`.`product_id` inner join `unloads` on `unload_products`.`unload_id` = `unloads`.`id` and `unloads`.`status` = 'ACCEPTED' inner join (select * from `tours` where exists (select * from `employees` where `tours`.`employee_id` = `employees`.`id` and ((exists (select * from `routes` where `employees`.`route_id` = `routes`.`id` and ((`routes`.`id` in (133) or `routes`.`user_group_id` in (23)))) or exists (select * from `warehouses` where `employees`.`warehouse_id` = `warehouses`.`id` and ((exists (select * from `core_villes` inner join `warehouse_ville` on `core_villes`.`id` = `warehouse_ville`.`villes_id` where `warehouses`.`id` = `warehouse_ville`.`warehouse_id` and `core_villes`.`id` in (5))) or (`warehouses`.`user_group_id` in (23)))))) and `employees`.`deleted_at` is null) and `tours`.`type` = 'DELIVERY' and `tours`.`status` in ('COMPLETED', 'FORCECLOSED', 'PARTIALLYCOMPLETED') and 0 = 1 and 0 = 1 and date(`date`) = '2025-10-23') as `tours_query` on `unloads`.`tour_id` = `tours_query`.`id` group by `products`.`id`, `tours_query`.`id`) as `unloaded_quantities` on `products`.`id` = `unloaded_quantities`.`product_id` and `tours`.`id` = `unloaded_quantities`.`tour_id` left join (select `tours_query`.`id` as `tour_id`, `products`.`id` as `product_id`, SUM(order_product.quantity) as postponed_quantity from `products` inner join `order_product` on `products`.`id` = `order_product`.`product_id` inner join `order_tour_client` on `order_product`.`order_id` = `order_tour_client`.`order_id` inner join (select * from `tours` where exists (select * from `employees` where `tours`.`employee_id` = `employees`.`id` and ((exists (select * from `routes` where `employees`.`route_id` = `routes`.`id` and ((`routes`.`id` in (133) or `routes`.`user_group_id` in (23)))) or exists (select * from `warehouses` where `employees`.`warehouse_id` = `warehouses`.`id` and ((exists (select * from `core_villes` inner join `warehouse_ville` on `core_villes`.`id` = `warehouse_ville`.`villes_id` where `warehouses`.`id` = `warehouse_ville`.`warehouse_id` and `core_villes`.`id` in (5))) or (`warehouses`.`user_group_id` in (23)))))) and `employees`.`deleted_at` is null) and `tours`.`type` = 'DELIVERY' and `tours`.`status` in ('COMPLETED', 'FORCECLOSED', 'PARTIALLYCOMPLETED') and 0 = 1 and 0 = 1 and date(`date`) = '2025-10-23') as `tours_query` on `order_tour_client`.`tour_id` = `tours_query`.`id` inner join `orders` on `orders`.`id` = `order_product`.`order_id` where `orders`.`tour_delivery_id` is not null and (`orders`.`tour_delivery_id` != `order_tour_client`.`tour_id` or (`orders`.`status` not in ('DELIVERED', 'PARTIALDELIVERY', 'CANCELED'))) group by `products`.`id`, `tours_query`.`id`) as `postponed_quantities` on `products`.`id` = `postponed_quantities`.`product_id` and `tours`.`id` = `postponed_quantities`.`tour_id` where (`ordered_quantities`.`ordered_quantity` > 0 or `loaded_quantities`.`loaded_quantity` > 0 or `unloaded_quantities`.`unloaded_quantity` > 0)) as `all_quantities_query` on `tours`.`id` = `all_quantities_query`.`tour_id` inner join `employees` on `tours`.`employee_id` = `employees`.`id` and `employees`.`type` = 'DRIVER' group by `tours`.`id`, `employees`.`id` order by `employee_name` asc, `tours`.`id` desc", "template": "drivers_sales_vs_ordered_with_missed", "sample_id": 4}
{"prompt": "Sales by delivery man on tour with return delivery man: Date: 07/10/2025", "completion": "select `tours`.`id` as `tour_id`, `employees`.`id` as `employee_id`, MIN(employees.name) as employee_name, MIN(tours.creation_id) as tour_creation_id, MIN(tours.date) as tour_date, SUM(all_quantities_query.total_discounted_price) as total_discounted_price, SUM(all_quantities_query.total_delivered_price) as total_delivered_price, SUM(all_quantities_query.total_discounted_price) - SUM(all_quantities_query.total_delivered_price) as total_difference, SUM(all_quantities_query.unloaded_total) as unloaded_total, SUM(all_quantities_query.postponed_total) as postponed_total from `tours` inner join (select * from `tours` where exists (select * from `employees` where `tours`.`employee_id` = `employees`.`id` and ((exists (select * from `routes` where `employees`.`route_id` = `routes`.`id` and ((`routes`.`id` in (133) or `routes`.`user_group_id` in (23)))) or exists (select * from `warehouses` where `employees`.`warehouse_id` = `warehouses`.`id` and ((exists (select * from `core_villes` inner join `warehouse_ville` on `core_villes`.`id` = `warehouse_ville`.`villes_id` where `warehouses`.`id` = `warehouse_ville`.`warehouse_id` and `core_villes`.`id` in (5))) or (`warehouses`.`user_group_id` in (23)))))) and `employees`.`deleted_at` is null) and `tours`.`type` = 'DELIVERY' and `tours`.`status` in ('COMPLETED', 'FORCECLOSED', 'PARTIALLYCOMPLETED') and 0 = 1 and date(`date`) = '2025-10-07') as `tours_query` on `tours`.`id` = `tours_query`.`id` inner join (select `ordered_quantities`.`tour_id` as `tour_id`, `products`.`id` as `product_id`, COALESCE(ordered_quantities.ordered_quantity, 0) as ordered_quantity, COALESCE(ordered_quantities.total_delivered_price, 0) as total_delivered_price, COALESCE(ordered_quantities.total_discounted_price, 0) as total_discounted_price, COALESCE(loaded_quantities.loaded_quantity, 0) as loaded_quantity, COALESCE(unloaded_quantities.unloaded_quantity, 0) as unloaded_quantity, COALESCE(postponed_quantities.postponed_quantity, 0) as postponed_quantity, COALESCE(CASE WHEN ordered_quantities.ordered_quantity <> 0 THEN ordered_quantities.total_discounted_price / ordered_quantities.ordered_quantity END, 0) as unloaded_unit_price, COALESCE(CASE WHEN ordered_quantities.ordered_quantity <> 0 THEN ordered_quantities.total_discounted_price / ordered_quantities.ordered_quantity * (unloaded_quantities.unloaded_quantity - COALESCE(postponed_quantities.postponed_quantity, 0)) END, 0) as unloaded_total, COALESCE(CASE WHEN ordered_quantities.ordered_quantity <> 0 THEN ordered_quantities.total_discounted_price / ordered_quantities.ordered_quantity END, 0) * COALESCE(postponed_quantities.postponed_quantity, 0) as postponed_total from `products` cross join `tours` left join (select `tours_query`.`id` as `tour_id`, `products`.`id` as `product_id`, SUM(order_product.quantity) as ordered_quantity, SUM(CASE WHEN orders.tour_delivery_id = order_tour_client.tour_id THEN order_product.total_delivered_price ELSE 0 END) as total_delivered_price, SUM(CASE WHEN order_product.quantity != 0 THEN order_product.total_discounted_price ELSE 0 END) as total_discounted_price from `products` inner join `order_product` on `products`.`id` = `order_product`.`product_id` inner join `order_tour_client` on `order_product`.`order_id` = `order_tour_client`.`order_id` inner join (select * from `tours` where exists (select * from `employees` where `tours`.`employee_id` = `employees`.`id` and ((exists (select * from `routes` where `employees`.`route_id` = `routes`.`id` and ((`routes`.`id` in (133) or `routes`.`user_group_id` in (23)))) or exists (select * from `warehouses` where `employees`.`warehouse_id` = `warehouses`.`id` and ((exists (select * from `core_villes` inner join `warehouse_ville` on `core_villes`.`id` = `warehouse_ville`.`villes_id` where `warehouses`.`id` = `warehouse_ville`.`warehouse_id` and `core_villes`.`id` in (5))) or (`warehouses`.`user_group_id` in (23)))))) and `employees`.`deleted_at` is null) and `tours`.`type` = 'DELIVERY' and `tours`.`status` in ('COMPLETED', 'FORCECLOSED', 'PARTIALLYCOMPLETED') and 0 = 1 and date(`date`) = '2025-10-07') as `tours_query` on `order_tour_client`.`tour_id` = `tours_query`.`id` inner join `orders` on `orders`.`id` = `order_product`.`order_id` group by `products`.`id`, `tours_query`.`id`) as `ordered_quantities` on `products`.`id` = `ordered_quantities`.`product_id` and `tours`.`id` = `ordered_quantities`.`tour_id` left join (select `tours_query`.`id` as `tour_id`, `products`.`id` as `product_id`, SUM(load_products.loaded_quantity) as loaded_quantity from `products` inner join `load_products` on `products`.`id` = `load_products`.`product_id` inner join `loads` on `load_products`.`load_id` = `loads`.`id` and `loads`.`status` = 'ACCEPTED' inner join (select * from `tours` where exists (select * from `employees` where `tours`.`employee_id` = `employees`.`id` and ((exists (select * from `routes` where `employees`.`route_id` = `routes`.`id` and ((`routes`.`id` in (133) or `routes`.`user_group_id` in (23)))) or exists (select * from `warehouses` where `employees`.`warehouse_id` = `warehouses`.`id` and ((exists (select * from `core_villes` inner join `warehouse_ville` on `core_villes`.`id` = `warehouse_ville`.`villes_id` where `warehouses`.`id` = `warehouse_ville`.`warehouse_id` and `core_villes`.`id` in (5))) or (`warehouses`.`user_group_id` in (23)))))) and `employees`.`deleted_at` is null) and `tours`.`type` = 'DELIVERY' and `tours`.`status` in ('COMPLETED', 'FORCECLOSED', 'PARTIALLYCOMPLETED') and 0 = 1 and date(`date`) = '2025-10-07') as `tours_query` on `loads`.`tour_id` = `tours_query`.`id` group by `products`.`id`, `tours_query`.`id`) as `loaded_quantities` on `products`.`id` = `loaded_quantities`.`product_id` and `tours`.`id` = `loaded_quantities`.`tour_id` left join (select `tours_query`.`id` as `tour_id`, `products`.`id` as `product_id`, SUM(unload_products.quantity) as unloaded_quantity from `products` inner join `unload_products` on `products`.`id` = `unload_products`.`product_id` inner join `unloads` on `unload_products`.`unload_id` = `unloads`.`id` and `unloads`.`status` = 'ACCEPTED' inner join (select * from `tours` where exists (select * from `employees` where `tours`.`employee_id` = `employees`.`id` and ((exists (select * from `routes` where `employees`.`route_id` = `routes`.`id` and ((`routes`.`id` in (133) or `routes`.`user_group_id` in (23)))) or exists (select * from `warehouses` where `employees`.`warehouse_id` = `warehouses`.`id` and ((exists (select * from `core_villes` inner join `warehouse_ville` on `core_villes`.`id` = `warehouse_ville`.`villes_id` where `warehouses`.`id` = `warehouse_ville`.`warehouse_id` and `core_villes`.`id` in (5))) or (`warehouses`.`user_group_id` in (23)))))) and `employees`.`deleted_at` is null) and `tours`.`type` = 'DELIVERY' and `tours`.`status` in ('COMPLETED', 'FORCECLOSED', 'PARTIALLYCOMPLETED') and 0 = 1 and date(`date`) = '2025-10-07') as `tours_query` on `unloads`.`tour_id` = `tours_query`.`id` group by `products`.`id`, `tours_query`.`id`) as `unloaded_quantities` on `products`.`id` = `unloaded_quantities`.`product_id` and `tours`.`id` = `unloaded_quantities`.`tour_id` left join (select `tours_query`.`id` as `tour_id`, `products`.`id` as `product_id`, SUM(order_product.quantity) as postponed_quantity from `products` inner join `order_product` on `products`.`id` = `order_product`.`product_id` inner join `order_tour_client` on `order_product`.`order_id` = `order_tour_client`.`order_id` inner join (select * from `tours` where exists (select * from `employees` where `tours`.`employee_id` = `employees`.`id` and ((exists (select * from `routes` where `employees`.`route_id` = `routes`.`id` and ((`routes`.`id` in (133) or `routes`.`user_group_id` in (23)))) or exists (select * from `warehouses` where `employees`.`warehouse_id` = `warehouses`.`id` and ((exists (select * from `core_villes` inner join `warehouse_ville` on `core_villes`.`id` = `warehouse_ville`.`villes_id` where `warehouses`.`id` = `warehouse_ville`.`warehouse_id` and `core_villes`.`id` in (5))) or (`warehouses`.`user_group_id` in (23)))))) and `employees`.`deleted_at` is null) and `tours`.`type` = 'DELIVERY' and `tours`.`status` in ('COMPLETED', 'FORCECLOSED', 'PARTIALLYCOMPLETED') and 0 = 1 and date(`date`) = '2025-10-07') as `tours_query` on `order_tour_client`.`tour_id` = `tours_query`.`id` inner join `orders` on `orders`.`id` = `order_product`.`order_id` where `orders`.`tour_delivery_id` is not null and (`orders`.`tour_delivery_id` != `order_tour_client`.`tour_id` or (`orders`.`status` not in ('DELIVERED', 'PARTIALDELIVERY', 'CANCELED'))) group by `products`.`id`, `tours_query`.`id`) as `postponed_quantities` on `products`.`id` = `postponed_quantities`.`product_id` and `tours`.`id` = `postponed_quantities`.`tour_id` where (`ordered_quantities`.`ordered_quantity` > 0 or `loaded_quantities`.`loaded_quantity` > 0 or `unloaded_quantities`.`unloaded_quantity` > 0)) as `all_quantities_query` on `tours`.`id` = `all_quantities_query`.`tour_id` inner join `employees` on `tours`.`employee_id` = `employees`.`id` and `employees`.`type` = 'DRIVER' group by `tours`.`id`, `employees`.`id` order by `employee_name` asc, `tours`.`id` desc", "template": "drivers_sales_vs_ordered_with_missed", "sample_id": 5}
{"prompt": "The success rate of visits programmed by delivery man", "completion": "select CASE WHEN SUM(planned_visits_query.planned_visits) = 0 THEN 0 ELSE SUM(accomplished_visits_query.accomplished_visits) / SUM(planned_visits_query.planned_visits) END as visit_rate, MIN(employees.name) as employee_name, employees.id as employee_id, SUM(planned_visits_query.planned_visits) as p_visits, SUM(accomplished_visits_query.accomplished_visits) as acc_visits from `tours` inner join (select COUNT(client_visits.id) as accomplished_visits, client_visits.tour_delivery_id as tour_id from `tours` inner join `client_visits` on `tours`.`id` = `client_visits`.`tour_delivery_id` and `client_visits`.`within_schedule` = 1 and `client_visits`.`status` = 'WITHORDER' and `client_visits`.`type` in ('PRESALES', 'CASHVAN') where `tours`.`status` in ('COMPLETED', 'PARTIALLYCOMPLETED', 'FORCECLOSED') group by `client_visits`.`tour_delivery_id`) as `accomplished_visits_query` on `tours`.`id` = `accomplished_visits_query`.`tour_id` inner join (select COUNT(tour_client.client_id) as planned_visits, tour_client.tour_id as tour_id from `tours` inner join `tour_client` on `tours`.`id` = `tour_client`.`tour_id` where `tours`.`status` in ('COMPLETED', 'PARTIALLYCOMPLETED', 'FORCECLOSED') group by `tour_client`.`tour_id`) as `planned_visits_query` on `tours`.`id` = `planned_visits_query`.`tour_id` inner join `employees` on `tours`.`employee_id` = `employees`.`id` and `employees`.`type` in ('SELLER', 'CASHVAN') where `tours`.`status` in ('COMPLETED', 'PARTIALLYCOMPLETED', 'FORCECLOSED') group by `employees`.`id` order by `employee_name` asc", "template": "clients_planned_visits_rates", "sample_id": 1}
{"prompt": "The success rate of visits scheduled by delegated delivery man:", "completion": "select CASE WHEN SUM(planned_visits_query.planned_visits) = 0 THEN 0 ELSE SUM(accomplished_visits_query.accomplished_visits) / SUM(planned_visits_query.planned_visits) END as visit_rate, MIN(employees.name) as employee_name, employees.id as employee_id, SUM(planned_visits_query.planned_visits) as p_visits, SUM(accomplished_visits_query.accomplished_visits) as acc_visits from `tours` inner join (select COUNT(client_visits.id) as accomplished_visits, client_visits.tour_delivery_id as tour_id from `tours` inner join `client_visits` on `tours`.`id` = `client_visits`.`tour_delivery_id` and `client_visits`.`within_schedule` = 1 and `client_visits`.`status` = 'WITHORDER' and `client_visits`.`type` in ('PRESALES', 'CASHVAN') where `tours`.`status` in ('COMPLETED', 'PARTIALLYCOMPLETED', 'FORCECLOSED') and 0 = 1 group by `client_visits`.`tour_delivery_id`) as `accomplished_visits_query` on `tours`.`id` = `accomplished_visits_query`.`tour_id` inner join (select COUNT(tour_client.client_id) as planned_visits, tour_client.tour_id as tour_id from `tours` inner join `tour_client` on `tours`.`id` = `tour_client`.`tour_id` where `tours`.`status` in ('COMPLETED', 'PARTIALLYCOMPLETED', 'FORCECLOSED') and 0 = 1 group by `tour_client`.`tour_id`) as `planned_visits_query` on `tours`.`id` = `planned_visits_query`.`tour_id` inner join `employees` on `tours`.`employee_id` = `employees`.`id` and `employees`.`type` in ('SELLER', 'CASHVAN') where `tours`.`status` in ('COMPLETED', 'PARTIALLYCOMPLETED', 'FORCECLOSED') and 0 = 1 group by `employees`.`id` order by `employee_name` asc", "template": "clients_planned_visits_rates", "sample_id": 2}
{"prompt": "The success rate of visits scheduled by delivery man Date: 08/10/2025", "completion": "select CASE WHEN SUM(planned_visits_query.planned_visits) = 0 THEN 0 ELSE SUM(accomplished_visits_query.accomplished_visits) / SUM(planned_visits_query.planned_visits) END as visit_rate, MIN(employees.name) as employee_name, employees.id as employee_id, SUM(planned_visits_query.planned_visits) as p_visits, SUM(accomplished_visits_query.accomplished_visits) as acc_visits from `tours` inner join (select COUNT(client_visits.id) as accomplished_visits, client_visits.tour_delivery_id as tour_id from `tours` inner join `client_visits` on `tours`.`id` = `client_visits`.`tour_delivery_id` and `client_visits`.`within_schedule` = 1 and `client_visits`.`status` = 'WITHORDER' and `client_visits`.`type` in ('PRESALES', 'CASHVAN') where `tours`.`status` in ('COMPLETED', 'PARTIALLYCOMPLETED', 'FORCECLOSED') and date(`tours`.`date`) <= '2025-10-08' group by `client_visits`.`tour_delivery_id`) as `accomplished_visits_query` on `tours`.`id` = `accomplished_visits_query`.`tour_id` inner join (select COUNT(tour_client.client_id) as planned_visits, tour_client.tour_id as tour_id from `tours` inner join `tour_client` on `tours`.`id` = `tour_client`.`tour_id` where `tours`.`status` in ('COMPLETED', 'PARTIALLYCOMPLETED', 'FORCECLOSED') and date(`tours`.`date`) <= '2025-10-08' group by `tour_client`.`tour_id`) as `planned_visits_query` on `tours`.`id` = `planned_visits_query`.`tour_id` inner join `employees` on `tours`.`employee_id` = `employees`.`id` and `employees`.`type` in ('SELLER', 'CASHVAN') where `tours`.`status` in ('COMPLETED', 'PARTIALLYCOMPLETED', 'FORCECLOSED') and date(`tours`.`date`) <= '2025-10-08' group by `employees`.`id` order by `employee_name` asc", "template": "clients_planned_visits_rates", "sample_id": 3}
{"prompt": "The success rate of visits scheduled by delegated delivery man: Date: 25/09/2025", "completion": "select CASE WHEN SUM(planned_visits_query.planned_visits) = 0 THEN 0 ELSE SUM(accomplished_visits_query.accomplished_visits) / SUM(planned_visits_query.planned_visits) END as visit_rate, MIN(employees.name) as employee_name, employees.id as employee_id, SUM(planned_visits_query.planned_visits) as p_visits, SUM(accomplished_visits_query.accomplished_visits) as acc_visits from `tours` inner join (select COUNT(client_visits.id) as accomplished_visits, client_visits.tour_delivery_id as tour_id from `tours` inner join `client_visits` on `tours`.`id` = `client_visits`.`tour_delivery_id` and `client_visits`.`within_schedule` = 1 and `client_visits`.`status` = 'WITHORDER' and `client_visits`.`type` in ('PRESALES', 'CASHVAN') where `tours`.`status` in ('COMPLETED', 'PARTIALLYCOMPLETED', 'FORCECLOSED') and 0 = 1 and date(`tours`.`date`) = '2025-09-25' group by `client_visits`.`tour_delivery_id`) as `accomplished_visits_query` on `tours`.`id` = `accomplished_visits_query`.`tour_id` inner join (select COUNT(tour_client.client_id) as planned_visits, tour_client.tour_id as tour_id from `tours` inner join `tour_client` on `tours`.`id` = `tour_client`.`tour_id` where `tours`.`status` in ('COMPLETED', 'PARTIALLYCOMPLETED', 'FORCECLOSED') and 0 = 1 and date(`tours`.`date`) = '2025-09-25' group by `tour_client`.`tour_id`) as `planned_visits_query` on `tours`.`id` = `planned_visits_query`.`tour_id` inner join `employees` on `tours`.`employee_id` = `employees`.`id` and `employees`.`type` in ('SELLER', 'CASHVAN') where `tours`.`status` in ('COMPLETED', 'PARTIALLYCOMPLETED', 'FORCECLOSED') and 0 = 1 and date(`tours`.`date`) = '2025-09-25' group by `employees`.`id` order by `employee_name` asc", "template": "clients_planned_visits_rates", "sample_id": 4}
{"prompt": "The success rate of visits programmed by delivery man", "completion": "select CASE WHEN SUM(planned_visits_query.planned_visits) = 0 THEN 0 ELSE SUM(accomplished_visits_query.accomplished_visits) / SUM(planned_visits_query.planned_visits) END as visit_rate, MIN(employees.name) as employee_name, employees.id as employee_id, SUM(planned_visits_query.planned_visits) as p_visits, SUM(accomplished_visits_query.accomplished_visits) as acc_visits from `tours` inner join (select COUNT(client_visits.id) as accomplished_visits, client_visits.tour_delivery_id as tour_id from `tours` inner join `client_visits` on `tours`.`id` = `client_visits`.`tour_delivery_id` and `client_visits`.`within_schedule` = 1 and `client_visits`.`status` = 'WITHORDER' and `client_visits`.`type` in ('PRESALES', 'CASHVAN') where `tours`.`status` in ('COMPLETED', 'PARTIALLYCOMPLETED', 'FORCECLOSED') group by `client_visits`.`tour_delivery_id`) as `accomplished_visits_query` on `tours`.`id` = `accomplished_visits_query`.`tour_id` inner join (select COUNT(tour_client.client_id) as planned_visits, tour_client.tour_id as tour_id from `tours` inner join `tour_client` on `tours`.`id` = `tour_client`.`tour_id` where `tours`.`status` in ('COMPLETED', 'PARTIALLYCOMPLETED', 'FORCECLOSED') group by `tour_client`.`tour_id`) as `planned_visits_query` on `tours`.`id` = `planned_visits_query`.`tour_id` inner join `employees` on `tours`.`employee_id` = `employees`.`id` and `employees`.`type` in ('SELLER', 'CASHVAN') where `tours`.`status` in ('COMPLETED', 'PARTIALLYCOMPLETED', 'FORCECLOSED') group by `employees`.`id` order by `employee_name` asc", "template": "clients_planned_visits_rates", "sample_id": 5}
{"prompt": "Success rate by product", "completion": "select COUNT(DISTINCT(orders.client_id)) as count_client, MIN(products.name) as product_name, products.id as product_id from `products` inner join `order_product` on `products`.`id` = `order_product`.`product_id` inner join `orders` on `order_product`.`order_id` = `orders`.`id` where `orders`.`status` in ('DELIVERED', 'PARTIALDELIVERY') group by `products`.`id` order by `products`.`id` desc", "template": "pos_number_per_product", "sample_id": 1}
{"prompt": "Success rate by product Products: Tast Enhancers Bouillon Cube Etuis 8 Mouton 8x10g Promo, RM JB Noodles Cheese 40 DZ 70g PRM 23 1/2 Carton Date: 25/08/2025", "completion": "select COUNT(DISTINCT(orders.client_id)) as count_client, MIN(products.name) as product_name, products.id as product_id from `products` inner join `order_product` on `products`.`id` = `order_product`.`product_id` inner join `orders` on `order_product`.`order_id` = `orders`.`id` where `product_id` in (54, 64) and date(`start_time`) = '2025-08-25' and `orders`.`status` in ('DELIVERED', 'PARTIALDELIVERY') group by `products`.`id` order by `products`.`id` desc", "template": "pos_number_per_product", "sample_id": 2}
{"prompt": "Success rate by product Products: Seasonings Mouton 30x7g, Noodles Cheese 70g 1/2 Carton, BC JB Mutton 24x8 Dz Ramadan 24 Date: 11/11/2025", "completion": "select COUNT(DISTINCT(orders.client_id)) as count_client, MIN(products.name) as product_name, products.id as product_id from `products` inner join `order_product` on `products`.`id` = `order_product`.`product_id` inner join `orders` on `order_product`.`order_id` = `orders`.`id` where `product_id` in (48, 69, 26) and date(`start_time`) = '2025-10-11' and `orders`.`status` in ('DELIVERED', 'PARTIALDELIVERY') group by `products`.`id` order by `products`.`id` desc", "template": "pos_number_per_product", "sample_id": 3}
{"prompt": "Success rate by product Products: Tast Enhancers Bouillon Cube Etuis 8 Beef 8x10g Promo, RM JB Noodles Cheese 40 Dz 70g PRM 23 1/2 Carton, FLAN Leila Fraise 12 x 100g", "completion": "select COUNT(DISTINCT(orders.client_id)) as count_client, MIN(products.name) as product_name, products.id as product_id from `products` inner join `order_product` on `products`.`id` = `order_product`.`product_id` inner join `orders` on `order_product`.`order_id` = `orders`.`id` where `product_id` in (56, 64, 74) and `orders`.`status` in ('DELIVERED', 'PARTIALDELIVERY') group by `products`.`id` order by `products`.`id` desc", "template": "pos_number_per_product", "sample_id": 4}
{"prompt": "Success rate by product", "completion": "select COUNT(DISTINCT(orders.client_id)) as count_client, MIN(products.name) as product_name, products.id as product_id from `products` inner join `order_product` on `products`.`id` = `order_product`.`product_id` inner join `orders` on `order_product`.`order_id` = `orders`.`id` where `orders`.`status` in ('DELIVERED', 'PARTIALDELIVERY') group by `products`.`id` order by `products`.`id` desc", "template": "pos_number_per_product", "sample_id": 5}
{"prompt": "Success rate by product and by category", "completion": "select COUNT(DISTINCT(orders.client_id)) as count_client, MIN(product_categories.name) as category_name, product_categories.id as product_category_id from `products` inner join `order_product` on `products`.`id` = `order_product`.`product_id` inner join `product_categories` on `products`.`product_category_id` = `product_categories`.`id` inner join `orders` on `order_product`.`order_id` = `orders`.`id` where `orders`.`status` in ('DELIVERED', 'PARTIALDELIVERY') group by `product_categories`.`id` order by `product_categories`.`id` desc", "template": "product_categories_sales_rate", "sample_id": 1}
{"prompt": "Success rate by product and category category: marinated chicken", "completion": "select COUNT(DISTINCT(orders.client_id)) as count_client, MIN(product_categories.name) as category_name, product_categories.id as product_category_id from `products` inner join `order_product` on `products`.`id` = `order_product`.`product_id` inner join `product_categories` on `products`.`product_category_id` = `product_categories`.`id` inner join `orders` on `order_product`.`order_id` = `orders`.`id` where `product_category_id` in (23) and `orders`.`status` in ('DELIVERED', 'PARTIALDELIVERY') group by `product_categories`.`id` order by `product_categories`.`id` desc", "template": "product_categories_sales_rate", "sample_id": 2}
{"prompt": "Success rate by product and by category categories: fish", "completion": "select COUNT(DISTINCT(orders.client_id)) as count_client, MIN(product_categories.name) as category_name, product_categories.id as product_category_id from `products` inner join `order_product` on `products`.`id` = `order_product`.`product_id` inner join `product_categories` on `products`.`product_category_id` = `product_categories`.`id` inner join `orders` on `order_product`.`order_id` = `orders`.`id` where `product_category_id` in (15) and `orders`.`status` in ('DELIVERED', 'PARTIALDELIVERY') group by `product_categories`.`id` order by `product_categories`.`id` desc", "template": "product_categories_sales_rate", "sample_id": 3}
{"prompt": "Success rate by product and by category category: curry chicken, vermicelli chicken, vegetables Date: 15/10/2025", "completion": "select COUNT(DISTINCT(orders.client_id)) as count_client, MIN(product_categories.name) as category_name, product_categories.id as product_category_id from `products` inner join `order_product` on `products`.`id` = `order_product`.`product_id` inner join `product_categories` on `products`.`product_category_id` = `product_categories`.`id` inner join `orders` on `order_product`.`order_id` = `orders`.`id` where `product_category_id` in (7, 16, 17) and date(`start_time`) = '2025-10-15' and `orders`.`status` in ('DELIVERED', 'PARTIALDELIVERY') group by `product_categories`.`id` order by `product_categories`.`id` desc", "template": "product_categories_sales_rate", "sample_id": 4}
{"prompt": "Success rate by product and by category categories: mayonnaise, chicken vermicecelle Date: 26/08/2025", "completion": "select COUNT(DISTINCT(orders.client_id)) as count_client, MIN(product_categories.name) as category_name, product_categories.id as product_category_id from `products` inner join `order_product` on `products`.`id` = `order_product`.`product_id` inner join `product_categories` on `products`.`product_category_id` = `product_categories`.`id` inner join `orders` on `order_product`.`order_id` = `orders`.`id` where `product_category_id` in (9, 16) and date(`start_time`) >= '2025-08-26' and `orders`.`status` in ('DELIVERED', 'PARTIALDELIVERY') group by `product_categories`.`id` order by `product_categories`.`id` desc", "template": "product_categories_sales_rate", "sample_id": 5}
{"prompt": "Brand sales", "completion": "select brands.id as brand_id, MIN(brands.name) as brand_name, SUM(order_product.total_delivered_price) as total from `orders` inner join `order_product` on `order_product`.`order_id` = `orders`.`id` inner join `products` on `order_product`.`product_id` = `products`.`id` inner join `brands` on `products`.`brand_id` = `brands`.`id` where `orders`.`status` in ('DELIVERED', 'PARTIALDELIVERY') group by `brands`.`id` order by `total` desc", "template": "brands_sales", "sample_id": 1}
{"prompt": "Sales by brand Date: 28/09/2025", "completion": "select brands.id as brand_id, MIN(brands.name) as brand_name, SUM(order_product.total_delivered_price) as total from `orders` inner join `order_product` on `order_product`.`order_id` = `orders`.`id` inner join `products` on `order_product`.`product_id` = `products`.`id` inner join `brands` on `products`.`brand_id` = `brands`.`id` where date(`start_time`) <= '2025-09-28' and `orders`.`status` in ('DELIVERED', 'PARTIALDELIVERY') group by `brands`.`id` order by `total` desc", "template": "brands_sales", "sample_id": 2}
{"prompt": "Sales by brand brand: Kool, Maxon, 167_167_mbo", "completion": "select brands.id as brand_id, MIN(brands.name) as brand_name, SUM(order_product.total_delivered_price) as total from `orders` inner join `order_product` on `order_product`.`order_id` = `orders`.`id` inner join `products` on `order_product`.`product_id` = `products`.`id` inner join `brands` on `products`.`brand_id` = `brands`.`id` where `orders`.`status` in ('DELIVERED', 'PARTIALDELIVERY') and `brand_id` in (1, 6, 4) group by `brands`.`id` order by `total` desc", "template": "brands_sales", "sample_id": 3}
{"prompt": "Sales by brand Brand: Moment Date: 14/11/2025", "completion": "select brands.id as brand_id, MIN(brands.name) as brand_name, SUM(order_product.total_delivered_price) as total from `orders` inner join `order_product` on `order_product`.`order_id` = `orders`.`id` inner join `products` on `order_product`.`product_id` = `products`.`id` inner join `brands` on `products`.`brand_id` = `brands`.`id` where date(`start_time`) >= '2025-10-14' and `orders`.`status` in ('DELIVERED', 'PARTIALDELIVERY') and `brand_id` in (3) group by `brands`.`id` order by `total` desc", "template": "brands_sales", "sample_id": 4}
{"prompt": "Sales by brand brand: Palmary", "completion": "select brands.id as brand_id, MIN(brands.name) as brand_name, SUM(order_product.total_delivered_price) as total from `orders` inner join `order_product` on `order_product`.`order_id` = `orders`.`id` inner join `products` on `order_product`.`product_id` = `products`.`id` inner join `brands` on `products`.`brand_id` = `brands`.`id` where `orders`.`status` in ('DELIVERED', 'PARTIALDELIVERY') and `brand_id` in (2) group by `brands`.`id` order by `total` desc", "template": "brands_sales", "sample_id": 5}
{"prompt": "The number of lines per invoice", "completion": "select MIN(orders.creation_id) as order_id, MIN(orders.status) as status, MIN(orders.discounted_total) as total, COUNT(order_product.id) as lines_count from `orders` inner join `order_product` on `orders`.`id` = `order_product`.`order_id` group by `orders`.`id` order by `orders`.`discounted_total` asc", "template": "sku_orders_count", "sample_id": 1}
{"prompt": "The number of lines per invoice State: in Process Date: 23/09/2025 to 07/10/2025", "completion": "select MIN(orders.creation_id) as order_id, MIN(orders.status) as status, MIN(orders.discounted_total) as total, COUNT(order_product.id) as lines_count from `orders` inner join `order_product` on `orders`.`id` = `order_product`.`order_id` where `status` in ('INPROCESS') and `start_time` between '2025-09-23 00:00:00' and '2025-10-07 23:59:59' group by `orders`.`id` order by `orders`.`discounted_total` asc", "template": "sku_orders_count", "sample_id": 2}
{"prompt": "The number of lines per state invoice: CanceLED, in Process", "completion": "select MIN(orders.creation_id) as order_id, MIN(orders.status) as status, MIN(orders.discounted_total) as total, COUNT(order_product.id) as lines_count from `orders` inner join `order_product` on `orders`.`id` = `order_product`.`order_id` where `status` in ('INPROCESS', 'CANCELED') group by `orders`.`id` order by `orders`.`discounted_total` asc", "template": "sku_orders_count", "sample_id": 3}
{"prompt": "The number of lines per invoice Date: 20/10/2025", "completion": "select MIN(orders.creation_id) as order_id, MIN(orders.status) as status, MIN(orders.discounted_total) as total, COUNT(order_product.id) as lines_count from `orders` inner join `order_product` on `orders`.`id` = `order_product`.`order_id` where date(`start_time`) = '2025-10-20' group by `orders`.`id` order by `orders`.`discounted_total` asc", "template": "sku_orders_count", "sample_id": 4}
{"prompt": "The number of lines per invoice State: Canceled, Delivered Date: 14/09/2025 to 19/09/2025", "completion": "select MIN(orders.creation_id) as order_id, MIN(orders.status) as status, MIN(orders.discounted_total) as total, COUNT(order_product.id) as lines_count from `orders` inner join `order_product` on `orders`.`id` = `order_product`.`order_id` where `status` in ('CANCELED', 'DELIVERED') and `start_time` between '2025-09-14 00:00:00' and '2025-09-19 23:59:59' group by `orders`.`id` order by `orders`.`discounted_total` asc", "template": "sku_orders_count", "sample_id": 5}
{"prompt": "Orders postponed by delivery man by tour", "completion": "select MIN(tours.creation_id) as tour_creation_id, MIN(orders.creation_id) as order_creation_id, MIN(employees.name) as employee_name from `tours` inner join `order_tour_client` on `tours`.`id` = `order_tour_client`.`tour_id` inner join `orders` on `orders`.`id` = `order_tour_client`.`order_id` inner join `employees` on `tours`.`employee_id` = `employees`.`id` where exists (select * from `employees` where `tours`.`employee_id` = `employees`.`id` and ((exists (select * from `routes` where `employees`.`route_id` = `routes`.`id` and ((`routes`.`id` in (133) or `routes`.`user_group_id` in (23)))) or exists (select * from `warehouses` where `employees`.`warehouse_id` = `warehouses`.`id` and ((exists (select * from `core_villes` inner join `warehouse_ville` on `core_villes`.`id` = `warehouse_ville`.`villes_id` where `warehouses`.`id` = `warehouse_ville`.`warehouse_id` and `core_villes`.`id` in (5))) or (`warehouses`.`user_group_id` in (23)))))) and `employees`.`deleted_at` is null) and `tours`.`type` = 'DELIVERY' and `tours`.`status` in ('COMPLETED', 'FORCECLOSED', 'PARTIALLYCOMPLETED') and (`orders`.`tour_delivery_id` != `tours`.`id` or (`orders`.`status` not in ('DELIVERED', 'PARTIALDELIVERY', 'CANCELED'))) group by `tours`.`id`, `orders`.`id` order by `employee_name` asc, `tours`.`id` desc", "template": "drivers_postponed_orders", "sample_id": 1}
{"prompt": "The orders postponed by delivery man by tour delivery: Date: 20/09/2025 to 23/09/2025", "completion": "select MIN(tours.creation_id) as tour_creation_id, MIN(orders.creation_id) as order_creation_id, MIN(employees.name) as employee_name from `tours` inner join `order_tour_client` on `tours`.`id` = `order_tour_client`.`tour_id` inner join `orders` on `orders`.`id` = `order_tour_client`.`order_id` inner join `employees` on `tours`.`employee_id` = `employees`.`id` where exists (select * from `employees` where `tours`.`employee_id` = `employees`.`id` and ((exists (select * from `routes` where `employees`.`route_id` = `routes`.`id` and ((`routes`.`id` in (133) or `routes`.`user_group_id` in (23)))) or exists (select * from `warehouses` where `employees`.`warehouse_id` = `warehouses`.`id` and ((exists (select * from `core_villes` inner join `warehouse_ville` on `core_villes`.`id` = `warehouse_ville`.`villes_id` where `warehouses`.`id` = `warehouse_ville`.`warehouse_id` and `core_villes`.`id` in (5))) or (`warehouses`.`user_group_id` in (23)))))) and `employees`.`deleted_at` is null) and `tours`.`type` = 'DELIVERY' and `tours`.`status` in ('COMPLETED', 'FORCECLOSED', 'PARTIALLYCOMPLETED') and 0 = 1 and `date` between '2025-09-20 00:00:00' and '2025-09-23 23:59:59' and (`orders`.`tour_delivery_id` != `tours`.`id` or (`orders`.`status` not in ('DELIVERED', 'PARTIALDELIVERY', 'CANCELED'))) group by `tours`.`id`, `orders`.`id` order by `employee_name` asc, `tours`.`id` desc", "template": "drivers_postponed_orders", "sample_id": 2}
{"prompt": "The orders postponed by delivery man by delivery tour: the warehouse: Date: 10/10/2025", "completion": "select MIN(tours.creation_id) as tour_creation_id, MIN(orders.creation_id) as order_creation_id, MIN(employees.name) as employee_name from `tours` inner join `order_tour_client` on `tours`.`id` = `order_tour_client`.`tour_id` inner join `orders` on `orders`.`id` = `order_tour_client`.`order_id` inner join `employees` on `tours`.`employee_id` = `employees`.`id` where exists (select * from `employees` where `tours`.`employee_id` = `employees`.`id` and ((exists (select * from `routes` where `employees`.`route_id` = `routes`.`id` and ((`routes`.`id` in (133) or `routes`.`user_group_id` in (23)))) or exists (select * from `warehouses` where `employees`.`warehouse_id` = `warehouses`.`id` and ((exists (select * from `core_villes` inner join `warehouse_ville` on `core_villes`.`id` = `warehouse_ville`.`villes_id` where `warehouses`.`id` = `warehouse_ville`.`warehouse_id` and `core_villes`.`id` in (5))) or (`warehouses`.`user_group_id` in (23)))))) and `employees`.`deleted_at` is null) and `tours`.`type` = 'DELIVERY' and `tours`.`status` in ('COMPLETED', 'FORCECLOSED', 'PARTIALLYCOMPLETED') and 0 = 1 and 0 = 1 and date(`date`) <= '2025-10-10' and (`orders`.`tour_delivery_id` != `tours`.`id` or (`orders`.`status` not in ('DELIVERED', 'PARTIALDELIVERY', 'CANCELED'))) group by `tours`.`id`, `orders`.`id` order by `employee_name` asc, `tours`.`id` desc", "template": "drivers_postponed_orders", "sample_id": 3}
{"prompt": "Orders postponed by delivery man by tour Date: 04/09/2025", "completion": "select MIN(tours.creation_id) as tour_creation_id, MIN(orders.creation_id) as order_creation_id, MIN(employees.name) as employee_name from `tours` inner join `order_tour_client` on `tours`.`id` = `order_tour_client`.`tour_id` inner join `orders` on `orders`.`id` = `order_tour_client`.`order_id` inner join `employees` on `tours`.`employee_id` = `employees`.`id` where exists (select * from `employees` where `tours`.`employee_id` = `employees`.`id` and ((exists (select * from `routes` where `employees`.`route_id` = `routes`.`id` and ((`routes`.`id` in (133) or `routes`.`user_group_id` in (23)))) or exists (select * from `warehouses` where `employees`.`warehouse_id` = `warehouses`.`id` and ((exists (select * from `core_villes` inner join `warehouse_ville` on `core_villes`.`id` = `warehouse_ville`.`villes_id` where `warehouses`.`id` = `warehouse_ville`.`warehouse_id` and `core_villes`.`id` in (5))) or (`warehouses`.`user_group_id` in (23)))))) and `employees`.`deleted_at` is null) and `tours`.`type` = 'DELIVERY' and `tours`.`status` in ('COMPLETED', 'FORCECLOSED', 'PARTIALLYCOMPLETED') and date(`date`) = '2025-09-04' and (`orders`.`tour_delivery_id` != `tours`.`id` or (`orders`.`status` not in ('DELIVERED', 'PARTIALDELIVERY', 'CANCELED'))) group by `tours`.`id`, `orders`.`id` order by `employee_name` asc, `tours`.`id` desc", "template": "drivers_postponed_orders", "sample_id": 4}
{"prompt": "The orders postponed by delivery man by tour delivery: Date: 05/10/2025", "completion": "select MIN(tours.creation_id) as tour_creation_id, MIN(orders.creation_id) as order_creation_id, MIN(employees.name) as employee_name from `tours` inner join `order_tour_client` on `tours`.`id` = `order_tour_client`.`tour_id` inner join `orders` on `orders`.`id` = `order_tour_client`.`order_id` inner join `employees` on `tours`.`employee_id` = `employees`.`id` where exists (select * from `employees` where `tours`.`employee_id` = `employees`.`id` and ((exists (select * from `routes` where `employees`.`route_id` = `routes`.`id` and ((`routes`.`id` in (133) or `routes`.`user_group_id` in (23)))) or exists (select * from `warehouses` where `employees`.`warehouse_id` = `warehouses`.`id` and ((exists (select * from `core_villes` inner join `warehouse_ville` on `core_villes`.`id` = `warehouse_ville`.`villes_id` where `warehouses`.`id` = `warehouse_ville`.`warehouse_id` and `core_villes`.`id` in (5))) or (`warehouses`.`user_group_id` in (23)))))) and `employees`.`deleted_at` is null) and `tours`.`type` = 'DELIVERY' and `tours`.`status` in ('COMPLETED', 'FORCECLOSED', 'PARTIALLYCOMPLETED') and 0 = 1 and date(`date`) = '2025-10-05' and (`orders`.`tour_delivery_id` != `tours`.`id` or (`orders`.`status` not in ('DELIVERED', 'PARTIALDELIVERY', 'CANCELED'))) group by `tours`.`id`, `orders`.`id` order by `employee_name` asc, `tours`.`id` desc", "template": "drivers_postponed_orders", "sample_id": 5}
{"prompt": "Orders products postponed by delivery man on tour", "completion": "select products.id as product_id, products.name as product_name, employees.name as employee_name, MIN(unit_langs.name) as base_unit_lang, employees.id as employee_id, MIN(products.has_display_unit) as agg_has_display_unit, MIN(products.display_unit_name) as agg_display_unit_name, MIN(products.display_unit_scale) as agg_display_unit_scale, order_product.discounted_price as price, tours.creation_id as tour_creation_id, orders.creation_id as order_creation_id from `tours` inner join `order_tour_client` on `tours`.`id` = `order_tour_client`.`tour_id` inner join `orders` on `orders`.`id` = `order_tour_client`.`order_id` inner join `order_product` on `orders`.`id` = `order_product`.`order_id` inner join `products` on `order_product`.`product_id` = `products`.`id` inner join `unit_langs` on `order_product`.`unit_id` = `unit_langs`.`unit_id` and `unit_langs`.`lang` = 'EN' inner join `employees` on `tours`.`employee_id` = `employees`.`id` where exists (select * from `employees` where `tours`.`employee_id` = `employees`.`id` and ((exists (select * from `routes` where `employees`.`route_id` = `routes`.`id` and ((`routes`.`id` in (133) or `routes`.`user_group_id` in (23)))) or exists (select * from `warehouses` where `employees`.`warehouse_id` = `warehouses`.`id` and ((exists (select * from `core_villes` inner join `warehouse_ville` on `core_villes`.`id` = `warehouse_ville`.`villes_id` where `warehouses`.`id` = `warehouse_ville`.`warehouse_id` and `core_villes`.`id` in (5))) or (`warehouses`.`user_group_id` in (23)))))) and `employees`.`deleted_at` is null) and `tours`.`type` = 'DELIVERY' and `tours`.`status` in ('COMPLETED', 'FORCECLOSED', 'PARTIALLYCOMPLETED') and (`orders`.`tour_delivery_id` != `tours`.`id` or (`orders`.`status` not in ('DELIVERED', 'PARTIALDELIVERY', 'CANCELED'))) group by `orders`.`creation_id`, `products`.`id`, `employees`.`id`, `price`, `tours`.`creation_id` order by `employee_name` asc, `product_name` asc", "template": "tours_postponed_orders", "sample_id": 1}
{"prompt": "Orders products postponed by delivery man by delivery tour:", "completion": "select products.id as product_id, products.name as product_name, employees.name as employee_name, MIN(unit_langs.name) as base_unit_lang, employees.id as employee_id, MIN(products.has_display_unit) as agg_has_display_unit, MIN(products.display_unit_name) as agg_display_unit_name, MIN(products.display_unit_scale) as agg_display_unit_scale, order_product.discounted_price as price, tours.creation_id as tour_creation_id, orders.creation_id as order_creation_id from `tours` inner join `order_tour_client` on `tours`.`id` = `order_tour_client`.`tour_id` inner join `orders` on `orders`.`id` = `order_tour_client`.`order_id` inner join `order_product` on `orders`.`id` = `order_product`.`order_id` inner join `products` on `order_product`.`product_id` = `products`.`id` inner join `unit_langs` on `order_product`.`unit_id` = `unit_langs`.`unit_id` and `unit_langs`.`lang` = 'EN' inner join `employees` on `tours`.`employee_id` = `employees`.`id` where exists (select * from `employees` where `tours`.`employee_id` = `employees`.`id` and ((exists (select * from `routes` where `employees`.`route_id` = `routes`.`id` and ((`routes`.`id` in (133) or `routes`.`user_group_id` in (23)))) or exists (select * from `warehouses` where `employees`.`warehouse_id` = `warehouses`.`id` and ((exists (select * from `core_villes` inner join `warehouse_ville` on `core_villes`.`id` = `warehouse_ville`.`villes_id` where `warehouses`.`id` = `warehouse_ville`.`warehouse_id` and `core_villes`.`id` in (5))) or (`warehouses`.`user_group_id` in (23)))))) and `employees`.`deleted_at` is null) and `tours`.`type` = 'DELIVERY' and `tours`.`status` in ('COMPLETED', 'FORCECLOSED', 'PARTIALLYCOMPLETED') and 0 = 1 and (`orders`.`tour_delivery_id` != `tours`.`id` or (`orders`.`status` not in ('DELIVERED', 'PARTIALDELIVERY', 'CANCELED'))) group by `orders`.`creation_id`, `products`.`id`, `employees`.`id`, `price`, `tours`.`creation_id` order by `employee_name` asc, `product_name` asc", "template": "tours_postponed_orders", "sample_id": 2}
{"prompt": "The products of orders postponed by delivery man by tour tour: T-001001-1739888078882 Delivery:", "completion": "select products.id as product_id, products.name as product_name, employees.name as employee_name, MIN(unit_langs.name) as base_unit_lang, employees.id as employee_id, MIN(products.has_display_unit) as agg_has_display_unit, MIN(products.display_unit_name) as agg_display_unit_name, MIN(products.display_unit_scale) as agg_display_unit_scale, order_product.discounted_price as price, tours.creation_id as tour_creation_id, orders.creation_id as order_creation_id from `tours` inner join `order_tour_client` on `tours`.`id` = `order_tour_client`.`tour_id` inner join `orders` on `orders`.`id` = `order_tour_client`.`order_id` inner join `order_product` on `orders`.`id` = `order_product`.`order_id` inner join `products` on `order_product`.`product_id` = `products`.`id` inner join `unit_langs` on `order_product`.`unit_id` = `unit_langs`.`unit_id` and `unit_langs`.`lang` = 'EN' inner join `employees` on `tours`.`employee_id` = `employees`.`id` where exists (select * from `employees` where `tours`.`employee_id` = `employees`.`id` and ((exists (select * from `routes` where `employees`.`route_id` = `routes`.`id` and ((`routes`.`id` in (133) or `routes`.`user_group_id` in (23)))) or exists (select * from `warehouses` where `employees`.`warehouse_id` = `warehouses`.`id` and ((exists (select * from `core_villes` inner join `warehouse_ville` on `core_villes`.`id` = `warehouse_ville`.`villes_id` where `warehouses`.`id` = `warehouse_ville`.`warehouse_id` and `core_villes`.`id` in (5))) or (`warehouses`.`user_group_id` in (23)))))) and `employees`.`deleted_at` is null) and `tours`.`type` = 'DELIVERY' and `tours`.`status` in ('COMPLETED', 'FORCECLOSED', 'PARTIALLYCOMPLETED') and `tours`.`creation_id` in ('T-001001-1739888078882') and 0 = 1 and (`orders`.`tour_delivery_id` != `tours`.`id` or (`orders`.`status` not in ('DELIVERED', 'PARTIALDELIVERY', 'CANCELED'))) group by `orders`.`creation_id`, `products`.`id`, `employees`.`id`, `price`, `tours`.`creation_id` order by `employee_name` asc, `product_name` asc", "template": "tours_postponed_orders", "sample_id": 3}
{"prompt": "The products of orders postponed by delivery man on tour tour: T-001001-1715593283985 Delivery:", "completion": "select products.id as product_id, products.name as product_name, employees.name as employee_name, MIN(unit_langs.name) as base_unit_lang, employees.id as employee_id, MIN(products.has_display_unit) as agg_has_display_unit, MIN(products.display_unit_name) as agg_display_unit_name, MIN(products.display_unit_scale) as agg_display_unit_scale, order_product.discounted_price as price, tours.creation_id as tour_creation_id, orders.creation_id as order_creation_id from `tours` inner join `order_tour_client` on `tours`.`id` = `order_tour_client`.`tour_id` inner join `orders` on `orders`.`id` = `order_tour_client`.`order_id` inner join `order_product` on `orders`.`id` = `order_product`.`order_id` inner join `products` on `order_product`.`product_id` = `products`.`id` inner join `unit_langs` on `order_product`.`unit_id` = `unit_langs`.`unit_id` and `unit_langs`.`lang` = 'EN' inner join `employees` on `tours`.`employee_id` = `employees`.`id` where exists (select * from `employees` where `tours`.`employee_id` = `employees`.`id` and ((exists (select * from `routes` where `employees`.`route_id` = `routes`.`id` and ((`routes`.`id` in (133) or `routes`.`user_group_id` in (23)))) or exists (select * from `warehouses` where `employees`.`warehouse_id` = `warehouses`.`id` and ((exists (select * from `core_villes` inner join `warehouse_ville` on `core_villes`.`id` = `warehouse_ville`.`villes_id` where `warehouses`.`id` = `warehouse_ville`.`warehouse_id` and `core_villes`.`id` in (5))) or (`warehouses`.`user_group_id` in (23)))))) and `employees`.`deleted_at` is null) and `tours`.`type` = 'DELIVERY' and `tours`.`status` in ('COMPLETED', 'FORCECLOSED', 'PARTIALLYCOMPLETED') and `tours`.`creation_id` in ('T-001001-1715593283985') and 0 = 1 and (`orders`.`tour_delivery_id` != `tours`.`id` or (`orders`.`status` not in ('DELIVERED', 'PARTIALDELIVERY', 'CANCELED'))) group by `orders`.`creation_id`, `products`.`id`, `employees`.`id`, `price`, `tours`.`creation_id` order by `employee_name` asc, `product_name` asc", "template": "tours_postponed_orders", "sample_id": 4}
{"prompt": "Orders products postponed by delivery man on tour tour: T-000001-1695913956005", "completion": "select products.id as product_id, products.name as product_name, employees.name as employee_name, MIN(unit_langs.name) as base_unit_lang, employees.id as employee_id, MIN(products.has_display_unit) as agg_has_display_unit, MIN(products.display_unit_name) as agg_display_unit_name, MIN(products.display_unit_scale) as agg_display_unit_scale, order_product.discounted_price as price, tours.creation_id as tour_creation_id, orders.creation_id as order_creation_id from `tours` inner join `order_tour_client` on `tours`.`id` = `order_tour_client`.`tour_id` inner join `orders` on `orders`.`id` = `order_tour_client`.`order_id` inner join `order_product` on `orders`.`id` = `order_product`.`order_id` inner join `products` on `order_product`.`product_id` = `products`.`id` inner join `unit_langs` on `order_product`.`unit_id` = `unit_langs`.`unit_id` and `unit_langs`.`lang` = 'EN' inner join `employees` on `tours`.`employee_id` = `employees`.`id` where exists (select * from `employees` where `tours`.`employee_id` = `employees`.`id` and ((exists (select * from `routes` where `employees`.`route_id` = `routes`.`id` and ((`routes`.`id` in (133) or `routes`.`user_group_id` in (23)))) or exists (select * from `warehouses` where `employees`.`warehouse_id` = `warehouses`.`id` and ((exists (select * from `core_villes` inner join `warehouse_ville` on `core_villes`.`id` = `warehouse_ville`.`villes_id` where `warehouses`.`id` = `warehouse_ville`.`warehouse_id` and `core_villes`.`id` in (5))) or (`warehouses`.`user_group_id` in (23)))))) and `employees`.`deleted_at` is null) and `tours`.`type` = 'DELIVERY' and `tours`.`status` in ('COMPLETED', 'FORCECLOSED', 'PARTIALLYCOMPLETED') and `tours`.`creation_id` in ('T-000001-1695913956005') and (`orders`.`tour_delivery_id` != `tours`.`id` or (`orders`.`status` not in ('DELIVERED', 'PARTIALDELIVERY', 'CANCELED'))) group by `orders`.`creation_id`, `products`.`id`, `employees`.`id`, `price`, `tours`.`creation_id` order by `employee_name` asc, `product_name` asc", "template": "tours_postponed_orders", "sample_id": 5}
{"prompt": "Products sold by customers", "completion": "select MIN(clients.company_name) as client_company_name, clients.id as client_id, MIN(products.name) as product_name, products.id as product_id, SUM(order_product.quantity) as qte from `orders` inner join `clients` on `orders`.`client_id` = `clients`.`id` inner join `order_product` on `orders`.`id` = `order_product`.`order_id` inner join `products` on `order_product`.`product_id` = `products`.`id` where `orders`.`status` in ('DELIVERED', 'PARTIALDELIVERY') group by `products`.`id`, `clients`.`id` order by `products`.`name` desc, `clients`.`company_name` asc", "template": "sold_products_per_clients", "sample_id": 1}
{"prompt": "Products sold by customers Product: Tast Enhancers Bouillon Cube Etuis 8 Mouton 8x10g Promo, Flan Leila Vanille 12 x 100g Date: 07/09/2025 to 14/09/2025", "completion": "select MIN(clients.company_name) as client_company_name, clients.id as client_id, MIN(products.name) as product_name, products.id as product_id, SUM(order_product.quantity) as qte from `orders` inner join `clients` on `orders`.`client_id` = `clients`.`id` inner join `order_product` on `orders`.`id` = `order_product`.`order_id` inner join `products` on `order_product`.`product_id` = `products`.`id` where `product_id` in (76, 54) and `start_time` between '2025-09-07 00:00:00' and '2025-09-14 23:59:59' and `orders`.`status` in ('DELIVERED', 'PARTIALDELIVERY') group by `products`.`id`, `clients`.`id` order by `products`.`name` desc, `clients`.`company_name` asc", "template": "sold_products_per_clients", "sample_id": 2}
{"prompt": "Products sold by customers", "completion": "select MIN(clients.company_name) as client_company_name, clients.id as client_id, MIN(products.name) as product_name, products.id as product_id, SUM(order_product.quantity) as qte from `orders` inner join `clients` on `orders`.`client_id` = `clients`.`id` inner join `order_product` on `orders`.`id` = `order_product`.`order_id` inner join `products` on `order_product`.`product_id` = `products`.`id` where `orders`.`status` in ('DELIVERED', 'PARTIALDELIVERY') group by `products`.`id`, `clients`.`id` order by `products`.`name` desc, `clients`.`company_name` asc", "template": "sold_products_per_clients", "sample_id": 3}
{"prompt": "Products sold by customers Date: 12/09/2025", "completion": "select MIN(clients.company_name) as client_company_name, clients.id as client_id, MIN(products.name) as product_name, products.id as product_id, SUM(order_product.quantity) as qte from `orders` inner join `clients` on `orders`.`client_id` = `clients`.`id` inner join `order_product` on `orders`.`id` = `order_product`.`order_id` inner join `products` on `order_product`.`product_id` = `products`.`id` where date(`start_time`) = '2025-09-12' and `orders`.`status` in ('DELIVERED', 'PARTIALDELIVERY') group by `products`.`id`, `clients`.`id` order by `products`.`name` desc, `clients`.`company_name` asc", "template": "sold_products_per_clients", "sample_id": 4}
{"prompt": "Products sold by customers Product: Tast Enhancers Bouillon Cube Etuis 8 Mouton 8x10g Promo Date: 29/09/2025", "completion": "select MIN(clients.company_name) as client_company_name, clients.id as client_id, MIN(products.name) as product_name, products.id as product_id, SUM(order_product.quantity) as qte from `orders` inner join `clients` on `orders`.`client_id` = `clients`.`id` inner join `order_product` on `orders`.`id` = `order_product`.`order_id` inner join `products` on `order_product`.`product_id` = `products`.`id` where `product_id` in (54) and date(`start_time`) >= '2025-09-29' and `orders`.`status` in ('DELIVERED', 'PARTIALDELIVERY') group by `products`.`id`, `clients`.`id` order by `products`.`name` desc, `clients`.`company_name` asc", "template": "sold_products_per_clients", "sample_id": 5}
{"prompt": "Detailing product sales", "completion": "select MIN(drivers.name) as delivery_employee_name, MIN(sellers.name) as employee_name, MIN(unit_langs.name) as base_unit_lang, orders.employee_id as employee_id, orders.delivery_employee_id as delivery_employee_id, products.id as product_id, MIN(products.name) as product_name, clients.id as client_id, MIN(clients.company_name) as client_name, MIN(products.has_display_unit) as agg_has_display_unit, MIN(products.display_unit_name) as agg_display_unit_name, MIN(products.display_unit_scale) as agg_display_unit_scale, order_product.discounted_price as price, SUM(order_product.quantity) as total_quantity, SUM(order_product.delivered_quantity) as delivered_quantity, SUM(order_product.total_delivered_price) as total_delivered, DATE(orders.delivery_time) as delivery_date, DATE(orders.start_time) as order_date, MIN(orders.status) as order_status, orders.id as order_id, MIN(orders.creation_id) as order_creation_id from `orders` inner join `employees` as `drivers` on `orders`.`delivery_employee_id` = `drivers`.`id` and `drivers`.`type` != 'SELLER' inner join `employees` as `sellers` on `orders`.`employee_id` = `sellers`.`id` and `sellers`.`type` = 'SELLER' inner join `clients` on `orders`.`client_id` = `clients`.`id` inner join `order_product` on `orders`.`id` = `order_product`.`order_id` inner join `products` on `order_product`.`product_id` = `products`.`id` inner join `unit_langs` on `order_product`.`unit_id` = `unit_langs`.`unit_id` and `unit_langs`.`lang` = 'EN' where exists (select * from `clients` where `orders`.`client_id` = `clients`.`id` and (((`clients`.`villes_id` in (5) and (`clients`.`route_id` is null or `clients`.`route_id` in (133))) or `clients`.`route_id` in (133)) or (`clients`.`user_group_id` in (23)))) group by `orders`.`id`, `clients`.`id`, `orders`.`employee_id`, `orders`.`delivery_employee_id`, `products`.`id`, `price` having `total_quantity` > 0 order by `order_date` desc, `product_name` asc", "template": "products_sales_details", "sample_id": 1}
{"prompt": "Details of sales of seller products: Product: Seasonings Chicken 30x7g, BC JB Chicken 24x 16 DZ PRM SPG 24 (New), BC JB Chicken 24x8 DZ PRM SPG 24 (New) Order date: 13/10/2025 Delivery date: 15/10/2025", "completion": "select MIN(drivers.name) as delivery_employee_name, MIN(sellers.name) as employee_name, MIN(unit_langs.name) as base_unit_lang, orders.employee_id as employee_id, orders.delivery_employee_id as delivery_employee_id, products.id as product_id, MIN(products.name) as product_name, clients.id as client_id, MIN(clients.company_name) as client_name, MIN(products.has_display_unit) as agg_has_display_unit, MIN(products.display_unit_name) as agg_display_unit_name, MIN(products.display_unit_scale) as agg_display_unit_scale, order_product.discounted_price as price, SUM(order_product.quantity) as total_quantity, SUM(order_product.delivered_quantity) as delivered_quantity, SUM(order_product.total_delivered_price) as total_delivered, DATE(orders.delivery_time) as delivery_date, DATE(orders.start_time) as order_date, MIN(orders.status) as order_status, orders.id as order_id, MIN(orders.creation_id) as order_creation_id from `orders` inner join `employees` as `drivers` on `orders`.`delivery_employee_id` = `drivers`.`id` and `drivers`.`type` != 'SELLER' inner join `employees` as `sellers` on `orders`.`employee_id` = `sellers`.`id` and `sellers`.`type` = 'SELLER' inner join `clients` on `orders`.`client_id` = `clients`.`id` inner join `order_product` on `orders`.`id` = `order_product`.`order_id` inner join `products` on `order_product`.`product_id` = `products`.`id` inner join `unit_langs` on `order_product`.`unit_id` = `unit_langs`.`unit_id` and `unit_langs`.`lang` = 'EN' where exists (select * from `clients` where `orders`.`client_id` = `clients`.`id` and (((`clients`.`villes_id` in (5) and (`clients`.`route_id` is null or `clients`.`route_id` in (133))) or `clients`.`route_id` in (133)) or (`clients`.`user_group_id` in (23)))) and 0 = 1 and `product_id` in (24, 91, 92) group by `orders`.`id`, `clients`.`id`, `orders`.`employee_id`, `orders`.`delivery_employee_id`, `products`.`id`, `price` having `total_quantity` > 0 and order_date = '2025-10-13 00:00:00' and delivery_date <= '2025-10-15 00:00:00' order by `order_date` desc, `product_name` asc", "template": "products_sales_details", "sample_id": 2}
{"prompt": "Details of delivery of delivery products: Seller: Product: Tomato Tomasauce Tomasauce 250 ml 250ml Delivery date: 28/09/2025", "completion": "select MIN(drivers.name) as delivery_employee_name, MIN(sellers.name) as employee_name, MIN(unit_langs.name) as base_unit_lang, orders.employee_id as employee_id, orders.delivery_employee_id as delivery_employee_id, products.id as product_id, MIN(products.name) as product_name, clients.id as client_id, MIN(clients.company_name) as client_name, MIN(products.has_display_unit) as agg_has_display_unit, MIN(products.display_unit_name) as agg_display_unit_name, MIN(products.display_unit_scale) as agg_display_unit_scale, order_product.discounted_price as price, SUM(order_product.quantity) as total_quantity, SUM(order_product.delivered_quantity) as delivered_quantity, SUM(order_product.total_delivered_price) as total_delivered, DATE(orders.delivery_time) as delivery_date, DATE(orders.start_time) as order_date, MIN(orders.status) as order_status, orders.id as order_id, MIN(orders.creation_id) as order_creation_id from `orders` inner join `employees` as `drivers` on `orders`.`delivery_employee_id` = `drivers`.`id` and `drivers`.`type` != 'SELLER' inner join `employees` as `sellers` on `orders`.`employee_id` = `sellers`.`id` and `sellers`.`type` = 'SELLER' inner join `clients` on `orders`.`client_id` = `clients`.`id` inner join `order_product` on `orders`.`id` = `order_product`.`order_id` inner join `products` on `order_product`.`product_id` = `products`.`id` inner join `unit_langs` on `order_product`.`unit_id` = `unit_langs`.`unit_id` and `unit_langs`.`lang` = 'EN' where exists (select * from `clients` where `orders`.`client_id` = `clients`.`id` and (((`clients`.`villes_id` in (5) and (`clients`.`route_id` is null or `clients`.`route_id` in (133))) or `clients`.`route_id` in (133)) or (`clients`.`user_group_id` in (23)))) and 0 = 1 and 0 = 1 and `product_id` in (8) group by `orders`.`id`, `clients`.`id`, `orders`.`employee_id`, `orders`.`delivery_employee_id`, `products`.`id`, `price` having `total_quantity` > 0 and delivery_date = '2025-09-28 00:00:00' order by `order_date` desc, `product_name` asc", "template": "products_sales_details", "sample_id": 3}
{"prompt": "The details of sales of delivery products: Seller: Product: Cube Etuis Beef 8x10g, Tast Enhancers Bouillon Cube Etuis 8 Mouton 8x10g Promo, مرغرين صول Delivery date: 01/10/2025", "completion": "select MIN(drivers.name) as delivery_employee_name, MIN(sellers.name) as employee_name, MIN(unit_langs.name) as base_unit_lang, orders.employee_id as employee_id, orders.delivery_employee_id as delivery_employee_id, products.id as product_id, MIN(products.name) as product_name, clients.id as client_id, MIN(clients.company_name) as client_name, MIN(products.has_display_unit) as agg_has_display_unit, MIN(products.display_unit_name) as agg_display_unit_name, MIN(products.display_unit_scale) as agg_display_unit_scale, order_product.discounted_price as price, SUM(order_product.quantity) as total_quantity, SUM(order_product.delivered_quantity) as delivered_quantity, SUM(order_product.total_delivered_price) as total_delivered, DATE(orders.delivery_time) as delivery_date, DATE(orders.start_time) as order_date, MIN(orders.status) as order_status, orders.id as order_id, MIN(orders.creation_id) as order_creation_id from `orders` inner join `employees` as `drivers` on `orders`.`delivery_employee_id` = `drivers`.`id` and `drivers`.`type` != 'SELLER' inner join `employees` as `sellers` on `orders`.`employee_id` = `sellers`.`id` and `sellers`.`type` = 'SELLER' inner join `clients` on `orders`.`client_id` = `clients`.`id` inner join `order_product` on `orders`.`id` = `order_product`.`order_id` inner join `products` on `order_product`.`product_id` = `products`.`id` inner join `unit_langs` on `order_product`.`unit_id` = `unit_langs`.`unit_id` and `unit_langs`.`lang` = 'EN' where exists (select * from `clients` where `orders`.`client_id` = `clients`.`id` and (((`clients`.`villes_id` in (5) and (`clients`.`route_id` is null or `clients`.`route_id` in (133))) or `clients`.`route_id` in (133)) or (`clients`.`user_group_id` in (23)))) and 0 = 1 and 0 = 1 and `product_id` in (37, 54, 58) group by `orders`.`id`, `clients`.`id`, `orders`.`employee_id`, `orders`.`delivery_employee_id`, `products`.`id`, `price` having `total_quantity` > 0 and delivery_date = '2025-10-01 00:00:00' order by `order_date` desc, `product_name` asc", "template": "products_sales_details", "sample_id": 4}
{"prompt": "Detailing delivery products: order date: 23/09/2025 to 26/09/2025 Delivery date: 17/10/2025", "completion": "select MIN(drivers.name) as delivery_employee_name, MIN(sellers.name) as employee_name, MIN(unit_langs.name) as base_unit_lang, orders.employee_id as employee_id, orders.delivery_employee_id as delivery_employee_id, products.id as product_id, MIN(products.name) as product_name, clients.id as client_id, MIN(clients.company_name) as client_name, MIN(products.has_display_unit) as agg_has_display_unit, MIN(products.display_unit_name) as agg_display_unit_name, MIN(products.display_unit_scale) as agg_display_unit_scale, order_product.discounted_price as price, SUM(order_product.quantity) as total_quantity, SUM(order_product.delivered_quantity) as delivered_quantity, SUM(order_product.total_delivered_price) as total_delivered, DATE(orders.delivery_time) as delivery_date, DATE(orders.start_time) as order_date, MIN(orders.status) as order_status, orders.id as order_id, MIN(orders.creation_id) as order_creation_id from `orders` inner join `employees` as `drivers` on `orders`.`delivery_employee_id` = `drivers`.`id` and `drivers`.`type` != 'SELLER' inner join `employees` as `sellers` on `orders`.`employee_id` = `sellers`.`id` and `sellers`.`type` = 'SELLER' inner join `clients` on `orders`.`client_id` = `clients`.`id` inner join `order_product` on `orders`.`id` = `order_product`.`order_id` inner join `products` on `order_product`.`product_id` = `products`.`id` inner join `unit_langs` on `order_product`.`unit_id` = `unit_langs`.`unit_id` and `unit_langs`.`lang` = 'EN' where exists (select * from `clients` where `orders`.`client_id` = `clients`.`id` and (((`clients`.`villes_id` in (5) and (`clients`.`route_id` is null or `clients`.`route_id` in (133))) or `clients`.`route_id` in (133)) or (`clients`.`user_group_id` in (23)))) and 0 = 1 group by `orders`.`id`, `clients`.`id`, `orders`.`employee_id`, `orders`.`delivery_employee_id`, `products`.`id`, `price` having `total_quantity` > 0 and order_date BETWEEN '2025-09-23 00:00:00' AND '2025-09-26 23:59:59' and delivery_date <= '2025-10-17 00:00:00' order by `order_date` desc, `product_name` asc", "template": "products_sales_details", "sample_id": 5}
{"prompt": "The list of customers (Cospack)", "completion": "select * from `clients` where (((`clients`.`villes_id` in (5) and (`clients`.`route_id` is null or `clients`.`route_id` in (133))) or `clients`.`route_id` in (133)) or (`clients`.`user_group_id` in (23))) and `clients`.`deleted_at` is null", "template": "cospack_clients_list", "sample_id": 1}
{"prompt": "The list of customers (Cospack)", "completion": "select * from `clients` where (((`clients`.`villes_id` in (5) and (`clients`.`route_id` is null or `clients`.`route_id` in (133))) or `clients`.`route_id` in (133)) or (`clients`.`user_group_id` in (23))) and `clients`.`deleted_at` is null", "template": "cospack_clients_list", "sample_id": 2}
{"prompt": "The list of customers (COSPACK) Creation date: 12/09/2025", "completion": "select * from `clients` where (((`clients`.`villes_id` in (5) and (`clients`.`route_id` is null or `clients`.`route_id` in (133))) or `clients`.`route_id` in (133)) or (`clients`.`user_group_id` in (23))) and date(`clients`.`created_at`) = '2025-09-12' and `clients`.`deleted_at` is null", "template": "cospack_clients_list", "sample_id": 3}
{"prompt": "The list of customers (COSPACK) Creation date: 30/08/2025 to 01/09/2025", "completion": "select * from `clients` where (((`clients`.`villes_id` in (5) and (`clients`.`route_id` is null or `clients`.`route_id` in (133))) or `clients`.`route_id` in (133)) or (`clients`.`user_group_id` in (23))) and `clients`.`created_at` between '2025-08-30 00:00:00' and '2025-09-01 23:59:59' and `clients`.`deleted_at` is null", "template": "cospack_clients_list", "sample_id": 4}
{"prompt": "The list of customers (Cospack)", "completion": "select * from `clients` where (((`clients`.`villes_id` in (5) and (`clients`.`route_id` is null or `clients`.`route_id` in (133))) or `clients`.`route_id` in (133)) or (`clients`.`user_group_id` in (23))) and `clients`.`deleted_at` is null", "template": "cospack_clients_list", "sample_id": 5}
{"prompt": "The list of products (Cospack)", "completion": "select * from `products`", "template": "cospack_products_list", "sample_id": 1}
{"prompt": "The list of products (COSPACK) Creation date: 07/10/2025", "completion": "select * from `products` where date(`products`.`created_at`) = '2025-10-07'", "template": "cospack_products_list", "sample_id": 2}
{"prompt": "The list of products (Cospack)", "completion": "select * from `products`", "template": "cospack_products_list", "sample_id": 3}
{"prompt": "The list of products (COSPACK) Creation date: 27/09/2025", "completion": "select * from `products` where date(`products`.`created_at`) = '2025-09-27'", "template": "cospack_products_list", "sample_id": 4}
{"prompt": "The product list (COSPACK) Creation date: 09/03/2025", "completion": "select * from `products` where date(`products`.`created_at`) >= '2025-09-03'", "template": "cospack_products_list", "sample_id": 5}
{"prompt": "The list of commands (Cospack)", "completion": "select `orders`.`creation_id` as `order_id`, `orders`.`start_time` as `start_time`, orders.client_id as client_id, clients.villes_id as villes_id, products.id as product_id, order_product.quantity as total_quantity, order_product.delivered_quantity as delivered_quantity, order_product.total_discounted_price as total_ordered, order_product.total_delivered_price as total_delivered, orders.created_at as created_at, orders.updated_at as updated_at, orders.status as status from `orders` inner join `clients` on `orders`.`client_id` = `clients`.`id` inner join `order_product` on `order_product`.`order_id` = `orders`.`id` inner join `products` on `order_product`.`product_id` = `products`.`id` where exists (select * from `clients` where `orders`.`client_id` = `clients`.`id` and (((`clients`.`villes_id` in (5) and (`clients`.`route_id` is null or `clients`.`route_id` in (133))) or `clients`.`route_id` in (133)) or (`clients`.`user_group_id` in (23))))", "template": "cospack_orders_list", "sample_id": 1}
{"prompt": "The list of commands (Cospack) Province: Guelma, Tindouf, Tipaza", "completion": "select `orders`.`creation_id` as `order_id`, `orders`.`start_time` as `start_time`, orders.client_id as client_id, clients.villes_id as villes_id, products.id as product_id, order_product.quantity as total_quantity, order_product.delivered_quantity as delivered_quantity, order_product.total_discounted_price as total_ordered, order_product.total_delivered_price as total_delivered, orders.created_at as created_at, orders.updated_at as updated_at, orders.status as status from `orders` inner join `clients` on `orders`.`client_id` = `clients`.`id` inner join `order_product` on `order_product`.`order_id` = `orders`.`id` inner join `products` on `order_product`.`product_id` = `products`.`id` where exists (select * from `clients` where `orders`.`client_id` = `clients`.`id` and (((`clients`.`villes_id` in (5) and (`clients`.`route_id` is null or `clients`.`route_id` in (133))) or `clients`.`route_id` in (133)) or (`clients`.`user_group_id` in (23)))) and `villes_id` in (24, 42, 37)", "template": "cospack_orders_list", "sample_id": 2}
{"prompt": "The list of orders (Cospack) Order date: 25/08/2025 Province: Tlemcen, Tizi Ouzou, El Bayadh", "completion": "select `orders`.`creation_id` as `order_id`, `orders`.`start_time` as `start_time`, orders.client_id as client_id, clients.villes_id as villes_id, products.id as product_id, order_product.quantity as total_quantity, order_product.delivered_quantity as delivered_quantity, order_product.total_discounted_price as total_ordered, order_product.total_delivered_price as total_delivered, orders.created_at as created_at, orders.updated_at as updated_at, orders.status as status from `orders` inner join `clients` on `orders`.`client_id` = `clients`.`id` inner join `order_product` on `order_product`.`order_id` = `orders`.`id` inner join `products` on `order_product`.`product_id` = `products`.`id` where exists (select * from `clients` where `orders`.`client_id` = `clients`.`id` and (((`clients`.`villes_id` in (5) and (`clients`.`route_id` is null or `clients`.`route_id` in (133))) or `clients`.`route_id` in (133)) or (`clients`.`user_group_id` in (23)))) and date(`start_time`) <= '2025-08-25' and `villes_id` in (13, 32, 15)", "template": "cospack_orders_list", "sample_id": 3}
{"prompt": "The list of orders (COSPACK) Order date: 20/09/2025 Province: Tamanrasset, Tindouf, Tissemsilt", "completion": "select `orders`.`creation_id` as `order_id`, `orders`.`start_time` as `start_time`, orders.client_id as client_id, clients.villes_id as villes_id, products.id as product_id, order_product.quantity as total_quantity, order_product.delivered_quantity as delivered_quantity, order_product.total_discounted_price as total_ordered, order_product.total_delivered_price as total_delivered, orders.created_at as created_at, orders.updated_at as updated_at, orders.status as status from `orders` inner join `clients` on `orders`.`client_id` = `clients`.`id` inner join `order_product` on `order_product`.`order_id` = `orders`.`id` inner join `products` on `order_product`.`product_id` = `products`.`id` where exists (select * from `clients` where `orders`.`client_id` = `clients`.`id` and (((`clients`.`villes_id` in (5) and (`clients`.`route_id` is null or `clients`.`route_id` in (133))) or `clients`.`route_id` in (133)) or (`clients`.`user_group_id` in (23)))) and date(`start_time`) >= '2025-09-20' and `villes_id` in (38, 37, 11)", "template": "cospack_orders_list", "sample_id": 4}
{"prompt": "The list of commands (COSPACK) Order date: 13/12/2025", "completion": "select `orders`.`creation_id` as `order_id`, `orders`.`start_time` as `start_time`, orders.client_id as client_id, clients.villes_id as villes_id, products.id as product_id, order_product.quantity as total_quantity, order_product.delivered_quantity as delivered_quantity, order_product.total_discounted_price as total_ordered, order_product.total_delivered_price as total_delivered, orders.created_at as created_at, orders.updated_at as updated_at, orders.status as status from `orders` inner join `clients` on `orders`.`client_id` = `clients`.`id` inner join `order_product` on `order_product`.`order_id` = `orders`.`id` inner join `products` on `order_product`.`product_id` = `products`.`id` where exists (select * from `clients` where `orders`.`client_id` = `clients`.`id` and (((`clients`.`villes_id` in (5) and (`clients`.`route_id` is null or `clients`.`route_id` in (133))) or `clients`.`route_id` in (133)) or (`clients`.`user_group_id` in (23)))) and date(`start_time`) <= '2025-10-13'", "template": "cospack_orders_list", "sample_id": 5}
{"prompt": "The list of customers without purchase", "completion": "select * from `clients` where `id` in (1034087, 1034088, 1034089, 1034090, 1034091, 1034092, 1034093, 1034094, 1034095, 1034096, 1034097, 1034098, 1034099, 1034100, 1034101, 1034102, 1034103, 1034104, 1034105, 1034106, 1034107, 1034108, 1034109, 1034110, 1034111, 1034112, 1034113, 1034114, 1034115, 1034116, 1034117, 1034118, 1034119, 1034120, 1034121, 1034122, 1034123, 1034124, 1034125, 1034126, 1034127, 1034128, 1034129, 1034130, 1034131, 1034132, 1034133, 1034134, 1034135, 1034136, 1034137, 1034138, 1034139, 1034140, 1034141, 1034142, 1034143, 1034144, 1034145, 1034146, 1034147, 1034148, 1034149, 1034150, 1034151, 1034152, 1034153, 1034154, 1034155, 1034156, 1034157, 1034158, 1034159, 1034160, 1034161, 1034162, 1034163, 1034164, 1034165, 1034166, 1034167, 1034168, 1034169, 1034170, 1034207, 1034208, 1034209, 1034210, 1034211, 1034212, 1034213, 1034214, 1034215, 1034216, 1034217, 1034218, 1034219, 1034220, 1034221, 1034222, 1034223, 1034224, 1034225, 1034226, 1034227, 1034228, 1034229, 1034230, 1034241, 1034242, 1034243, 1034244, 1034245, 1034246, 1034247, 1034248, 1034249, 1034250, 1034251, 1034252, 1034253, 1034254, 1034255, 1034256, 1034257, 1034258, 1034259, 1034260, 1034261, 1034262, 1034263, 1034265, 1034266, 1034267, 1034268, 1034269, 1034270, 1034271, 1034272, 1034273, 1034274, 1034275, 1034276, 1034277, 1034278, 1034279, 1034280, 1034281, 1034282, 1034283, 1034311, 1034312, 1034313, 1034314, 1034315, 1034316, 1034317, 1034318, 1034319, 1034320, 1034321, 1034322, 1034323, 1034324, 1034325, 1034326, 1034327, 1034328, 1034329, 1034330, 1034331, 1034332, 1034333, 1034334, 1034335, 1034336, 1034337, 1034338, 1034339, 1034340, 1034341, 1034342, 1034344, 1034345, 1034346, 1034347, 1034348, 1034349, 1034350, 1034351, 1034352, 1034353, 1034354, 1034355, 1034356, 1034357, 1034358, 1034359, 1034360, 1034361, 1034362, 1034363, 1034364, 1034365, 1034366, 1034380, 1034381, 1034382, 1034383, 1034384, 1034385, 1034386, 1034387, 1034388, 1034389, 1034390, 1034391, 1034431, 1034448, 1034449, 1034450, 1034451, 1034452, 1034453, 1034454, 1034455, 1034456, 1034458, 1034459, 1034460, 1034461, 1034462, 1034463, 1035483, 1035484, 1035485, 1035486, 1035487, 1035488, 1035489, 1035490, 1035491, 1035492, 1035493, 1035494, 1035495, 1035496, 1035497, 1035498, 1035499, 1035500, 1035501, 1035502, 1035503, 1035504, 1035505, 1035506, 1035507, 1035508, 1035509, 1035510, 1035511, 1035512, 1035513, 1035514, 1035515, 1035516, 1035517, 1035518, 1035519, 1035520, 1035521, 1035522, 1035523, 1035524, 1035525, 1035526, 1035527, 1035528, 1035529, 1035530, 1035531, 1035532, 1035533, 1035534, 1035535, 1035552, 1035553, 1035554, 1035555, 1035556, 1035557, 1035558, 1035559, 1035560, 1035561, 1035562, 1035563, 1035564, 1035565, 1035566, 1035567, 1035568, 1035569, 1035570) and `clients`.`deleted_at` is null", "template": "clients_with_no_purchase", "sample_id": 1}
{"prompt": "The list of customers without purchase product: PLV Noodles 15, Hot & Spicy 70G noodles Brand: Maxon Category: No Vendible, Mix, Chicken Marinated Route: Route 41, 1_48754, 4201 (Tipaza)", "completion": "select * from `clients` where 0 = 1 and `clients`.`deleted_at` is null", "template": "clients_with_no_purchase", "sample_id": 2}
{"prompt": "The list of customers without purchase product: Curry 70G noodles, tomato sauce 1L Brand: 167_167_mbo, leila category: POLV MATERIAL, CURRY chicken, Boeuf Route: Final, 0_90637, 29xxx", "completion": "select * from `clients` where 0 = 1 and `clients`.`deleted_at` is null", "template": "clients_with_no_purchase", "sample_id": 3}
{"prompt": "The list of customers without purchase Date: 27/08/2025 to 31/08/2025 Brand: Kool, PALMARY, Category moment: Promo dct, bechamel, chicken marinated route: Training0309/2", "completion": "select * from `clients` where 0 = 1 and `clients`.`deleted_at` is null", "template": "clients_with_no_purchase", "sample_id": 4}
{"prompt": "The list of customers without purchase product: Dry sauces sauces bechamel 52g, tast enhancers bouillon cube etuis 8 2 chicken 10x10g, noodles vegetables 70g 1/2 card date: 28/08/2025 Brand: moment, qaada, leila route: 2_777756, 0_72961, 0_57271", "completion": "select * from `clients` where 0 = 1 and `clients`.`deleted_at` is null", "template": "clients_with_no_purchase", "sample_id": 5}
{"prompt": "Cause of non purchase", "completion": "select `dynamic_enums`.`code` as `name`, `sub_query`.`count` as `total`, `sub_query`.`start_time` as `date` from `dynamic_enums` inner join (select `reason`, COUNT(*) as count, DATE(orders.start_time) as start_time from `orders` where `status` = 'CANCELED' group by `reason`, `start_time`) as `sub_query` on `dynamic_enums`.`id` = `sub_query`.`reason` where `dynamic_enums`.`deleted_at` is null", "template": "canceled_orders_reasons", "sample_id": 1}
{"prompt": "Cause of non purchase Date: 07/09/2025", "completion": "select `dynamic_enums`.`code` as `name`, `sub_query`.`count` as `total`, `sub_query`.`start_time` as `date` from `dynamic_enums` inner join (select `reason`, COUNT(*) as count, DATE(orders.start_time) as start_time from `orders` where date(`orders`.`delivery_time`) >= '2025-09-07' and `status` = 'CANCELED' group by `reason`, `start_time`) as `sub_query` on `dynamic_enums`.`id` = `sub_query`.`reason` where `dynamic_enums`.`deleted_at` is null", "template": "canceled_orders_reasons", "sample_id": 2}
{"prompt": "Cause of non purchase Date: 08/09/2025", "completion": "select `dynamic_enums`.`code` as `name`, `sub_query`.`count` as `total`, `sub_query`.`start_time` as `date` from `dynamic_enums` inner join (select `reason`, COUNT(*) as count, DATE(orders.start_time) as start_time from `orders` where date(`orders`.`delivery_time`) >= '2025-09-08' and `status` = 'CANCELED' group by `reason`, `start_time`) as `sub_query` on `dynamic_enums`.`id` = `sub_query`.`reason` where `dynamic_enums`.`deleted_at` is null", "template": "canceled_orders_reasons", "sample_id": 3}
{"prompt": "Cause of non purchase Date: 14/09/2025", "completion": "select `dynamic_enums`.`code` as `name`, `sub_query`.`count` as `total`, `sub_query`.`start_time` as `date` from `dynamic_enums` inner join (select `reason`, COUNT(*) as count, DATE(orders.start_time) as start_time from `orders` where date(`orders`.`delivery_time`) <= '2025-09-14' and `status` = 'CANCELED' group by `reason`, `start_time`) as `sub_query` on `dynamic_enums`.`id` = `sub_query`.`reason` where `dynamic_enums`.`deleted_at` is null", "template": "canceled_orders_reasons", "sample_id": 4}
{"prompt": "Cause of non purchase Date: 15/09/2025 to 18/09/2025", "completion": "select `dynamic_enums`.`code` as `name`, `sub_query`.`count` as `total`, `sub_query`.`start_time` as `date` from `dynamic_enums` inner join (select `reason`, COUNT(*) as count, DATE(orders.start_time) as start_time from `orders` where `orders`.`delivery_time` between '2025-09-15 00:00:00' and '2025-09-18 23:59:59' and `status` = 'CANCELED' group by `reason`, `start_time`) as `sub_query` on `dynamic_enums`.`id` = `sub_query`.`reason` where `dynamic_enums`.`deleted_at` is null", "template": "canceled_orders_reasons", "sample_id": 5}
